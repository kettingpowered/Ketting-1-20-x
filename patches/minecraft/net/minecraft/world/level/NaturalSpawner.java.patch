--- a/net/minecraft/world/level/NaturalSpawner.java
+++ b/net/minecraft/world/level/NaturalSpawner.java
@@ -45,9 +_,9 @@
 import net.minecraft.world.level.levelgen.structure.structures.NetherFortressStructure;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.pathfinder.PathComputationType;
 import net.minecraft.world.phys.Vec3;
 import org.slf4j.Logger;
 
 public final class NaturalSpawner {
    private static final Logger LOGGER = LogUtils.getLogger();
    private static final int MIN_SPAWN_DISTANCE = 24;
@@ -74,7 +_,7 @@
             }
          }
 
-         MobCategory mobcategory = entity.getType().getCategory();
+         MobCategory mobcategory = entity.getClassification(true);
          if (mobcategory != MobCategory.MISC) {
             BlockPos blockpos = entity.blockPosition();
             p_186527_.query(ChunkPos.asLong(blockpos), (p_275163_) -> {
@@ -101,13 +_,31 @@
 
    public static void spawnForChunk(ServerLevel p_47030_, LevelChunk p_47031_, NaturalSpawner.SpawnState p_47032_, boolean p_47033_, boolean p_47034_, boolean p_47035_) {
       p_47030_.getProfiler().push("spawner");
+      p_47030_.timings.mobSpawn.startTiming(); // Spigot
+
+      net.minecraft.world.level.storage.LevelData worlddata = p_47030_.getLevelData(); // CraftBukkit - Other mob type spawn tick rate
 
       for(MobCategory mobcategory : SPAWNING_CATEGORIES) {
-         if ((p_47033_ || !mobcategory.isFriendly()) && (p_47034_ || mobcategory.isFriendly()) && (p_47035_ || !mobcategory.isPersistent()) && p_47032_.canSpawnForCategory(mobcategory, p_47031_.getPos())) {
+         // CraftBukkit start - Use per-world spawn limits
+         boolean spawnThisTick = true;
+         int limit = mobcategory.getMaxInstancesPerChunk();
+         org.bukkit.entity.SpawnCategory spawnCategory = org.bukkit.craftbukkit.v1_20_R2.util.CraftSpawnCategory.toBukkit(mobcategory);
+         if (org.bukkit.craftbukkit.v1_20_R2.util.CraftSpawnCategory.isValidForLimits(spawnCategory)) {
+            spawnThisTick = p_47030_.ticksPerSpawnCategory.getLong(spawnCategory) != 0 && worlddata.getGameTime() % p_47030_.ticksPerSpawnCategory.getLong(spawnCategory) == 0;
+            limit = p_47030_.getWorld().getSpawnLimit(spawnCategory);
+         }
+
+         if (!spawnThisTick || limit == 0) {
+            continue;
+         }
+
+         if ((p_47033_ || !mobcategory.isFriendly()) && (p_47034_ || mobcategory.isFriendly()) && (p_47035_ || !mobcategory.isPersistent()) && p_47032_.canSpawnForCategory(mobcategory, p_47031_.getPos(), limit)) {
+            // CraftBukkit end
             spawnCategoryForChunk(mobcategory, p_47030_, p_47031_, p_47032_::canSpawn, p_47032_::afterSpawn);
          }
       }
 
+      p_47030_.timings.mobSpawn.stopTiming(); // Spigot
       p_47030_.getProfiler().pop();
    }
 
@@ -173,11 +_,16 @@
                         mob.moveTo(d0, (double)i, d1, p_47040_.random.nextFloat() * 360.0F, 0.0F);
                         if (isValidPositionForMob(p_47040_, mob, d2)) {
                            spawngroupdata = mob.finalizeSpawn(p_47040_, p_47040_.getCurrentDifficultyAt(mob.blockPosition()), MobSpawnType.NATURAL, spawngroupdata, (CompoundTag)null);
-                           ++j;
-                           ++l1;
-                           p_47040_.addFreshEntityWithPassengers(mob);
-                           p_47044_.run(mob, p_47041_);
-                           if (j >= mob.getMaxSpawnClusterSize()) {
+                           // CraftBukkit start
+                           // SPIGOT-7045: Give ocelot babies back their special spawn reason. Note: This is the only modification required as ocelots count as monsters which means they only spawn during normal chunk ticking and do not spawn during chunk generation as starter mobs.
+                           p_47040_.addFreshEntityWithPassengers(mob, (mob instanceof net.minecraft.world.entity.animal.Ocelot && !((org.bukkit.entity.Ageable) mob.getBukkitEntity()).isAdult()) ? org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.OCELOT_BABY : org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.NATURAL);
+                           if (!mob.isRemoved()) {
+                              ++j;
+                              ++l1;
+                              p_47044_.run(mob, p_47041_);
+                           }
+                           // CraftBukkit end
+                           if (j >= net.minecraftforge.event.ForgeEventFactory.getMaxSpawnPackSize(mob)) {
                               return;
                            }
 
@@ -244,7 +_,7 @@
       if (p_46994_ > (double)(p_46993_.getType().getCategory().getDespawnDistance() * p_46993_.getType().getCategory().getDespawnDistance()) && p_46993_.removeWhenFarAway(p_46994_)) {
          return false;
       } else {
-         return p_46993_.checkSpawnRules(p_46992_, MobSpawnType.NATURAL) && p_46993_.checkSpawnObstruction(p_46992_);
+         return net.minecraftforge.event.ForgeEventFactory.checkSpawnPosition(p_46993_, p_46992_, MobSpawnType.NATURAL);
       }
    }
 
@@ -258,7 +_,8 @@
    }
 
    private static WeightedRandomList<MobSpawnSettings.SpawnerData> mobsAt(ServerLevel p_220444_, StructureManager p_220445_, ChunkGenerator p_220446_, MobCategory p_220447_, BlockPos p_220448_, @Nullable Holder<Biome> p_220449_) {
-      return isInNetherFortressBounds(p_220448_, p_220444_, p_220447_, p_220445_) ? NetherFortressStructure.FORTRESS_ENEMIES : p_220446_.getMobsAt(p_220449_ != null ? p_220449_ : p_220444_.getBiome(p_220448_), p_220445_, p_220447_, p_220448_);
+      // Forge: Add in potential spawns, and replace hardcoded nether fortress mob list
+      return net.minecraftforge.event.ForgeEventFactory.getPotentialSpawns(p_220444_, p_220447_, p_220448_, isInNetherFortressBounds(p_220448_, p_220444_, p_220447_, p_220445_) ? p_220445_.registryAccess().registryOrThrow(Registries.STRUCTURE).getOrThrow(BuiltinStructures.FORTRESS).spawnOverrides().get(MobCategory.MONSTER).spawns() : p_220446_.getMobsAt(p_220449_ != null ? p_220449_ : p_220444_.getBiome(p_220448_), p_220445_, p_220447_, p_220448_));
    }
 
    public static boolean isInNetherFortressBounds(BlockPos p_220456_, ServerLevel p_220457_, MobCategory p_220458_, StructureManager p_220459_) {
@@ -297,6 +_,13 @@
       if (p_47052_ == SpawnPlacements.Type.NO_RESTRICTIONS) {
          return true;
       } else if (p_47055_ != null && p_47053_.getWorldBorder().isWithinBounds(p_47054_)) {
+         return p_47052_.canSpawnAt(p_47053_, p_47054_, p_47055_);
+      }
+      return false;
+   }
+
+   public static boolean canSpawnAtBody(SpawnPlacements.Type p_47052_, LevelReader p_47053_, BlockPos p_47054_, @Nullable EntityType<?> p_47055_) {
+      {
          BlockState blockstate = p_47053_.getBlockState(p_47054_);
          FluidState fluidstate = p_47053_.getFluidState(p_47054_);
          BlockPos blockpos = p_47054_.above();
@@ -309,14 +_,12 @@
             case ON_GROUND:
             default:
                BlockState blockstate1 = p_47053_.getBlockState(blockpos1);
-               if (!blockstate1.isValidSpawn(p_47053_, blockpos1, p_47055_)) {
+            if (!blockstate1.isValidSpawn(p_47053_, blockpos1, p_47052_, p_47055_)) {
                   return false;
                } else {
                   return isValidEmptySpawnBlock(p_47053_, p_47054_, blockstate, fluidstate, p_47055_) && isValidEmptySpawnBlock(p_47053_, blockpos, p_47053_.getBlockState(blockpos), p_47053_.getFluidState(blockpos), p_47055_);
                }
          }
-      } else {
-         return false;
       }
    }
 
@@ -366,7 +_,7 @@
                         entity.moveTo(d0, (double)blockpos.getY(), d1, p_220454_.nextFloat() * 360.0F, 0.0F);
                         if (entity instanceof Mob) {
                            Mob mob = (Mob)entity;
-                           if (mob.checkSpawnRules(p_220451_, MobSpawnType.CHUNK_GENERATION) && mob.checkSpawnObstruction(p_220451_)) {
+                           if (net.minecraftforge.event.ForgeEventFactory.checkSpawnPosition(mob, p_220451_, MobSpawnType.CHUNK_GENERATION)) {
                               spawngroupdata = mob.finalizeSpawn(p_220451_, p_220451_.getCurrentDifficultyAt(mob.blockPosition()), MobSpawnType.CHUNK_GENERATION, spawngroupdata, (CompoundTag)null);
                               p_220451_.addFreshEntityWithPassengers(mob);
                               flag = true;
@@ -489,8 +_,11 @@
          return this.unmodifiableMobCategoryCounts;
       }
 
-      boolean canSpawnForCategory(MobCategory p_186549_, ChunkPos p_186550_) {
-         int i = p_186549_.getMaxInstancesPerChunk() * this.spawnableChunkCount / NaturalSpawner.MAGIC_NUMBER;
+      // CraftBukkit start
+      boolean canSpawnForCategory(MobCategory p_186549_, ChunkPos p_186550_, int limit) {
+         int i = limit * this.spawnableChunkCount / NaturalSpawner.MAGIC_NUMBER;
+         // CraftBukkit end
+
          if (this.mobCategoryCounts.getInt(p_186549_) >= i) {
             return false;
          } else {
