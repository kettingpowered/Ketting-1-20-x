--- a/net/minecraft/world/level/Level.java
+++ b/net/minecraft/world/level/Level.java
@@ -70,7 +_,7 @@
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.Scoreboard;
 
-public abstract class Level implements LevelAccessor, AutoCloseable {
+public abstract class Level extends net.minecraftforge.common.capabilities.CapabilityProvider<Level> implements LevelAccessor, AutoCloseable, net.minecraftforge.common.extensions.IForgeLevel {
    public static final Codec<ResourceKey<Level>> RESOURCE_KEY_CODEC = ResourceKey.codec(Registries.DIMENSION);
    public static final ResourceKey<Level> OVERWORLD = ResourceKey.create(Registries.DIMENSION, new ResourceLocation("overworld"));
    public static final ResourceKey<Level> NETHER = ResourceKey.create(Registries.DIMENSION, new ResourceLocation("the_nether"));
@@ -86,14 +_,14 @@
    protected final NeighborUpdater neighborUpdater;
    private final List<TickingBlockEntity> pendingBlockEntityTickers = Lists.newArrayList();
    private boolean tickingBlockEntities;
-   private final Thread thread;
+   public final Thread thread;
    private final boolean isDebug;
    private int skyDarken;
    protected int randValue = RandomSource.create().nextInt();
    protected final int addend = 1013904223;
    public float oRainLevel;
    public float rainLevel;
-   public float oThunderLevel;
+   protected float oThunderLevel;
    public float thunderLevel;
    public final RandomSource random = RandomSource.create();
    /** @deprecated */
@@ -101,7 +_,7 @@
    private final RandomSource threadSafeRandom = RandomSource.createThreadSafe();
    private final ResourceKey<DimensionType> dimensionTypeId;
    private final Holder<DimensionType> dimensionTypeRegistration;
-   protected final WritableLevelData levelData;
+   public final WritableLevelData levelData;
    private final Supplier<ProfilerFiller> profiler;
    public final boolean isClientSide;
    private final WorldBorder worldBorder;
@@ -110,8 +_,108 @@
    private final RegistryAccess registryAccess;
    private final DamageSources damageSources;
    private long subTickCount;
-
+   public boolean restoringBlockSnapshots = false;
+   public boolean captureBlockSnapshots = false;
+   public java.util.ArrayList<net.minecraftforge.common.util.BlockSnapshot> capturedBlockSnapshots = new java.util.ArrayList<>();
+   private final java.util.ArrayList<BlockEntity> freshBlockEntities = new java.util.ArrayList<>();
+   private final java.util.ArrayList<BlockEntity> pendingFreshBlockEntities = new java.util.ArrayList<>();
+
+   // CraftBukkit start Added the following
+   private org.bukkit.craftbukkit.v1_20_R2.CraftWorld world;
+   public boolean pvpMode;
+   public boolean keepSpawnInMemory = true;
+   public org.bukkit.generator.ChunkGenerator generator;
+   public org.bukkit.World.Environment environment; //Ketting
+   public org.bukkit.generator.BiomeProvider biomeProvider; //Ketting
+
+   public boolean preventPoiUpdated = false; // CraftBukkit - SPIGOT-5710
+   public boolean captureBlockStates = false;
+   public boolean captureTreeGeneration = false;
+   public java.util.Map<BlockPos, org.bukkit.craftbukkit.v1_20_R2.block.CapturedBlockState> capturedBlockStates = new java.util.LinkedHashMap<>();
+   public java.util.Map<BlockPos, BlockEntity> capturedTileEntities = new java.util.HashMap<>();
+   public List<net.minecraft.world.entity.item.ItemEntity> captureDrops;
+   public final it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap<org.bukkit.entity.SpawnCategory> ticksPerSpawnCategory = new it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap<>();
+   public boolean populating;
+   public final org.spigotmc.SpigotWorldConfig spigotConfig; // Spigot
+
+   public final org.bukkit.craftbukkit.v1_20_R2.SpigotTimings.WorldTimingsHandler timings; // Spigot
+   public static BlockPos lastPhysicsProblem; // Spigot
+   private org.spigotmc.TickLimiter entityLimiter;
+   private org.spigotmc.TickLimiter tileLimiter;
+   private int tileTickPosition;
+
+   public org.bukkit.craftbukkit.v1_20_R2.CraftWorld getWorld() {
+      if (this.world == null) {
+         if (environment == null) {
+            environment = (org.bukkit.World.Environment) org.kettingpowered.ketting.core.Ketting.getInstance().getDimensionRegistry().get().getKey(getTypeKey());
+         }
+         if (generator == null) {
+            generator = this.getCraftServer().getGenerator(((net.minecraft.world.level.storage.ServerLevelData) this.getLevelData()).getLevelName());
+
+            if (this instanceof net.minecraft.server.level.ServerLevel srvLevel && generator != null) {
+               org.bukkit.craftbukkit.v1_20_R2.generator.CraftWorldInfo info = new org.bukkit.craftbukkit.v1_20_R2.generator.CraftWorldInfo((net.minecraft.world.level.storage.ServerLevelData) getLevelData(), srvLevel.convertable, environment, dimensionType());
+
+               if (biomeProvider == null)
+                  biomeProvider = generator.getDefaultBiomeProvider(info);
+
+               net.minecraft.world.level.chunk.ChunkGenerator generator = srvLevel.getChunkSource().getGenerator();
+               if (biomeProvider != null) {
+                  net.minecraft.world.level.biome.BiomeSource source = new org.bukkit.craftbukkit.v1_20_R2.generator.CustomWorldChunkManager(info, biomeProvider, srvLevel.registryAccess().registryOrThrow(Registries.BIOME));
+                  generator.setBiomeSource(source);
+               }
+
+               org.bukkit.craftbukkit.v1_20_R2.generator.CustomChunkGenerator gen = new org.bukkit.craftbukkit.v1_20_R2.generator.CustomChunkGenerator(srvLevel, generator, this.generator);
+               srvLevel.getChunkSource().setChunkGenerator(gen);
+            }
+         }
+         this.world = new org.bukkit.craftbukkit.v1_20_R2.CraftWorld((net.minecraft.server.level.ServerLevel) this, generator, biomeProvider, environment);
+         this.getCraftServer().addWorld(this.getWorld()); // CraftBukkit
+      }
+      return this.world;
+   }
+
+   public org.bukkit.craftbukkit.v1_20_R2.CraftServer getCraftServer() {
+      return (org.bukkit.craftbukkit.v1_20_R2.CraftServer) org.bukkit.Bukkit.getServer();
+   }
+
+   //Ketting start - remove abstract modifier + add default implementation
+   public ResourceKey<net.minecraft.world.level.dimension.LevelStem> getTypeKey() {
+      return Registries.levelToLevelStem(this.dimension);
+   }
+   //Ketting end
+
+   //Ketting start
+   protected Level(WritableLevelData p_270739_, ResourceKey<Level> p_270683_, RegistryAccess p_270200_, Holder<DimensionType> p_270240_, Supplier<ProfilerFiller> p_270692_, boolean p_270904_, boolean p_270470_, long p_270248_, int p_270466_, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider, org.bukkit.World.Environment env) {
+      this(p_270739_, p_270683_, p_270200_, p_270240_, p_270692_, p_270904_, p_270470_, p_270248_, p_270466_);
+
+      this.generator = gen;
+      this.environment = env;
+      this.biomeProvider = biomeProvider;
+   }
+
+   /**
+    * Use bukkit version
+    * @see #Level(WritableLevelData, ResourceKey, RegistryAccess, Holder, Supplier, boolean, boolean, long, int, org.bukkit.generator.ChunkGenerator, org.bukkit.generator.BiomeProvider, org.bukkit.World.Environment)
+    */
+   String levelname = joptsimple.internal.Strings.EMPTY;
+   @Deprecated
+   //Ketting end
    protected Level(WritableLevelData p_270739_, ResourceKey<Level> p_270683_, RegistryAccess p_270200_, Holder<DimensionType> p_270240_, Supplier<ProfilerFiller> p_270692_, boolean p_270904_, boolean p_270470_, long p_270248_, int p_270466_) {
+      super(Level.class);
+
+      if (p_270739_ != null)
+         this.levelname = ((net.minecraft.world.level.storage.ServerLevelData) p_270739_).getLevelName(); //Ketting
+
+      this.spigotConfig = new org.spigotmc.SpigotWorldConfig(levelname); // Spigot
+
+      // CraftBukkit Ticks things
+      for (org.bukkit.entity.SpawnCategory spawnCategory : org.bukkit.entity.SpawnCategory.values()) {
+         if (org.bukkit.craftbukkit.v1_20_R2.util.CraftSpawnCategory.isValidForLimits(spawnCategory)) {
+            this.ticksPerSpawnCategory.put(spawnCategory, (long) this.getCraftServer().getTicksPerSpawns(spawnCategory));
+         }
+      }
+
+      // CraftBukkit end
       this.profiler = p_270692_;
       this.levelData = p_270739_;
       this.dimensionTypeRegistration = p_270240_;
@@ -141,6 +_,45 @@
       this.neighborUpdater = new CollectingNeighborUpdater(this, p_270466_);
       this.registryAccess = p_270200_;
       this.damageSources = new DamageSources(p_270200_);
+      // CraftBukkit start
+      getWorldBorder().world = (net.minecraft.server.level.ServerLevel) this;
+      // From PlayerList.setPlayerFileData
+      getWorldBorder().addListener(new net.minecraft.world.level.border.BorderChangeListener() {
+         @Override
+         public void onBorderSizeSet(WorldBorder worldborder, double d0) {
+            getCraftServer().getHandle().broadcastAll(new net.minecraft.network.protocol.game.ClientboundSetBorderSizePacket(worldborder), worldborder.world);
+         }
+
+         @Override
+         public void onBorderSizeLerping(WorldBorder worldborder, double d0, double d1, long i) {
+            getCraftServer().getHandle().broadcastAll(new net.minecraft.network.protocol.game.ClientboundSetBorderLerpSizePacket(worldborder), worldborder.world);
+         }
+
+         @Override
+         public void onBorderCenterSet(WorldBorder worldborder, double d0, double d1) {
+            getCraftServer().getHandle().broadcastAll(new net.minecraft.network.protocol.game.ClientboundSetBorderCenterPacket(worldborder), worldborder.world);
+         }
+
+         @Override
+         public void onBorderSetWarningTime(WorldBorder worldborder, int i) {
+            getCraftServer().getHandle().broadcastAll(new net.minecraft.network.protocol.game.ClientboundSetBorderWarningDelayPacket(worldborder), worldborder.world);
+         }
+
+         @Override
+         public void onBorderSetWarningBlocks(WorldBorder worldborder, int i) {
+            getCraftServer().getHandle().broadcastAll(new net.minecraft.network.protocol.game.ClientboundSetBorderWarningDistancePacket(worldborder), worldborder.world);
+         }
+
+         @Override
+         public void onBorderSetDamagePerBlock(WorldBorder worldborder, double d0) {}
+
+         @Override
+         public void onBorderSetDamageSafeZOne(WorldBorder worldborder, double d0) {}
+      });
+      // CraftBukkit end
+      timings = new org.bukkit.craftbukkit.v1_20_R2.SpigotTimings.WorldTimingsHandler(levelname); // Spigot - code below can generate new world and access timings
+      this.entityLimiter = new org.spigotmc.TickLimiter(spigotConfig.entityMaxTickTime);
+      this.tileLimiter = new org.spigotmc.TickLimiter(spigotConfig.tileMaxTickTime);
    }
 
    public boolean isClientSide() {
@@ -191,6 +_,17 @@
    }
 
    public boolean setBlock(BlockPos p_46605_, BlockState p_46606_, int p_46607_, int p_46608_) {
+      // CraftBukkit start - tree generation
+      if (this.captureTreeGeneration) {
+         org.bukkit.craftbukkit.v1_20_R2.block.CapturedBlockState blockstate = capturedBlockStates.get(p_46605_);
+         if (blockstate == null) {
+            blockstate = org.bukkit.craftbukkit.v1_20_R2.block.CapturedBlockState.getTreeBlockState(this, p_46605_, p_46607_);
+            this.capturedBlockStates.put(p_46605_.immutable(), blockstate);
+         }
+         blockstate.setData(p_46606_);
+         return true;
+      }
+      // CraftBukkit end
       if (this.isOutsideBuildHeight(p_46605_)) {
          return false;
       } else if (!this.isClientSide && this.isDebug()) {
@@ -198,17 +_,75 @@
       } else {
          LevelChunk levelchunk = this.getChunkAt(p_46605_);
          Block block = p_46606_.getBlock();
-         BlockState blockstate = levelchunk.setBlockState(p_46605_, p_46606_, (p_46607_ & 64) != 0);
+
+         p_46605_ = p_46605_.immutable(); // Forge - prevent mutable BlockPos leaks
+         net.minecraftforge.common.util.BlockSnapshot blockSnapshot = null;
+         if (this.captureBlockSnapshots && !this.isClientSide) {
+             blockSnapshot = net.minecraftforge.common.util.BlockSnapshot.create(this.dimension, this, p_46605_, p_46607_);
+             this.capturedBlockSnapshots.add(blockSnapshot);
+         }
+
+         // CraftBukkit start - capture blockstates
+         boolean captured = false;
+         if (this.captureBlockStates && !this.capturedBlockStates.containsKey(p_46605_)) {
+            org.bukkit.craftbukkit.v1_20_R2.block.CapturedBlockState blockstate = org.bukkit.craftbukkit.v1_20_R2.block.CapturedBlockState.getBlockState(this, p_46605_, p_46607_);
+            this.capturedBlockStates.put(p_46605_.immutable(), blockstate);
+            captured = true;
+         }
+         // CraftBukkit end
+
+         BlockState old = getBlockState(p_46605_);
+         int oldLight = old.getLightEmission(this, p_46605_);
+         int oldOpacity = old.getLightBlock(this, p_46605_);
+
+         BlockState blockstate = levelchunk.setBlockState(p_46605_, p_46606_, (p_46607_ & 64) != 0, (p_46607_ & 1024) == 0); // CraftBukkit custom NO_PLACE flag
          if (blockstate == null) {
+            if (blockSnapshot != null) this.capturedBlockSnapshots.remove(blockSnapshot);
+            // CraftBukkit start - remove blockstate if failed (or the same)
+            if (this.captureBlockStates && captured) {
+               this.capturedBlockStates.remove(p_46605_);
+            }
+            // CraftBukkit end
             return false;
          } else {
             BlockState blockstate1 = this.getBlockState(p_46605_);
+
+            // CraftBukkit start
+            if (blockSnapshot == null || !this.captureBlockStates) { // Don't notify clients or update physics while capturing blockstates
+               // Modularize client and physic updates
+               // Spigot start
+               try {
+                  this.markAndNotifyBlock(p_46605_, levelchunk, blockstate, p_46606_, p_46607_, p_46608_);
+               } catch (StackOverflowError ex) {
+                  lastPhysicsProblem = new BlockPos(p_46605_);
+               }
+               // Spigot end
+            }
+            // CraftBukkit end
+
+            return true;
+         }
+      }
+   }
+
+   //Ketting start - craftbukkit compat
+   public void notifyAndUpdatePhysics(BlockPos blockPosition, org.bukkit.Chunk chunk, BlockState oldBlock, BlockState newBlock, BlockState actualBlock, int i, int j) {
+      markAndNotifyBlock(blockPosition, chunk == null ? null : (LevelChunk) chunk, oldBlock, newBlock, i, j);
+   }
+   //Ketting end
+
+   // Split off from original setBlockState(BlockPos, BlockState, int, int) method in order to directly send client and physic updates
+   public void markAndNotifyBlock(BlockPos p_46605_, @Nullable LevelChunk levelchunk, BlockState blockstate, BlockState p_46606_, int p_46607_, int p_46608_) {
+      Block block = p_46606_.getBlock();
+      BlockState blockstate1 = getBlockState(p_46605_);
+      {
+         {
             if (blockstate1 == p_46606_) {
                if (blockstate != blockstate1) {
                   this.setBlocksDirty(p_46605_, blockstate, blockstate1);
                }
 
-               if ((p_46607_ & 2) != 0 && (!this.isClientSide || (p_46607_ & 4) == 0) && (this.isClientSide || levelchunk.getFullStatus() != null && levelchunk.getFullStatus().isOrAfter(FullChunkStatus.BLOCK_TICKING))) {
+               if ((p_46607_ & 2) != 0 && (!this.isClientSide || (p_46607_ & 4) == 0) && (this.isClientSide || levelchunk == null || (levelchunk.getFullStatus() != null && levelchunk.getFullStatus().isOrAfter(FullChunkStatus.BLOCK_TICKING)))) { // allow chunk to be null here as chunk.isReady() is false when we send our notification during block placement
                   this.sendBlockUpdated(p_46605_, blockstate, p_46606_, p_46607_);
                }
 
@@ -221,15 +_,30 @@
 
                if ((p_46607_ & 16) == 0 && p_46608_ > 0) {
                   int i = p_46607_ & -34;
+
                   blockstate.updateIndirectNeighbourShapes(this, p_46605_, i, p_46608_ - 1);
+                  // CraftBukkit start
+                  org.bukkit.craftbukkit.v1_20_R2.CraftWorld world = this.getWorld();
+                  if (world != null) {
+                     org.bukkit.event.block.BlockPhysicsEvent event = new org.bukkit.event.block.BlockPhysicsEvent(world.getBlockAt(p_46605_.getX(), p_46605_.getY(), p_46605_.getZ()), org.bukkit.craftbukkit.v1_20_R2.block.data.CraftBlockData.fromData(p_46606_));
+                     this.getCraftServer().getPluginManager().callEvent(event);
+
+                     if (event.isCancelled()) {
+                        return;
+                     }
+                  }
+                  // CraftBukkit end
                   p_46606_.updateNeighbourShapes(this, p_46605_, i, p_46608_ - 1);
                   p_46606_.updateIndirectNeighbourShapes(this, p_46605_, i, p_46608_ - 1);
                }
 
-               this.onBlockStateChange(p_46605_, blockstate, blockstate1);
+               // CraftBukkit start - SPIGOT-5710
+               if (!preventPoiUpdated) {
+                  this.onBlockStateChange(p_46605_, blockstate, blockstate1);
+                  p_46606_.onBlockStateChange(this, p_46605_, blockstate);
+               }
+               // CraftBukkit end
             }
-
-            return true;
          }
       }
    }
@@ -279,6 +_,7 @@
    }
 
    public void updateNeighborsAt(BlockPos p_46673_, Block p_46674_) {
+      net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, p_46673_, this.getBlockState(p_46673_), java.util.EnumSet.allOf(Direction.class), false).isCanceled();
    }
 
    public void updateNeighborsAtExceptFromFacing(BlockPos p_46591_, Block p_46592_, Direction p_46593_) {
@@ -314,6 +_,14 @@
    }
 
    public BlockState getBlockState(BlockPos p_46732_) {
+      // CraftBukkit start - tree generation
+      if (captureTreeGeneration) {
+         org.bukkit.craftbukkit.v1_20_R2.block.CapturedBlockState previous = capturedBlockStates.get(p_46732_);
+         if (previous != null) {
+            return previous.getHandle();
+         }
+      }
+      // CraftBukkit end
       if (this.isOutsideBuildHeight(p_46732_)) {
          return Blocks.VOID_AIR.defaultBlockState();
       } else {
@@ -398,38 +_,86 @@
       (this.tickingBlockEntities ? this.pendingBlockEntityTickers : this.blockEntityTickers).add(p_151526_);
    }
 
+   public void addFreshBlockEntities(java.util.Collection<BlockEntity> beList) {
+      if (this.tickingBlockEntities) {
+         this.pendingFreshBlockEntities.addAll(beList);
+      } else {
+         this.freshBlockEntities.addAll(beList);
+      }
+   }
+
    protected void tickBlockEntities() {
       ProfilerFiller profilerfiller = this.getProfiler();
       profilerfiller.push("blockEntities");
+      if (!this.pendingFreshBlockEntities.isEmpty()) {
+         this.freshBlockEntities.addAll(this.pendingFreshBlockEntities);
+         this.pendingFreshBlockEntities.clear();
+      }
       this.tickingBlockEntities = true;
+      if (!this.freshBlockEntities.isEmpty()) {
+         this.freshBlockEntities.forEach(BlockEntity::onLoad);
+         this.freshBlockEntities.clear();
+      }
+      timings.tileEntityPending.startTiming(); // Spigot
       if (!this.pendingBlockEntityTickers.isEmpty()) {
          this.blockEntityTickers.addAll(this.pendingBlockEntityTickers);
          this.pendingBlockEntityTickers.clear();
       }
-
-      Iterator<TickingBlockEntity> iterator = this.blockEntityTickers.iterator();
-
-      while(iterator.hasNext()) {
-         TickingBlockEntity tickingblockentity = iterator.next();
+      timings.tileEntityPending.stopTiming(); // Spigot
+
+      timings.tileEntityTick.startTiming(); // Spigot
+
+      // Spigot start
+      // Iterator<TickingBlockEntity> iterator = this.blockEntityTickers.iterator();
+
+      int tilesThisCycle = 0;
+      for (tileLimiter.initTick();
+           tilesThisCycle < blockEntityTickers.size() && (tilesThisCycle % 10 != 0 || tileLimiter.shouldContinue());
+           tileTickPosition++, tilesThisCycle++) {
+         tileTickPosition = (tileTickPosition < blockEntityTickers.size()) ? tileTickPosition : 0;
+         TickingBlockEntity tickingblockentity = this.blockEntityTickers.get(tileTickPosition);
+         // Spigot start
+         if (tickingblockentity == null) {
+            getCraftServer().getLogger().severe("Spigot has detected a null entity and has removed it, preventing a crash");
+            tilesThisCycle--;
+            this.blockEntityTickers.remove(tileTickPosition--);
+            continue;
+         }
+         // Spigot end
+
          if (tickingblockentity.isRemoved()) {
-            iterator.remove();
+            // Spigot start
+            tilesThisCycle--;
+            this.blockEntityTickers.remove(tileTickPosition--);
+            // Spigot end
          } else if (this.shouldTickBlocksAt(tickingblockentity.getPos())) {
             tickingblockentity.tick();
          }
       }
 
+      timings.tileEntityTick.stopTiming(); // Spigot
       this.tickingBlockEntities = false;
       profilerfiller.pop();
+      spigotConfig.currentPrimedTnt = 0; // Spigot
    }
 
    public <T extends Entity> void guardEntityTick(Consumer<T> p_46654_, T p_46655_) {
       try {
+         net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackStart(p_46655_);
+         org.bukkit.craftbukkit.v1_20_R2.SpigotTimings.tickEntityTimer.startTiming(); // Spigot
          p_46654_.accept(p_46655_);
+         org.bukkit.craftbukkit.v1_20_R2.SpigotTimings.tickEntityTimer.stopTiming(); // Spigot
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking entity");
          CrashReportCategory crashreportcategory = crashreport.addCategory("Entity being ticked");
          p_46655_.fillCrashReportCategory(crashreportcategory);
+         if (net.minecraftforge.common.ForgeConfig.SERVER.removeErroringEntities.get()) {
+            com.mojang.logging.LogUtils.getLogger().error("{}", crashreport.getFriendlyReport());
+            p_46655_.discard();
+         } else
          throw new ReportedException(crashreport);
+      } finally {
+         net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackEnd(p_46655_);
       }
    }
 
@@ -471,7 +_,7 @@
             explosion$blockinteraction1 = this.getDestroyType(GameRules.RULE_BLOCK_EXPLOSION_DROP_DECAY);
             break;
          case MOB:
-            explosion$blockinteraction1 = this.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) ? this.getDestroyType(GameRules.RULE_MOB_EXPLOSION_DROP_DECAY) : Explosion.BlockInteraction.KEEP;
+            explosion$blockinteraction1 = net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this, p_256233_) ? this.getDestroyType(GameRules.RULE_MOB_EXPLOSION_DROP_DECAY) : Explosion.BlockInteraction.KEEP;
             break;
          case TNT:
             explosion$blockinteraction1 = this.getDestroyType(GameRules.RULE_TNT_EXPLOSION_DROP_DECAY);
@@ -482,6 +_,7 @@
 
       Explosion.BlockInteraction explosion$blockinteraction = explosion$blockinteraction1;
       Explosion explosion = new Explosion(this, p_256233_, p_255861_, p_255867_, p_256447_, p_255732_, p_255717_, p_256013_, p_256228_, explosion$blockinteraction);
+      if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
       explosion.explode();
       explosion.finalizeExplosion(p_256377_);
       return explosion;
@@ -494,7 +_,18 @@
    public abstract String gatherChunkSourceStats();
 
    @Nullable
+   @Override
    public BlockEntity getBlockEntity(BlockPos p_46716_) {
+      // CraftBukkit start
+      return this.getBlockEntity(p_46716_, true);
+   }
+
+   @Nullable
+   public BlockEntity getBlockEntity(BlockPos p_46716_, boolean validate) {
+      if (capturedTileEntities.containsKey(p_46716_)) {
+         return capturedTileEntities.get(p_46716_);
+      }
+      // CraftBukkit end
       if (this.isOutsideBuildHeight(p_46716_)) {
          return null;
       } else {
@@ -505,6 +_,12 @@
    public void setBlockEntity(BlockEntity p_151524_) {
       BlockPos blockpos = p_151524_.getBlockPos();
       if (!this.isOutsideBuildHeight(blockpos)) {
+         // CraftBukkit start
+         if (captureBlockStates) {
+            capturedTileEntities.put(blockpos.immutable(), p_151524_);
+            return;
+         }
+         // CraftBukkit end
          this.getChunkAt(blockpos).addAndRegisterBlockEntity(p_151524_);
       }
    }
@@ -513,6 +_,7 @@
       if (!this.isOutsideBuildHeight(p_46748_)) {
          this.getChunkAt(p_46748_).removeBlockEntity(p_46748_);
       }
+      this.updateNeighbourForOutputSignal(p_46748_, getBlockState(p_46748_).getBlock()); //Notify neighbors of changes
    }
 
    public boolean isLoaded(BlockPos p_46750_) {
@@ -583,6 +_,7 @@
             list.add(p_151522_);
          }
 
+         if (false)
          if (p_151522_ instanceof EnderDragon) {
             for(EnderDragonPart enderdragonpart : ((EnderDragon)p_151522_).getSubEntities()) {
                if (p_151522_ != p_46536_ && p_46538_.test(enderdragonpart)) {
@@ -592,6 +_,11 @@
          }
 
       });
+      for (net.minecraftforge.entity.PartEntity<?> p : this.getPartEntities()) {
+         if (p != p_46536_ && p.getBoundingBox().intersects(p_46537_) && p_46538_.test(p)) {
+            list.add(p);
+         }
+      }
       return list;
    }
 
@@ -615,6 +_,8 @@
             }
          }
 
+
+         if (false)
          if (p_261454_ instanceof EnderDragon enderdragon) {
             for(EnderDragonPart enderdragonpart : enderdragon.getSubEntities()) {
                T t = p_261885_.tryCast(enderdragonpart);
@@ -629,6 +_,15 @@
 
          return AbortableIterationConsumer.Continuation.CONTINUE;
       });
+      for (net.minecraftforge.entity.PartEntity<?> p : this.getPartEntities()) {
+         T t = p_261885_.tryCast(p);
+         if (t != null && t.getBoundingBox().intersects(p_262086_) && p_261688_.test(t)) {
+            p_262071_.add(t);
+            if (p_262071_.size() >= p_261858_) {
+               break;
+            }
+         }
+      }
    }
 
    @Nullable
@@ -760,16 +_,15 @@
    public abstract Scoreboard getScoreboard();
 
    public void updateNeighbourForOutputSignal(BlockPos p_46718_, Block p_46719_) {
-      for(Direction direction : Direction.Plane.HORIZONTAL) {
+      for(Direction direction : Direction.values()) {
          BlockPos blockpos = p_46718_.relative(direction);
          if (this.hasChunkAt(blockpos)) {
             BlockState blockstate = this.getBlockState(blockpos);
-            if (blockstate.is(Blocks.COMPARATOR)) {
-               this.neighborChanged(blockstate, blockpos, p_46719_, p_46718_, false);
-            } else if (blockstate.isRedstoneConductor(this, blockpos)) {
+            blockstate.onNeighborChange(this, blockpos, p_46718_);
+            if (blockstate.isRedstoneConductor(this, blockpos)) {
                blockpos = blockpos.relative(direction);
                blockstate = this.getBlockState(blockpos);
-               if (blockstate.is(Blocks.COMPARATOR)) {
+               if (blockstate.getWeakChanges(this, blockpos)) {
                   this.neighborChanged(blockstate, blockpos, p_46719_, p_46718_, false);
                }
             }
@@ -856,11 +_,23 @@
       return this.biomeManager;
    }
 
+   private double maxEntityRadius = 2.0D;
+   @Override
+   public double getMaxEntityRadius() {
+      return maxEntityRadius;
+   }
+   @Override
+   public double increaseMaxEntityRadius(double value) {
+      if (value > maxEntityRadius)
+         maxEntityRadius = value;
+      return maxEntityRadius;
+   }
+
    public final boolean isDebug() {
       return this.isDebug;
    }
 
-   protected abstract LevelEntityGetter<Entity> getEntities();
+   public abstract LevelEntityGetter<Entity> getEntities();
 
    public long nextSubTickCount() {
       return (long)(this.subTickCount++);
