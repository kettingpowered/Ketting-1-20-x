--- a/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -266,6 +_,8 @@
          WorldDimensions.Complete worlddimensions$complete = worldgensettings.dimensions().bake(p_249363_);
          Lifecycle lifecycle = worlddimensions$complete.lifecycle().add(p_251214_);
          PrimaryLevelData primaryleveldata = PrimaryLevelData.parse(dynamic, p_265021_, i, compoundtag2, levelsettings, levelversion, worlddimensions$complete.specialWorldProperty(), worldgensettings.options(), lifecycle);
+         primaryleveldata.pdc = compoundtag1.get("BukkitValues"); // CraftBukkit - Add PDC to world
+
          return Pair.of(primaryleveldata, worlddimensions$complete);
       };
    }
@@ -356,24 +_,46 @@
    }
 
    public LevelStorageSource.LevelStorageAccess validateAndCreateAccess(String p_289980_) throws IOException, ContentValidationException {
+      return this.validateAndCreateAccess(p_289980_, null);
+   }
+
+   public LevelStorageSource.LevelStorageAccess validateAndCreateAccess(String p_289980_, ResourceKey<LevelStem> dimensionType) throws IOException, ContentValidationException { // CraftBukkit
       Path path = this.getLevelPath(p_289980_);
       List<ForbiddenSymlinkInfo> list = this.worldDirValidator.validateDirectory(path, true);
       if (!list.isEmpty()) {
          throw new ContentValidationException(path, list);
       } else {
-         return new LevelStorageSource.LevelStorageAccess(p_289980_, path);
+         return new LevelStorageSource.LevelStorageAccess(p_289980_, path, dimensionType); // CraftBukkit
       }
    }
 
    public LevelStorageSource.LevelStorageAccess createAccess(String p_78261_) throws IOException {
+      return this.createAccess(p_78261_, null);
+   }
+
+   public LevelStorageSource.LevelStorageAccess createAccess(String p_78261_, ResourceKey<LevelStem> dimensionType) throws IOException { // CraftBukkit
       Path path = this.getLevelPath(p_78261_);
-      return new LevelStorageSource.LevelStorageAccess(p_78261_, path);
+      return new LevelStorageSource.LevelStorageAccess(p_78261_, path, dimensionType); // CraftBukkit
    }
 
    public DirectoryValidator getWorldDirValidator() {
       return this.worldDirValidator;
    }
 
+   // CraftBukkit start
+   public static Path getStorageFolder(Path path, ResourceKey<LevelStem> dimensionType) {
+      if (dimensionType == LevelStem.OVERWORLD) {
+         return path;
+      } else if (dimensionType == LevelStem.NETHER) {
+         return path.resolve("DIM-1");
+      } else if (dimensionType == LevelStem.END) {
+         return path.resolve("DIM1");
+      } else {
+         return path.resolve("dimensions").resolve(dimensionType.location().getNamespace()).resolve(dimensionType.location().getPath());
+      }
+   }
+   // CraftBukkit end
+
    public static record LevelCandidates(List<LevelStorageSource.LevelDirectory> levels) implements Iterable<LevelStorageSource.LevelDirectory> {
       public boolean isEmpty() {
          return this.levels.isEmpty();
@@ -419,8 +_,18 @@
       public final LevelStorageSource.LevelDirectory levelDirectory;
       private final String levelId;
       private final Map<LevelResource, Path> resources = Maps.newHashMap();
-
-      LevelStorageAccess(String p_289967_, Path p_289988_) throws IOException {
+      // CraftBukkit start
+      public ResourceKey<LevelStem> dimensionType;
+
+      //Ketting start
+      public void setDimensionType(ResourceKey<LevelStem> dimensionType) {
+          this.dimensionType = dimensionType;
+      }
+      //Ketting end
+
+      LevelStorageAccess(String p_289967_, Path p_289988_, ResourceKey<LevelStem> dimensionType) throws IOException {
+         this.dimensionType = dimensionType;
+         // CraftBukkit end
          this.levelId = p_289967_;
          this.levelDirectory = new LevelStorageSource.LevelDirectory(p_289988_);
          this.lock = DirectoryLock.create(p_289988_);
@@ -439,7 +_,7 @@
       }
 
       public Path getDimensionPath(ResourceKey<Level> p_197395_) {
-         return DimensionType.getStorageFolder(p_197395_, this.levelDirectory.path());
+         return getStorageFolder(this.levelDirectory.path(), this.dimensionType); // CraftBukkit
       }
 
       private void checkLock() {
@@ -465,6 +_,19 @@
          return LevelStorageSource.this.readLevelData(this.levelDirectory, LevelStorageSource.getLevelData(p_248747_, p_251873_, p_249187_, p_249736_));
       }
 
+      public void readAdditionalLevelSaveData() {
+         checkLock();
+         LevelStorageSource.this.readLevelData(this.levelDirectory, (path, dataFixer) -> {
+            try {
+               CompoundTag compoundTag = NbtIo.readCompressed(path.toFile());
+               net.minecraftforge.common.ForgeHooks.readAdditionalLevelSaveData(compoundTag, this.levelDirectory);
+            } catch (Exception e) {
+                LOGGER.error("Exception reading {}", path, e);
+            }
+            return ""; // Return non-null to prevent level.dat-old inject
+         });
+      }
+
       @Nullable
       public WorldDataConfiguration getDataConfiguration() {
          this.checkLock();
@@ -481,6 +_,8 @@
          CompoundTag compoundtag1 = new CompoundTag();
          compoundtag1.put("Data", compoundtag);
 
+         net.minecraftforge.common.ForgeHooks.writeAdditionalLevelSaveData(p_78292_, compoundtag1);
+
          try {
             File file2 = File.createTempFile("level", ".dat", file1);
             NbtIo.writeCompressed(compoundtag1, file2);
@@ -495,6 +_,10 @@
 
       public Optional<Path> getIconFile() {
          return !this.lock.isValid() ? Optional.empty() : Optional.of(this.levelDirectory.iconFile());
+      }
+
+      public Path getWorldDir() {
+         return baseDir;
       }
 
       public void deleteLevel() throws IOException {
