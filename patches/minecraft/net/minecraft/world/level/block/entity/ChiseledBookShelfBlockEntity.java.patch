--- a/net/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity.java
@@ -1,6 +_,7 @@
 package net.minecraft.world.level.block.entity;
 
 import com.mojang.logging.LogUtils;
+
 import java.util.Objects;
 import java.util.function.Predicate;
 import net.minecraft.core.BlockPos;
@@ -22,6 +_,41 @@
    private static final Logger LOGGER = LogUtils.getLogger();
    private final NonNullList<ItemStack> items = NonNullList.withSize(6, ItemStack.EMPTY);
    public int lastInteractedSlot = -1;
+   // CraftBukkit start - add fields and methods
+   public java.util.List<org.bukkit.entity.HumanEntity> transaction = new java.util.ArrayList<>();
+   private int maxStack = 1;
+
+   @Override
+   public java.util.List<ItemStack> getContents() {
+      return this.items;
+   }
+
+   @Override
+   public void onOpen(org.bukkit.craftbukkit.v1_20_R2.entity.CraftHumanEntity who) {
+      transaction.add(who);
+   }
+
+   @Override
+   public void onClose(org.bukkit.craftbukkit.v1_20_R2.entity.CraftHumanEntity who) {
+      transaction.remove(who);
+   }
+
+   @Override
+   public java.util.List<org.bukkit.entity.HumanEntity> getViewers() {
+      return transaction;
+   }
+
+   @Override
+   public void setMaxStackSize(int size) {
+      maxStack = size;
+   }
+
+   @Override
+   public org.bukkit.Location getLocation() {
+      if (level == null) return null;
+      return new org.bukkit.Location(level.getWorld(), worldPosition.getX(), worldPosition.getY(), worldPosition.getZ());
+   }
+   // CraftBukkit end
 
    public ChiseledBookShelfBlockEntity(BlockPos p_249541_, BlockState p_251752_) {
       super(BlockEntityType.CHISELED_BOOKSHELF, p_249541_, p_251752_);
@@ -46,6 +_,7 @@
    }
 
    public void load(CompoundTag p_249911_) {
+      super.load(p_249911_); // CraftBukkit - SPIGOT-7393: Load super Bukkit data
       this.items.clear();
       ContainerHelper.loadAllItems(p_249911_, this.items);
       this.lastInteractedSlot = p_249911_.getInt("last_interacted_slot");
@@ -80,7 +_,7 @@
       ItemStack itemstack = Objects.requireNonNullElse(this.items.get(p_255828_), ItemStack.EMPTY);
       this.items.set(p_255828_, ItemStack.EMPTY);
       if (!itemstack.isEmpty()) {
-         this.updateState(p_255828_);
+         if (level != null) this.updateState(p_255828_); // CraftBukkit - SPIGOT-7381: check for null world
       }
 
       return itemstack;
@@ -93,7 +_,7 @@
    public void setItem(int p_256610_, ItemStack p_255789_) {
       if (p_255789_.is(ItemTags.BOOKSHELF_BOOKS)) {
          this.items.set(p_256610_, p_255789_);
-         this.updateState(p_256610_);
+         if (level != null) this.updateState(p_256610_); // CraftBukkit - SPIGOT-7381: check for null world
       } else if (p_255789_.isEmpty()) {
          this.removeItem(p_256610_, 1);
       }
@@ -111,7 +_,7 @@
    }
 
    public int getMaxStackSize() {
-      return 1;
+      return maxStack; // CraftBukkit
    }
 
    public boolean stillValid(Player p_256481_) {
@@ -124,5 +_,29 @@
 
    public int getLastInteractedSlot() {
       return this.lastInteractedSlot;
+   }
+
+   private net.minecraftforge.common.util.LazyOptional<?> itemHandler = net.minecraftforge.common.util.LazyOptional.of(this::createUnSidedHandler);
+   protected net.minecraftforge.items.IItemHandler createUnSidedHandler() {
+      return new net.minecraftforge.items.wrapper.InvWrapper(this);
+   }
+
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> cap, @org.jetbrains.annotations.Nullable net.minecraft.core.Direction side) {
+      if (!this.remove && cap == net.minecraftforge.common.capabilities.ForgeCapabilities.ITEM_HANDLER)
+         return itemHandler.cast();
+      return super.getCapability(cap, side);
+   }
+
+   @Override
+   public void invalidateCaps() {
+      super.invalidateCaps();
+      itemHandler.invalidate();
+   }
+
+   @Override
+   public void reviveCaps() {
+      super.reviveCaps();
+      itemHandler = net.minecraftforge.common.util.LazyOptional.of(this::createUnSidedHandler);
    }
 }
