--- a/net/minecraft/world/level/block/DropperBlock.java
+++ b/net/minecraft/world/level/block/DropperBlock.java
@@ -16,11 +_,11 @@
 import net.minecraft.world.level.block.entity.HopperBlockEntity;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import org.slf4j.Logger;
 
 public class DropperBlock extends DispenserBlock {
    private static final Logger LOGGER = LogUtils.getLogger();
-   private static final DispenseItemBehavior DISPENSE_BEHAVIOUR = new DefaultDispenseItemBehavior();
+   private static final DispenseItemBehavior DISPENSE_BEHAVIOUR = new DefaultDispenseItemBehavior(true); // CraftBukkit
 
    public DropperBlock(BlockBehaviour.Properties p_52942_) {
       super(p_52942_);
@@ -34,8 +_,8 @@
       return new DropperBlockEntity(p_153179_, p_153180_);
    }
 
-   protected void dispenseFrom(ServerLevel p_52944_, BlockState p_301813_, BlockPos p_52945_) {
-      DispenserBlockEntity dispenserblockentity = p_52944_.getBlockEntity(p_52945_, BlockEntityType.DROPPER).orElse((DropperBlockEntity)null);
+   public void dispenseFrom(ServerLevel p_52944_, BlockState p_301813_, BlockPos p_52945_) {
+      DispenserBlockEntity dispenserblockentity = p_52944_.getBlockEntity(p_52945_, BlockEntityType.DROPPER).orElse(null);
       if (dispenserblockentity == null) {
          LOGGER.warn("Ignoring dispensing attempt for Dropper without matching block entity at {}", (Object)p_52945_);
       } else {
@@ -45,15 +_,32 @@
             p_52944_.levelEvent(1001, p_52945_, 0);
          } else {
             ItemStack itemstack = dispenserblockentity.getItem(i);
-            if (!itemstack.isEmpty()) {
+         if (!itemstack.isEmpty() && net.minecraftforge.items.VanillaInventoryCodeHooks.dropperInsertHook(p_52944_, p_52945_, dispenserblockentity, i, itemstack)) {
                Direction direction = p_52944_.getBlockState(p_52945_).getValue(FACING);
                Container container = HopperBlockEntity.getContainerAt(p_52944_, p_52945_.relative(direction));
                ItemStack itemstack1;
                if (container == null) {
                   itemstack1 = DISPENSE_BEHAVIOUR.dispense(blocksource, itemstack);
                } else {
-                  itemstack1 = HopperBlockEntity.addItem(dispenserblockentity, container, itemstack.copy().split(1), direction.getOpposite());
-                  if (itemstack1.isEmpty()) {
+                  // CraftBukkit start - Fire event when pushing items into other inventories
+                  org.bukkit.craftbukkit.v1_20_R2.inventory.CraftItemStack oitemstack = org.bukkit.craftbukkit.v1_20_R2.inventory.CraftItemStack.asCraftMirror(itemstack.copy().split(1));
+
+                  org.bukkit.inventory.Inventory destinationInventory;
+                  // Have to special case large chests as they work oddly
+                  if (container instanceof ChestBlock.DoubleInventory) {
+                     destinationInventory = new org.bukkit.craftbukkit.v1_20_R2.inventory.CraftInventoryDoubleChest((ChestBlock.DoubleInventory) container);
+                  } else {
+                     destinationInventory = container.getOwner().getInventory();
+                  }
+
+                  org.bukkit.event.inventory.InventoryMoveItemEvent event = new org.bukkit.event.inventory.InventoryMoveItemEvent(dispenserblockentity.getOwner().getInventory(), oitemstack.clone(), destinationInventory, true);
+                  p_52944_.getCraftServer().getPluginManager().callEvent(event);
+                  if (event.isCancelled()) {
+                     return;
+                  }
+                  itemstack1 = HopperBlockEntity.addItem(dispenserblockentity, container, org.bukkit.craftbukkit.v1_20_R2.inventory.CraftItemStack.asNMSCopy(event.getItem()), direction.getOpposite());
+                  if (event.getItem().equals(oitemstack) && itemstack1.isEmpty()) {
+                     // CraftBukkit end
                      itemstack1 = itemstack.copy();
                      itemstack1.shrink(1);
                   } else {
