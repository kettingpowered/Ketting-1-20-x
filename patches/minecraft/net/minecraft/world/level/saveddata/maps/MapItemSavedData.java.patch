--- a/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ b/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -36,21 +_,28 @@
    private static final int HALF_MAP_SIZE = 64;
    public static final int MAX_SCALE = 4;
    public static final int TRACKED_DECORATION_LIMIT = 256;
-   public final int centerX;
-   public final int centerZ;
-   public final ResourceKey<Level> dimension;
-   private final boolean trackingPosition;
-   private final boolean unlimitedTracking;
-   public final byte scale;
+   public int centerX;
+   public int centerZ;
+   public ResourceKey<Level> dimension;
+   public boolean trackingPosition;
+   public boolean unlimitedTracking;
+   public byte scale;
    public byte[] colors = new byte[16384];
-   public final boolean locked;
-   private final List<MapItemSavedData.HoldingPlayer> carriedBy = Lists.newArrayList();
-   private final Map<Player, MapItemSavedData.HoldingPlayer> carriedByPlayers = Maps.newHashMap();
+   public boolean locked;
+   public final List<MapItemSavedData.HoldingPlayer> carriedBy = Lists.newArrayList();
+   public final Map<Player, MapItemSavedData.HoldingPlayer> carriedByPlayers = Maps.newHashMap();
    private final Map<String, MapBanner> bannerMarkers = Maps.newHashMap();
-   final Map<String, MapDecoration> decorations = Maps.newLinkedHashMap();
+   public final Map<String, MapDecoration> decorations = Maps.newLinkedHashMap();
    private final Map<String, MapFrame> frameMarkers = Maps.newHashMap();
    private int trackedDecorationCount;
 
+   // CraftBukkit start
+   public final org.bukkit.craftbukkit.v1_20_R2.map.CraftMapView mapView;
+   private org.bukkit.craftbukkit.v1_20_R2.CraftServer server;
+   public java.util.UUID uniqueId = null;
+   public String id;
+   // CraftBukkit end
+
    public static SavedData.Factory<MapItemSavedData> factory() {
       return new SavedData.Factory<>(() -> {
          throw new IllegalStateException("Should never create an empty map saved data");
@@ -66,6 +_,10 @@
       this.unlimitedTracking = p_164772_;
       this.locked = p_164773_;
       this.setDirty();
+      // CraftBukkit start
+      mapView = new org.bukkit.craftbukkit.v1_20_R2.map.CraftMapView(this);
+      server = (org.bukkit.craftbukkit.v1_20_R2.CraftServer) org.bukkit.Bukkit.getServer();
+      // CraftBukkit end
    }
 
    public static MapItemSavedData createFresh(double p_164781_, double p_164782_, byte p_164783_, boolean p_164784_, boolean p_164785_, ResourceKey<Level> p_164786_) {
@@ -82,8 +_,26 @@
    }
 
    public static MapItemSavedData load(CompoundTag p_164808_) {
-      ResourceKey<Level> resourcekey = DimensionType.parseLegacy(new Dynamic<>(NbtOps.INSTANCE, p_164808_.get("dimension"))).resultOrPartial(LOGGER::error).orElseThrow(() -> {
-         return new IllegalArgumentException("Invalid map dimension: " + p_164808_.get("dimension"));
+      // CraftBukkit start
+      ResourceKey<Level> resourcekey = DimensionType.parseLegacy(new Dynamic<>(NbtOps.INSTANCE, p_164808_.get("dimension"))).resultOrPartial(LOGGER::error).orElseGet(() -> {
+         long least = p_164808_.getLong("UUIDLeast");
+         long most = p_164808_.getLong("UUIDMost");
+
+         if (least != 0L && most != 0L) {
+            java.util.UUID uniqueId = new java.util.UUID(most, least);
+
+            org.bukkit.craftbukkit.v1_20_R2.CraftWorld world = (org.bukkit.craftbukkit.v1_20_R2.CraftWorld) org.bukkit.Bukkit.getWorld(uniqueId);
+            // Check if the stored world details are correct.
+            if (world == null) {
+                    /* All Maps which do not have their valid world loaded are set to a dimension which hopefully won't be reached.
+                       This is to prevent them being corrupted with the wrong map data. */
+               // PAIL: Use Vanilla exception handling for now
+            } else {
+               return world.getHandle().dimension();
+            }
+         }
+         throw new IllegalArgumentException("Invalid map dimension: " + p_164808_.get("dimension"));
+         // CraftBukkit end
       });
       int i = p_164808_.getInt("xCenter");
       int j = p_164808_.getInt("zCenter");
@@ -120,6 +_,25 @@
       ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, this.dimension.location()).resultOrPartial(LOGGER::error).ifPresent((p_77954_) -> {
          p_77956_.put("dimension", p_77954_);
       });
+      // CraftBukkit start
+      if (true) {
+         if (this.uniqueId == null) {
+            for (org.bukkit.World world : server.getWorlds()) {
+               org.bukkit.craftbukkit.v1_20_R2.CraftWorld cWorld = (org.bukkit.craftbukkit.v1_20_R2.CraftWorld) world;
+               if (cWorld.getHandle().dimension() == this.dimension) {
+                  this.uniqueId = cWorld.getUID();
+                  break;
+               }
+            }
+         }
+            /* Perform a second check to see if a matching world was found, this is a necessary
+               change incase Maps are forcefully unlinked from a World and lack a UID.*/
+         if (this.uniqueId != null) {
+            p_77956_.putLong("UUIDLeast", this.uniqueId.getLeastSignificantBits());
+            p_77956_.putLong("UUIDMost", this.uniqueId.getMostSignificantBits());
+         }
+      }
+      // CraftBukkit end
       p_77956_.putInt("xCenter", this.centerX);
       p_77956_.putInt("zCenter", this.centerZ);
       p_77956_.putByte("scale", this.scale);
@@ -315,7 +_,7 @@
       return mapitemsaveddata$holdingplayer == null ? null : mapitemsaveddata$holdingplayer.nextUpdatePacket(p_164797_);
    }
 
-   private void setColorsDirty(int p_164790_, int p_164791_) {
+   public void setColorsDirty(int p_164790_, int p_164791_) {
       this.setDirty();
 
       for(MapItemSavedData.HoldingPlayer mapitemsaveddata$holdingplayer : this.carriedBy) {
@@ -455,7 +_,7 @@
          this.player = p_77970_;
       }
 
-      private MapItemSavedData.MapPatch createPatch() {
+      private MapItemSavedData.MapPatch createPatch(byte[] buffer) { // CraftBukkit
          int i = this.minDirtyX;
          int j = this.minDirtyY;
          int k = this.maxDirtyX + 1 - this.minDirtyX;
@@ -464,7 +_,7 @@
 
          for(int i1 = 0; i1 < k; ++i1) {
             for(int j1 = 0; j1 < l; ++j1) {
-               abyte[i1 + j1 * k] = MapItemSavedData.this.colors[i + i1 + (j + j1) * 128];
+               abyte[i1 + j1 * k] = buffer[i + i1 + (j + j1) * 128]; // CraftBukkit
             }
          }
 
@@ -474,17 +_,28 @@
       @Nullable
       Packet<?> nextUpdatePacket(int p_164816_) {
          MapItemSavedData.MapPatch mapitemsaveddata$mappatch;
+         org.bukkit.craftbukkit.v1_20_R2.map.RenderData render = MapItemSavedData.this.mapView.render((org.bukkit.craftbukkit.v1_20_R2.entity.CraftPlayer) this.player.getBukkitEntity()); // CraftBukkit
+
          if (this.dirtyData) {
             this.dirtyData = false;
-            mapitemsaveddata$mappatch = this.createPatch();
+            mapitemsaveddata$mappatch = this.createPatch(render.buffer); // CraftBukkit
          } else {
             mapitemsaveddata$mappatch = null;
          }
 
          Collection<MapDecoration> collection;
-         if (this.dirtyDecorations && this.tick++ % 5 == 0) {
+         if (true || this.dirtyDecorations && this.tick++ % 5 == 0) { // CraftBukkit - custom maps don't update this yet
             this.dirtyDecorations = false;
-            collection = MapItemSavedData.this.decorations.values();
+            // CraftBukkit start
+            java.util.Collection<MapDecoration> icons = new java.util.ArrayList<>();
+
+            for (org.bukkit.map.MapCursor cursor : render.cursors) {
+               if (cursor.isVisible()) {
+                  icons.add(new MapDecoration(MapDecoration.Type.byIcon(cursor.getRawType()), cursor.getX(), cursor.getY(), cursor.getDirection(), org.bukkit.craftbukkit.v1_20_R2.util.CraftChatMessage.fromStringOrNull(cursor.getCaption())));
+               }
+            }
+            collection = icons;
+            // CraftBukkit end
          } else {
             collection = null;
          }
