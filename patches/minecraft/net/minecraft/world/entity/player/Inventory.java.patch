--- a/net/minecraft/world/entity/player/Inventory.java
+++ b/net/minecraft/world/entity/player/Inventory.java
@@ -1,6 +_,7 @@
 package net.minecraft.world.entity.player;
 
 import com.google.common.collect.ImmutableList;
+
 import java.util.List;
 import java.util.function.Predicate;
 import net.minecraft.CrashReport;
@@ -23,6 +_,6 @@
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.state.BlockState;
 
 public class Inventory implements Container, Nameable {
    public static final int POP_TIME_DURATION = 5;
@@ -40,6 +_,54 @@
    public final Player player;
    private int timesChanged;
 
+   // CraftBukkit start - add fields and methods
+   public List<org.bukkit.entity.HumanEntity> transaction = new java.util.ArrayList<org.bukkit.entity.HumanEntity>();
+   private int maxStack = MAX_STACK;
+
+   public List<ItemStack> getContents() {
+      List<ItemStack> combined = new java.util.ArrayList<ItemStack>(items.size() + armor.size() + offhand.size());
+      for (List<net.minecraft.world.item.ItemStack> sub : this.compartments) {
+         combined.addAll(sub);
+      }
+
+      return combined;
+   }
+
+   public List<ItemStack> getArmorContents() {
+      return this.armor;
+   }
+
+   public void onOpen(org.bukkit.craftbukkit.v1_20_R2.entity.CraftHumanEntity who) {
+      transaction.add(who);
+   }
+
+   public void onClose(org.bukkit.craftbukkit.v1_20_R2.entity.CraftHumanEntity who) {
+      transaction.remove(who);
+   }
+
+   public List<org.bukkit.entity.HumanEntity> getViewers() {
+      return transaction;
+   }
+
+   public org.bukkit.inventory.InventoryHolder getOwner() {
+      return this.player.getBukkitEntity();
+   }
+
+   @Override
+   public int getMaxStackSize() {
+      return maxStack;
+   }
+
+   public void setMaxStackSize(int size) {
+      maxStack = size;
+   }
+
+   @Override
+   public org.bukkit.Location getLocation() {
+      return player.getBukkitEntity().getLocation();
+   }
+   // CraftBukkit end
+
    public Inventory(Player p_35983_) {
       this.player = p_35983_;
    }
@@ -56,6 +_,28 @@
       return !p_36015_.isEmpty() && ItemStack.isSameItemSameTags(p_36015_, p_36016_) && p_36015_.isStackable() && p_36015_.getCount() < p_36015_.getMaxStackSize() && p_36015_.getCount() < this.getMaxStackSize();
    }
 
+   // CraftBukkit start - Watch method above! :D
+   public int canHold(ItemStack itemstack) {
+      int remains = itemstack.getCount();
+      for (int i = 0; i < this.items.size(); ++i) {
+         ItemStack itemstack1 = this.getItem(i);
+         if (itemstack1.isEmpty()) return itemstack.getCount();
+
+         if (this.hasRemainingSpaceForItem(itemstack1, itemstack)) {
+            remains -= (itemstack1.getMaxStackSize() < this.getMaxStackSize() ? itemstack1.getMaxStackSize() : this.getMaxStackSize()) - itemstack1.getCount();
+         }
+         if (remains <= 0) return itemstack.getCount();
+      }
+      ItemStack offhandItemStack = this.getItem(this.items.size() + this.armor.size());
+      if (this.hasRemainingSpaceForItem(offhandItemStack, itemstack)) {
+         remains -= (offhandItemStack.getMaxStackSize() < this.getMaxStackSize() ? offhandItemStack.getMaxStackSize() : this.getMaxStackSize()) - offhandItemStack.getCount();
+      }
+      if (remains <= 0) return itemstack.getCount();
+
+      return itemstack.getCount() - remains;
+   }
+   // CraftBukkit end
+
    public int getFreeSlot() {
       for(int i = 0; i < this.items.size(); ++i) {
          if (this.items.get(i).isEmpty()) {
@@ -130,7 +_,7 @@
 
       for(int k = 0; k < 9; ++k) {
          int l = (this.selected + k) % 9;
-         if (!this.items.get(l).isEnchanted()) {
+         if (!this.items.get(l).isNotReplaceableByPickAction(this.player, l)) {
             return l;
          }
       }
@@ -178,7 +_,8 @@
       int i = p_36049_.getCount();
       ItemStack itemstack = this.getItem(p_36048_);
       if (itemstack.isEmpty()) {
-         itemstack = new ItemStack(item, 0);
+         itemstack = p_36049_.copy(); // Forge: Replace Item clone above to preserve item capabilities when picking the item up.
+         itemstack.setCount(0);
          if (p_36049_.hasTag()) {
             itemstack.setTag(p_36049_.getTag().copy());
          }
@@ -222,11 +_,13 @@
    }
 
    public void tick() {
+      int idx = 0;
       for(NonNullList<ItemStack> nonnulllist : this.compartments) {
          for(int i = 0; i < nonnulllist.size(); ++i) {
             if (!nonnulllist.get(i).isEmpty()) {
-               nonnulllist.get(i).inventoryTick(this.player.level(), this.player, i, this.selected == i);
+               nonnulllist.get(i).onInventoryTick(this.player.level(), this.player, idx, this.selected);
             }
+            idx++;
          }
       }
 
@@ -277,6 +_,8 @@
          } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Adding item to inventory");
             CrashReportCategory crashreportcategory = crashreport.addCategory("Item being added");
+            crashreportcategory.setDetail("Registry Name", () -> String.valueOf(net.minecraftforge.registries.ForgeRegistries.ITEMS.getKey(p_36042_.getItem())));
+            crashreportcategory.setDetail("Item Class", () -> p_36042_.getItem().getClass().getName());
             crashreportcategory.setDetail("Item ID", Item.getId(p_36042_.getItem()));
             crashreportcategory.setDetail("Item data", p_36042_.getDamageValue());
             crashreportcategory.setDetail("Item name", () -> {
