--- a/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -29,6 +_,6 @@
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
@@ -43,6 +_,6 @@
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public abstract class AbstractArrow extends Projectile {
    private static final double ARROW_BASE_DAMAGE = 2.0D;
@@ -53,19 +_,33 @@
    private static final int FLAG_CROSSBOW = 4;
    @Nullable
    private BlockState lastState;
-   protected boolean inGround;
+   public boolean inGround;
    protected int inGroundTime;
    public AbstractArrow.Pickup pickup = AbstractArrow.Pickup.DISALLOWED;
    public int shakeTime;
-   private int life;
+   public int life;
    private double baseDamage = 2.0D;
-   private int knockback;
+   public int knockback;
    private SoundEvent soundEvent = this.getDefaultHitGroundSoundEvent();
    @Nullable
    private IntOpenHashSet piercingIgnoreEntityIds;
    @Nullable
    private List<Entity> piercedAndKilledEntities;
 
+   private final IntOpenHashSet ignoredEntities = new IntOpenHashSet();
+
+   // Spigot Start
+   @Override
+   public void inactiveTick()
+   {
+      if ( this.inGround )
+      {
+         this.life += 1;
+      }
+      super.inactiveTick();
+   }
+   // Spigot End
+
    protected AbstractArrow(EntityType<? extends AbstractArrow> p_36721_, Level p_36722_) {
       super(p_36721_, p_36722_);
    }
@@ -150,7 +_,7 @@
          --this.shakeTime;
       }
 
-      if (this.isInWaterOrRain() || blockstate.is(Blocks.POWDER_SNOW)) {
+      if (this.isInWaterOrRain() || blockstate.is(Blocks.POWDER_SNOW) || this.isInFluidType((fluidType, height) -> this.canFluidExtinguish(fluidType))) {
          this.clearFire();
       }
 
@@ -186,9 +_,28 @@
                }
             }
 
-            if (hitresult != null && !flag) {
-               this.onHit(hitresult);
-               this.hasImpulse = true;
+            if (hitresult != null && hitresult.getType() != HitResult.Type.MISS && !flag) {
+               switch (net.minecraftforge.event.ForgeEventFactory.onProjectileImpactResult(this, hitresult)) {
+                  case SKIP_ENTITY:
+                     if (hitresult.getType() != HitResult.Type.ENTITY) { // If there is no entity, we just return default behaviour
+                        this.preOnHit(hitresult); // CraftBukkit - projectile hit event
+                        this.hasImpulse = true;
+                        break;
+                     }
+                     ignoredEntities.add(entityhitresult.getEntity().getId());
+                     entityhitresult = null; // Don't process any further
+                     break;
+                  case STOP_AT_CURRENT_NO_DAMAGE:
+                     this.discard();
+                     entityhitresult = null; // Don't process any further
+                     break;
+                  case STOP_AT_CURRENT:
+                     this.setPierceLevel((byte) 0);
+                  case DEFAULT:
+                     this.preOnHit(hitresult); // CraftBukkit - projectile hit event
+                     this.hasImpulse = true;
+                     break;
+               }
             }
 
             if (entityhitresult == null || this.getPierceLevel() <= 0) {
@@ -198,6 +_,9 @@
             hitresult = null;
          }
 
+         if (this.isRemoved())
+            return;
+
          vec3 = this.getDeltaMovement();
          double d5 = vec3.x;
          double d6 = vec3.y;
@@ -264,7 +_,7 @@
 
    protected void tickDespawn() {
       ++this.life;
-      if (this.life >= 1200) {
+      if (this.life >= ((this instanceof ThrownTrident) ? this.level().spigotConfig.tridentDespawnRate : this.level().spigotConfig.arrowDespawnRate)) { // Spigot
          this.discard();
       }
 
@@ -322,7 +_,14 @@
       boolean flag = entity.getType() == EntityType.ENDERMAN;
       int k = entity.getRemainingFireTicks();
       if (this.isOnFire() && !flag) {
-         entity.setSecondsOnFire(5);
+         // CraftBukkit start
+         org.bukkit.event.entity.EntityCombustByEntityEvent combustEvent = new org.bukkit.event.entity.EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
+         org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+         if (!combustEvent.isCancelled()) {
+            entity.setSecondsOnFire(combustEvent.getDuration(), false);
+         }
+         // CraftBukkit end
+
       }
 
       if (entity.hurt(damagesource, (float)i)) {
@@ -422,7 +_,7 @@
    }
 
    protected boolean canHitEntity(Entity p_36743_) {
-      return super.canHitEntity(p_36743_) && (this.piercingIgnoreEntityIds == null || !this.piercingIgnoreEntityIds.contains(p_36743_.getId()));
+      return super.canHitEntity(p_36743_) && (this.piercingIgnoreEntityIds == null || !this.piercingIgnoreEntityIds.contains(p_36743_.getId())) && !this.ignoredEntities.contains(p_36743_.getId());
    }
 
    public void addAdditionalSaveData(CompoundTag p_36772_) {
@@ -475,7 +_,22 @@
 
    public void playerTouch(Player p_36766_) {
       if (!this.level().isClientSide && (this.inGround || this.isNoPhysics()) && this.shakeTime <= 0) {
-         if (this.tryPickup(p_36766_)) {
+         // CraftBukkit start
+         ItemStack itemstack = this.getPickupItem();
+         if (this.pickup == AbstractArrow.Pickup.ALLOWED && !itemstack.isEmpty() && p_36766_.getInventory().canHold(itemstack) > 0) {
+            net.minecraft.world.entity.item.ItemEntity item = new net.minecraft.world.entity.item.ItemEntity(this.level(), this.getX(), this.getY(), this.getZ(), itemstack);
+            org.bukkit.event.player.PlayerPickupArrowEvent event = new org.bukkit.event.player.PlayerPickupArrowEvent((org.bukkit.entity.Player) p_36766_.getBukkitEntity(), new org.bukkit.craftbukkit.v1_20_R2.entity.CraftItem(this.level().getCraftServer(), item), (org.bukkit.entity.AbstractArrow) this.getBukkitEntity());
+            // event.setCancelled(!entityhuman.canPickUpLoot); TODO
+            this.level().getCraftServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+               return;
+            }
+            itemstack = item.getItem();
+         }
+
+         if ((this.pickup == AbstractArrow.Pickup.ALLOWED && p_36766_.getInventory().add(itemstack)) || (this.pickup == AbstractArrow.Pickup.CREATIVE_ONLY && p_36766_.getAbilities().instabuild)) {
+            // CraftBukkit end
             p_36766_.take(this, 1);
             this.discard();
          }
