--- a/net/minecraft/world/entity/animal/MushroomCow.java
+++ b/net/minecraft/world/entity/animal/MushroomCow.java
@@ -1,5 +_,5 @@
 package net.minecraft.world.entity.animal;
 
 import java.util.List;
 import java.util.Optional;
 import java.util.UUID;
@@ -40,8 +_,8 @@
 import net.minecraft.world.level.block.SuspiciousEffectHolder;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.gameevent.GameEvent;
 
-public class MushroomCow extends Cow implements Shearable, VariantHolder<MushroomCow.MushroomType> {
+public class MushroomCow extends Cow implements Shearable, net.minecraftforge.common.IForgeShearable {
    private static final EntityDataAccessor<String> DATA_TYPE = SynchedEntityData.defineId(MushroomCow.class, EntityDataSerializers.STRING);
    private static final int MUTATE_CHANCE = 1024;
    private static final String TAG_STEW_EFFECTS = "stew_effects";
@@ -102,7 +_,7 @@
 
          this.playSound(soundevent, 1.0F, 1.0F);
          return InteractionResult.sidedSuccess(this.level().isClientSide);
-      } else if (itemstack.is(Items.SHEARS) && this.readyForShearing()) {
+      } else if (false && itemstack.getItem() == Items.SHEARS && this.readyForShearing()) { //Forge: Moved to onSheared
          this.shear(SoundSource.PLAYERS);
          this.gameEvent(GameEvent.SHEAR, p_28941_);
          if (!this.level().isClientSide) {
@@ -141,13 +_,33 @@
       }
    }
 
+   @Override
+   public java.util.List<ItemStack> onSheared(@org.jetbrains.annotations.Nullable Player player, @org.jetbrains.annotations.NotNull ItemStack item, Level world, BlockPos pos, int fortune) {
+      this.gameEvent(GameEvent.SHEAR, player);
+      return shearInternal(player == null ? SoundSource.BLOCKS : SoundSource.PLAYERS);
+   }
+
    public void shear(SoundSource p_28924_) {
+      for (ItemStack itemStack : shearInternal(p_28924_)) {
+         // CraftBukkit start
+         ItemEntity itemEntity = new ItemEntity(this.level(), this.getX(), this.getY(1.0D), this.getZ(), itemStack);
+         org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) itemEntity.getBukkitEntity());
+         org.bukkit.Bukkit.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            continue;
+         }
+         this.level().addFreshEntity(itemEntity);
+         // CraftBukkit end
+      }
+   }
+
+   private java.util.List<ItemStack> shearInternal(SoundSource p_28924_) {
       this.level().playSound((Player)null, this, SoundEvents.MOOSHROOM_SHEAR, p_28924_, 1.0F, 1.0F);
       if (!this.level().isClientSide()) {
          Cow cow = EntityType.COW.create(this.level());
          if (cow != null) {
             ((ServerLevel)this.level()).sendParticles(ParticleTypes.EXPLOSION, this.getX(), this.getY(0.5D), this.getZ(), 1, 0.0D, 0.0D, 0.0D, 0.0D);
-            this.discard();
+            // this.discard(); // CraftBukkit - moved down
             cow.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
             cow.setHealth(this.getHealth());
             cow.yBodyRot = this.yBodyRot;
@@ -161,13 +_,23 @@
             }
 
             cow.setInvulnerable(this.isInvulnerable());
-            this.level().addFreshEntity(cow);
-
+            // CraftBukkit start
+            if (org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callEntityTransformEvent(this, cow, org.bukkit.event.entity.EntityTransformEvent.TransformReason.SHEARED).isCancelled()) {
+               return java.util.Collections.emptyList();
+            }
+            this.level().addFreshEntity(cow, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SHEARED);
+
+            this.discard(); // CraftBukkit - from above
+            // CraftBukkit end
+
+            java.util.List<ItemStack> items = new java.util.ArrayList<>();
             for(int i = 0; i < 5; ++i) {
-               this.level().addFreshEntity(new ItemEntity(this.level(), this.getX(), this.getY(1.0D), this.getZ(), new ItemStack(this.getVariant().blockState.getBlock())));
+               items.add(new ItemStack(this.getVariant().blockState.getBlock()));
             }
+            return items;
          }
       }
+      return java.util.Collections.emptyList();
 
    }
 
@@ -231,6 +_,11 @@
       }
 
       return mushroomcow$mushroomtype2;
+   }
+
+   @Override
+   public boolean isShearable(ItemStack item, Level world, BlockPos pos) {
+      return readyForShearing();
    }
 
    public static enum MushroomType implements StringRepresentable {
