--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -122,7 +_,34 @@
 import org.joml.Vector3f;
 import org.slf4j.Logger;
 
-public abstract class Entity implements Nameable, EntityAccess, CommandSource {
+public abstract class Entity extends net.minecraftforge.common.capabilities.CapabilityProvider<Entity> implements Nameable, EntityAccess, CommandSource, net.minecraftforge.common.extensions.IForgeEntity {
+
+   // CraftBukkit start
+   private static final int CURRENT_LEVEL = 2;
+   static boolean isLevelAtLeast(CompoundTag tag, int level) {
+      return tag.contains("Bukkit.updateLevel") && tag.getInt("Bukkit.updateLevel") >= level;
+   }
+
+   private org.bukkit.craftbukkit.v1_20_R2.entity.CraftEntity bukkitEntity;
+
+   public org.bukkit.craftbukkit.v1_20_R2.entity.CraftEntity getBukkitEntity() {
+      if (bukkitEntity == null) {
+         bukkitEntity = org.bukkit.craftbukkit.v1_20_R2.entity.CraftEntity.getEntity(level.getCraftServer(), this);
+      }
+      return bukkitEntity;
+   }
+
+   @Override
+   public org.bukkit.command.CommandSender getBukkitSender(CommandSourceStack wrapper) {
+      return getBukkitEntity();
+   }
+
+   // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+   public int getDefaultMaxAirSupply() {
+      return TOTAL_AIR_SUPPLY;
+   }
+   // CraftBukkit end
+
    private static final Logger LOGGER = LogUtils.getLogger();
    public static final String ID_TAG = "id";
    public static final String PASSENGERS_TAG = "Passengers";
@@ -143,6 +_,7 @@
    private static final double LAVA_SLOW_FLOW_SCALE = 0.0023333333333333335D;
    public static final String UUID_TAG = "UUID";
    private static double viewScale = 1.0D;
+   @Deprecated // Forge: Use the getter to allow overriding in mods
    private final EntityType<?> type;
    private int id = ENTITY_COUNTER.incrementAndGet();
    public boolean blocksBuilding;
@@ -189,8 +_,10 @@
    public int tickCount;
    private int remainingFireTicks = -this.getFireImmuneTicks();
    public boolean wasTouchingWater;
+   @Deprecated // Forge: Use forgeFluidTypeHeight instead
    protected Object2DoubleMap<TagKey<Fluid>> fluidHeight = new Object2DoubleArrayMap<>(2);
    protected boolean wasEyeInWater;
+   @Deprecated // Forge: Use forgeFluidTypeOnEyes instead
    private final Set<TagKey<Fluid>> fluidOnEyes = new HashSet<>();
    public int invulnerableTime;
    protected boolean firstTick = true;
@@ -237,14 +_,48 @@
    public boolean hasVisualFire;
    @Nullable
    private BlockState feetBlockState = null;
+   // CraftBukkit start
+   public boolean persist = true;
+   public boolean visibleByDefault = true;
+   public boolean valid;
+   public boolean generation;
+   public int maxAirTicks = getDefaultMaxAirSupply(); // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+   public org.bukkit.projectiles.ProjectileSource projectileSource; // For projectiles only
+   public boolean lastDamageCancelled; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
+   public boolean persistentInvisibility = false;
+   public BlockPos lastLavaContact;
+   public org.spigotmc.CustomTimingsHandler tickTimer = org.bukkit.craftbukkit.v1_20_R2.SpigotTimings.getEntityTimings(this); // Spigot
+   // Spigot start
+   public final org.spigotmc.ActivationRange.ActivationType activationType = org.spigotmc.ActivationRange.initializeEntityActivationType(this);
+   public final boolean defaultActivationState;
+   public long activatedTick = Integer.MIN_VALUE;
+   public void inactiveTick() { }
+   // Spigot end
+
+   public float getBukkitYaw() {
+      return this.yRot;
+   }
+
+   public boolean isChunkLoaded() {
+      return level.hasChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4);
+   }
+   // CraftBukkit end
 
    public Entity(EntityType<?> p_19870_, Level p_19871_) {
+      super(Entity.class);
       this.type = p_19870_;
       this.level = p_19871_;
       this.dimensions = p_19870_.getDimensions();
       this.position = Vec3.ZERO;
       this.blockPosition = BlockPos.ZERO;
       this.chunkPosition = ChunkPos.ZERO;
+      // Spigot start
+      if (p_19871_ != null) {
+         this.defaultActivationState = org.spigotmc.ActivationRange.initializeEntityActivationState(this, p_19871_.spigotConfig);
+      } else {
+         this.defaultActivationState = false;
+      }
+      // Spigot end
       this.entityData = new SynchedEntityData(this);
       this.entityData.define(DATA_SHARED_FLAGS_ID, (byte)0);
       this.entityData.define(DATA_AIR_SUPPLY_ID, this.getMaxAirSupply());
@@ -255,8 +_,11 @@
       this.entityData.define(DATA_POSE, Pose.STANDING);
       this.entityData.define(DATA_TICKS_FROZEN, 0);
       this.defineSynchedData();
+      this.getEntityData().registrationLocked = true; // Spigot
       this.setPos(0.0D, 0.0D, 0.0D);
       this.eyeHeight = this.getEyeHeight(Pose.STANDING, this.dimensions);
+      net.minecraftforge.event.ForgeEventFactory.onEntityConstructing(this);
+      this.gatherCapabilities();
    }
 
    public boolean isColliding(BlockPos p_20040_, BlockState p_20041_) {
@@ -346,12 +_,19 @@
 
    public void remove(Entity.RemovalReason p_146834_) {
       this.setRemoved(p_146834_);
+      this.invalidateCaps();
    }
 
    public void onClientRemoval() {
    }
 
    public void setPose(Pose p_20125_) {
+      // CraftBukkit start
+      if (p_20125_ == this.getPose()) {
+         return;
+      }
+      this.level.getCraftServer().getPluginManager().callEvent(new EntityPoseChangeEvent(this.getBukkitEntity(), org.bukkit.entity.Pose.values()[p_20125_.ordinal()]));
+      // CraftBukkit end
       this.entityData.set(DATA_POSE, p_20125_);
    }
 
@@ -375,6 +_,33 @@
    }
 
    protected void setRot(float p_19916_, float p_19917_) {
+      // CraftBukkit start - yaw was sometimes set to NaN, so we need to set it back to 0
+      if (Float.isNaN(p_19916_)) {
+         p_19916_ = 0;
+      }
+
+      if (p_19916_ == Float.POSITIVE_INFINITY || p_19916_ == Float.NEGATIVE_INFINITY) {
+         if (this instanceof ServerPlayer) {
+            this.level.getCraftServer().getLogger().warning(this.getScoreboardName() + " was caught trying to crash the server with an invalid yaw");
+            ((org.bukkit.craftbukkit.v1_20_R2.entity.CraftPlayer) this.getBukkitEntity()).kickPlayer("Infinite yaw (Hacking?)");
+         }
+         p_19916_ = 0;
+      }
+
+      // pitch was sometimes set to NaN, so we need to set it back to 0
+      if (Float.isNaN(p_19917_)) {
+         p_19917_ = 0;
+      }
+
+      if (p_19917_ == Float.POSITIVE_INFINITY || p_19917_ == Float.NEGATIVE_INFINITY) {
+         if (this instanceof ServerPlayer) {
+            this.level.getCraftServer().getLogger().warning(this.getScoreboardName() + " was caught trying to crash the server with an invalid pitch");
+            ((org.bukkit.craftbukkit.v1_20_R2.entity.CraftPlayer) this.getBukkitEntity()).kickPlayer("Infinite pitch (Hacking?)");
+         }
+         p_19917_ = 0;
+      }
+      // CraftBukkit end
+
       this.setYRot(p_19916_ % 360.0F);
       this.setXRot(p_19917_ % 360.0F);
    }
@@ -415,6 +_,15 @@
       this.baseTick();
    }
 
+   // CraftBukkit start
+   public void postTick() {
+      // No clean way to break out of ticking once the entity has been copied to a new world, so instead we move the portalling later in the tick cycle
+      if (!(this instanceof ServerPlayer)) {
+         this.handleNetherPortal();
+      }
+   }
+   // CraftBukkit end
+
    public void baseTick() {
       this.level().getProfiler().push("entityBaseTick");
       this.feetBlockState = null;
@@ -429,7 +_,7 @@
       this.walkDistO = this.walkDist;
       this.xRotO = this.getXRot();
       this.yRotO = this.getYRot();
-      this.handleNetherPortal();
+      if (this instanceof ServerPlayer) this.handleNetherPortal(); // CraftBukkit - // Moved up to postTick
       if (this.canSpawnSprintParticle()) {
          this.spawnSprintParticle();
       }
@@ -463,7 +_,11 @@
 
       if (this.isInLava()) {
          this.lavaHurt();
-         this.fallDistance *= 0.5F;
+         this.fallDistance *= this.getFluidFallDistanceModifier(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
+         // CraftBukkit start
+      } else {
+         this.lastLavaContact = null;
+         // CraftBukkit end
       }
 
       this.checkBelowWorld();
@@ -515,15 +_,48 @@
 
    public void lavaHurt() {
       if (!this.fireImmune()) {
-         this.setSecondsOnFire(15);
+         // CraftBukkit start - Fallen in lava TODO: this event spams!
+         if (this instanceof LivingEntity && remainingFireTicks <= 0) {
+            // not on fire yet
+            org.bukkit.block.Block damager = (lastLavaContact == null) ? null : org.bukkit.craftbukkit.v1_20_R2.block.CraftBlock.at(level, lastLavaContact);
+            org.bukkit.entity.Entity damagee = this.getBukkitEntity();
+            EntityCombustEvent combustEvent = new org.bukkit.event.entity.EntityCombustByBlockEvent(damager, damagee, 15);
+            this.level.getCraftServer().getPluginManager().callEvent(combustEvent);
+
+            if (!combustEvent.isCancelled()) {
+               this.setSecondsOnFire(combustEvent.getDuration(), false);
+            }
+         } else {
+            // This will be called every single tick the entity is in lava, so don't throw an event
+            this.setSecondsOnFire(15, false);
+         }
+         org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.blockDamage = (lastLavaContact) == null ? null : org.bukkit.craftbukkit.v1_20_R2.block.CraftBlock.at(level, lastLavaContact);
          if (this.hurt(this.damageSources().lava(), 4.0F)) {
             this.playSound(SoundEvents.GENERIC_BURN, 0.4F, 2.0F + this.random.nextFloat() * 0.4F);
          }
+         org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.blockDamage = null;
+         // CraftBukkit end - we also don't throw an event unless the object in lava is living, to save on some event calls
 
       }
    }
 
    public void setSecondsOnFire(int p_20255_) {
+      // CraftBukkit start
+      this.setSecondsOnFire(p_20255_, true);
+   }
+
+   public void setSecondsOnFire(int p_20255_, boolean callEvent) {
+      if (callEvent) {
+         EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), p_20255_);
+         this.level.getCraftServer().getPluginManager().callEvent(event);
+
+         if (event.isCancelled()) {
+            return;
+         }
+
+         p_20255_ = event.getDuration();
+      }
+      // CraftBukkit end
       int i = p_20255_ * 20;
       if (this instanceof LivingEntity) {
          i = ProtectionEnchantment.getFireAfterDampener((LivingEntity)this, i);
@@ -603,6 +_,7 @@
    }
 
    public void move(MoverType p_19973_, Vec3 p_19974_) {
+      org.bukkit.craftbukkit.v1_20_R2.SpigotTimings.entityMoveTimer.startTiming(); // Spigot
       if (this.noPhysics) {
          this.setPos(this.getX() + p_19974_.x, this.getY() + p_19974_.y, this.getZ() + p_19974_.z);
       } else {
@@ -651,6 +_,7 @@
          this.setOnGroundWithKnownMovement(this.verticalCollisionBelow, vec3);
          BlockPos blockpos = this.getOnPosLegacy();
          BlockState blockstate = this.level().getBlockState(blockpos);
+
          this.checkFallDamage(vec3.y, this.onGround(), blockstate, blockpos);
          if (this.isRemoved()) {
             this.level().getProfiler().pop();
@@ -665,6 +_,28 @@
                block.updateEntityAfterFallOn(this.level(), this);
             }
 
+            // CraftBukkit start
+            if (horizontalCollision && getBukkitEntity() instanceof org.bukkit.entity.Vehicle) {
+               org.bukkit.entity.Vehicle vehicle = (org.bukkit.entity.Vehicle) this.getBukkitEntity();
+               org.bukkit.block.Block bl = this.level.getWorld().getBlockAt(Mth.floor(this.getX()), Mth.floor(this.getY()), Mth.floor(this.getZ()));
+
+               if (p_19974_.x > vec3.x) {
+                  bl = bl.getRelative(org.bukkit.block.BlockFace.EAST);
+               } else if (p_19974_.x < vec3.x) {
+                  bl = bl.getRelative(org.bukkit.block.BlockFace.WEST);
+               } else if (p_19974_.z > vec3.z) {
+                  bl = bl.getRelative(org.bukkit.block.BlockFace.SOUTH);
+               } else if (p_19974_.z < vec3.z) {
+                  bl = bl.getRelative(org.bukkit.block.BlockFace.NORTH);
+               }
+
+               if (!bl.getType().isAir()) {
+                  org.bukkit.event.vehicle.VehicleBlockCollisionEvent event = new org.bukkit.event.vehicle.VehicleBlockCollisionEvent(vehicle, bl);
+                  level.getCraftServer().getPluginManager().callEvent(event);
+               }
+            }
+            // CraftBukkit end
+
             if (this.onGround()) {
                block.stepOn(this.level(), blockpos, blockstate, this);
             }
@@ -674,7 +_,7 @@
                double d1 = vec3.x;
                double d2 = vec3.y;
                double d3 = vec3.z;
-               this.flyDist += (float)(vec3.length() * 0.6D);
+               this.flyDist = (float)((double)this.flyDist + vec3.length() * 0.6D);
                BlockPos blockpos1 = this.getOnPos();
                BlockState blockstate1 = this.level().getBlockState(blockpos1);
                boolean flag1 = this.isStateClimbable(blockstate1);
@@ -718,18 +_,19 @@
                   this.setRemainingFireTicks(-this.getFireImmuneTicks());
                }
 
-               if (this.wasOnFire && (this.isInPowderSnow || this.isInWaterRainOrBubble())) {
+               if (this.wasOnFire && (this.isInPowderSnow || this.isInWaterRainOrBubble() || this.isInFluidType((fluidType, height) -> this.canFluidExtinguish(fluidType)))) {
                   this.playEntityOnFireExtinguishedSound();
                }
             }
 
-            if (this.isOnFire() && (this.isInPowderSnow || this.isInWaterRainOrBubble())) {
+            if (this.isOnFire() && (this.isInPowderSnow || this.isInWaterRainOrBubble() || this.isInFluidType((fluidType, height) -> this.canFluidExtinguish(fluidType)))) {
                this.setRemainingFireTicks(-this.getFireImmuneTicks());
             }
 
-            this.level().getProfiler().pop();
+            this.level.getProfiler().pop();
          }
       }
+      org.bukkit.craftbukkit.v1_20_R2.SpigotTimings.entityMoveTimer.stopTiming(); // Spigot
    }
 
    private boolean isStateClimbable(BlockState p_286733_) {
@@ -815,7 +_,7 @@
             return blockpos;
          } else {
             BlockState blockstate = this.level().getBlockState(blockpos);
-            return (!((double)p_216987_ <= 0.5D) || !blockstate.is(BlockTags.FENCES)) && !blockstate.is(BlockTags.WALLS) && !(blockstate.getBlock() instanceof FenceGateBlock) ? blockpos.atY(Mth.floor(this.position.y - (double)p_216987_)) : blockpos;
+            return (!((double)p_216987_ <= 0.5D) || !blockstate.collisionExtendsVertically(this.level(), blockpos, this)) ? blockpos.atY(Mth.floor(this.position.y - (double)p_216987_)) : blockpos;
          }
       } else {
          int i = Mth.floor(this.position.x);
@@ -886,10 +_,11 @@
       boolean flag1 = p_20273_.y != vec3.y;
       boolean flag2 = p_20273_.z != vec3.z;
       boolean flag3 = this.onGround() || flag1 && p_20273_.y < 0.0D;
-      if (this.maxUpStep() > 0.0F && flag3 && (flag || flag2)) {
-         Vec3 vec31 = collideBoundingBox(this, new Vec3(p_20273_.x, (double)this.maxUpStep(), p_20273_.z), aabb, this.level(), list);
-         Vec3 vec32 = collideBoundingBox(this, new Vec3(0.0D, (double)this.maxUpStep(), 0.0D), aabb.expandTowards(p_20273_.x, 0.0D, p_20273_.z), this.level(), list);
-         if (vec32.y < (double)this.maxUpStep()) {
+      float stepHeight = getStepHeight();
+      if (stepHeight > 0.0F && flag3 && (flag || flag2)) {
+         Vec3 vec31 = collideBoundingBox(this, new Vec3(p_20273_.x, (double)stepHeight, p_20273_.z), aabb, this.level, list);
+         Vec3 vec32 = collideBoundingBox(this, new Vec3(0.0D, (double)stepHeight, 0.0D), aabb.expandTowards(p_20273_.x, 0.0D, p_20273_.z), this.level, list);
+         if (vec32.y < (double)stepHeight) {
             Vec3 vec33 = collideBoundingBox(this, new Vec3(p_20273_.x, 0.0D, p_20273_.z), aabb.move(vec32), this.level(), list).add(vec32);
             if (vec33.horizontalDistanceSqr() > vec31.horizontalDistanceSqr()) {
                vec31 = vec33;
@@ -973,6 +_,20 @@
       return SoundEvents.GENERIC_SPLASH;
    }
 
+   // CraftBukkit start - Add delegate methods
+   public SoundEvent getSwimSound0() {
+      return getSwimSound();
+   }
+
+   public SoundEvent getSwimSplashSound0() {
+      return getSwimSplashSound();
+   }
+
+   public SoundEvent getSwimHighSpeedSplashSound0() {
+      return getSwimHighSpeedSplashSound();
+   }
+   // CraftBukkit end
+
    protected void checkInsideBlocks() {
       AABB aabb = this.getBoundingBox();
       BlockPos blockpos = BlockPos.containing(aabb.minX + 1.0E-7D, aabb.minY + 1.0E-7D, aabb.minZ + 1.0E-7D);
@@ -1039,19 +_,20 @@
       return !blockstate.is(BlockTags.INSIDE_STEP_SOUND_BLOCKS) && !blockstate.is(BlockTags.COMBINATION_STEP_SOUND_BLOCKS) ? p_278049_ : blockpos;
    }
 
-   protected void playCombinationStepSounds(BlockState p_277472_, BlockState p_277630_) {
-      SoundType soundtype = p_277472_.getSoundType();
+   protected void playCombinationStepSounds(BlockState p_277472_, BlockState p_277630_, BlockPos primaryPos, BlockPos secondaryPos) {
+      SoundType soundtype = p_277472_.getSoundType(this.level, primaryPos, this);
+      SoundType soundtype1 = p_277630_.getSoundType(this.level, secondaryPos, this);
       this.playSound(soundtype.getStepSound(), soundtype.getVolume() * 0.15F, soundtype.getPitch());
-      this.playMuffledStepSound(p_277630_);
+      this.playMuffledStepSound(p_277630_, secondaryPos);
    }
 
-   protected void playMuffledStepSound(BlockState p_283110_) {
-      SoundType soundtype = p_283110_.getSoundType();
+   protected void playMuffledStepSound(BlockState p_283110_, BlockPos pos) {
+      SoundType soundtype = p_283110_.getSoundType(this.level, pos, this);
       this.playSound(soundtype.getStepSound(), soundtype.getVolume() * 0.05F, soundtype.getPitch() * 0.8F);
    }
 
    protected void playStepSound(BlockPos p_20135_, BlockState p_20136_) {
-      SoundType soundtype = p_20136_.getSoundType();
+      SoundType soundtype = p_20136_.getSoundType(this.level, p_20135_, this);
       this.playSound(soundtype.getStepSound(), soundtype.getVolume() * 0.15F, soundtype.getPitch());
    }
 
@@ -1186,31 +_,38 @@
 
    public void updateSwimming() {
       if (this.isSwimming()) {
-         this.setSwimming(this.isSprinting() && this.isInWater() && !this.isPassenger());
+         this.setSwimming(this.isSprinting() && (this.isInWater() || this.isInFluidType((fluidType, height) -> this.canSwimInFluidType(fluidType))) && !this.isPassenger());
       } else {
-         this.setSwimming(this.isSprinting() && this.isUnderWater() && !this.isPassenger() && this.level().getFluidState(this.blockPosition).is(FluidTags.WATER));
+         this.setSwimming(this.isSprinting() && (this.isUnderWater() || this.canStartSwimming()) && !this.isPassenger());
       }
 
    }
 
    protected boolean updateInWaterStateAndDoFluidPushing() {
       this.fluidHeight.clear();
+      this.forgeFluidTypeHeight.clear();
       this.updateInWaterStateAndDoWaterCurrentPushing();
-      double d0 = this.level().dimensionType().ultraWarm() ? 0.007D : 0.0023333333333333335D;
-      boolean flag = this.updateFluidHeightAndDoFluidPushing(FluidTags.LAVA, d0);
-      return this.isInWater() || flag;
+      if (!(this.getVehicle() instanceof Boat)) {
+         this.fallDistance *= this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().filter(e -> !e.getKey().isAir() && !e.getKey().isVanilla()).map(e -> this.getFluidFallDistanceModifier(e.getKey())).min(Float::compare).orElse(1F);
+         if (this.isInFluidType((fluidType, height) -> !fluidType.isAir() && !fluidType.isVanilla() && this.canFluidExtinguish(fluidType))) this.clearFire();
+      }
+      return this.isInFluidType();
    }
 
    void updateInWaterStateAndDoWaterCurrentPushing() {
       Entity entity = this.getVehicle();
+      java.util.function.BooleanSupplier updateFluidHeight = () -> this.updateFluidHeightAndDoFluidPushing(FluidTags.WATER, 0.014D);
       if (entity instanceof Boat boat) {
          if (!boat.isUnderWater()) {
             this.wasTouchingWater = false;
-            return;
+            updateFluidHeight = () -> {
+               this.updateFluidHeightAndDoFluidPushing(state -> this.shouldUpdateFluidWhileBoating(state, boat));
+               return false;
+            };
          }
       }
 
-      if (this.updateFluidHeightAndDoFluidPushing(FluidTags.WATER, 0.014D)) {
+      if (updateFluidHeight.getAsBoolean()) {
          if (!this.wasTouchingWater && !this.firstTick) {
             this.doWaterSplashEffect();
          }
@@ -1227,6 +_,7 @@
    private void updateFluidOnEyes() {
       this.wasEyeInWater = this.isEyeInFluid(FluidTags.WATER);
       this.fluidOnEyes.clear();
+      this.forgeFluidTypeOnEyes = net.minecraftforge.common.ForgeMod.EMPTY_TYPE.get();
       double d0 = this.getEyeY() - (double)0.11111111F;
       Entity entity = this.getVehicle();
       if (entity instanceof Boat boat) {
@@ -1239,7 +_,7 @@
       FluidState fluidstate = this.level().getFluidState(blockpos);
       double d1 = (double)((float)blockpos.getY() + fluidstate.getHeight(this.level(), blockpos));
       if (d1 > d0) {
-         fluidstate.getTags().forEach(this.fluidOnEyes::add);
+         this.forgeFluidTypeOnEyes = fluidstate.getFluidType();
       }
 
    }
@@ -1283,12 +_,13 @@
    }
 
    public boolean canSpawnSprintParticle() {
-      return this.isSprinting() && !this.isInWater() && !this.isSpectator() && !this.isCrouching() && !this.isInLava() && this.isAlive();
+      return this.isSprinting() && !this.isInWater() && !this.isSpectator() && !this.isCrouching() && !this.isInLava() && this.isAlive() && !this.isInFluidType();
    }
 
    protected void spawnSprintParticle() {
       BlockPos blockpos = this.getOnPosLegacy();
       BlockState blockstate = this.level().getBlockState(blockpos);
+      if(!blockstate.addRunningEffects(level, blockpos, this))
       if (blockstate.getRenderShape() != RenderShape.INVISIBLE) {
          Vec3 vec3 = this.getDeltaMovement();
          BlockPos blockpos1 = this.blockPosition();
@@ -1302,17 +_,20 @@
             d1 = Mth.clamp(d1, (double)blockpos.getZ(), (double)blockpos.getZ() + 1.0D);
          }
 
-         this.level().addParticle(new BlockParticleOption(ParticleTypes.BLOCK, blockstate), d0, this.getY() + 0.1D, d1, vec3.x * -4.0D, 1.5D, vec3.z * -4.0D);
+         this.level().addParticle(new BlockParticleOption(ParticleTypes.BLOCK, blockstate).setPos(blockpos), d0, this.getY() + 0.1D, d1, vec3.x * -4.0D, 1.5D, vec3.z * -4.0D);
       }
 
    }
 
+   @Deprecated // Forge: Use isEyeInFluidType instead
    public boolean isEyeInFluid(TagKey<Fluid> p_204030_) {
+      if (p_204030_ == FluidTags.WATER) return this.isEyeInFluidType(net.minecraftforge.common.ForgeMod.WATER_TYPE.get());
+      else if (p_204030_ == FluidTags.LAVA) return this.isEyeInFluidType(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
       return this.fluidOnEyes.contains(p_204030_);
    }
 
    public boolean isInLava() {
-      return !this.firstTick && this.fluidHeight.getDouble(FluidTags.LAVA) > 0.0D;
+      return !this.firstTick && this.forgeFluidTypeHeight.getDouble(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get()) > 0.0D;
    }
 
    public void moveRelative(float p_19921_, Vec3 p_19922_) {
@@ -1349,10 +_,12 @@
    public void absMoveTo(double p_20249_, double p_20250_, double p_20251_) {
       double d0 = Mth.clamp(p_20249_, -3.0E7D, 3.0E7D);
       double d1 = Mth.clamp(p_20251_, -3.0E7D, 3.0E7D);
+
       this.xo = d0;
       this.yo = p_20250_;
       this.zo = d1;
       this.setPos(d0, p_20250_, d1);
+      if (valid) level.getChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4); // CraftBukkit
    }
 
    public void moveTo(Vec3 p_20220_) {
@@ -1538,6 +_,12 @@
       return false;
    }
 
+   // CraftBukkit start - collidable API
+   public boolean canCollideWithBukkit(Entity entity) {
+      return isPushable();
+   }
+   // CraftBukkit end
+
    public void awardKillScore(Entity p_19953_, int p_19954_, DamageSource p_19955_) {
       if (p_19953_ instanceof ServerPlayer) {
          CriteriaTriggers.ENTITY_KILLED_PLAYER.trigger((ServerPlayer)p_19953_, this, p_19955_);
@@ -1568,7 +_,7 @@
          return false;
       } else {
          String s = this.getEncodeId();
-         if (s == null) {
+         if (!this.persist || s == null) { // CraftBukkit - persist flag
             return false;
          } else {
             p_20087_.putString("id", s);
@@ -1592,6 +_,18 @@
 
          Vec3 vec3 = this.getDeltaMovement();
          p_20241_.put("Motion", this.newDoubleList(vec3.x, vec3.y, vec3.z));
+
+         // CraftBukkit start - Checking for NaN pitch/yaw and resetting to zero
+         // TODO: make sure this is the best way to address this.
+         if (Float.isNaN(this.yRot)) {
+            this.yRot = 0;
+         }
+
+         if (Float.isNaN(this.xRot)) {
+            this.xRot = 0;
+         }
+         // CraftBukkit end
+
          p_20241_.put("Rotation", this.newFloatList(this.getYRot(), this.getXRot()));
          p_20241_.putFloat("FallDistance", this.fallDistance);
          p_20241_.putShort("Fire", (short)this.remainingFireTicks);
@@ -1600,6 +_,26 @@
          p_20241_.putBoolean("Invulnerable", this.invulnerable);
          p_20241_.putInt("PortalCooldown", this.portalCooldown);
          p_20241_.putUUID("UUID", this.getUUID());
+         // CraftBukkit start
+         // PAIL: Check above UUID reads 1.8 properly, ie: UUIDMost / UUIDLeast
+         p_20241_.putLong("WorldUUIDLeast", this.level.getWorld().getUID().getLeastSignificantBits());
+         p_20241_.putLong("WorldUUIDMost", this.level.getWorld().getUID().getMostSignificantBits());
+         p_20241_.putInt("Bukkit.updateLevel", CURRENT_LEVEL);
+         if (!this.persist) {
+            p_20241_.putBoolean("Bukkit.persist", this.persist);
+         }
+         if (!this.visibleByDefault) {
+            p_20241_.putBoolean("Bukkit.visibleByDefault", this.visibleByDefault);
+         }
+         if (this.persistentInvisibility) {
+            p_20241_.putBoolean("Bukkit.invisible", this.persistentInvisibility);
+         }
+         // SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+         if (maxAirTicks != getDefaultMaxAirSupply()) {
+            p_20241_.putInt("Bukkit.MaxAirSupply", getMaxAirSupply());
+         }
+         p_20241_.putInt("Spigot.ticksLived", this.tickCount);
+         // CraftBukkit end
          Component component = this.getCustomName();
          if (component != null) {
             p_20241_.putString("CustomName", Component.Serializer.toJson(component));
@@ -1630,6 +_,8 @@
             p_20241_.putBoolean("HasVisualFire", this.hasVisualFire);
          }
 
+         p_20241_.putBoolean("CanUpdate", canUpdate);
+
          if (!this.tags.isEmpty()) {
             ListTag listtag = new ListTag();
 
@@ -1640,6 +_,10 @@
             p_20241_.put("Tags", listtag);
          }
 
+         CompoundTag caps = serializeCaps();
+         if (caps != null) p_20241_.put("ForgeCaps", caps);
+         if (persistentData != null) p_20241_.put("ForgeData", persistentData.copy());
+
          this.addAdditionalSaveData(p_20241_);
          if (this.isVehicle()) {
             ListTag listtag1 = new ListTag();
@@ -1656,6 +_,11 @@
             }
          }
 
+         // CraftBukkit start - stores eventually existing bukkit values
+         if (this.bukkitEntity != null) {
+            this.bukkitEntity.storeBukkitValues(p_20241_);
+         }
+         // CraftBukkit end
          return p_20241_;
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.forThrowable(throwable, "Saving entity NBT");
@@ -1715,6 +_,9 @@
                this.setGlowingTag(p_20259_.getBoolean("Glowing"));
                this.setTicksFrozen(p_20259_.getInt("TicksFrozen"));
                this.hasVisualFire = p_20259_.getBoolean("HasVisualFire");
+               if (p_20259_.contains("ForgeData", 10)) persistentData = p_20259_.getCompound("ForgeData");
+               if (p_20259_.contains("CanUpdate", 99)) this.canUpdate(p_20259_.getBoolean("CanUpdate"));
+               if (p_20259_.contains("ForgeCaps", 10)) deserializeCaps(p_20259_.getCompound("ForgeCaps"));
                if (p_20259_.contains("Tags", 9)) {
                   this.tags.clear();
                   ListTag listtag3 = p_20259_.getList("Tags", 8);
@@ -1736,6 +_,49 @@
          } else {
             throw new IllegalStateException("Entity has invalid position");
          }
+
+         // CraftBukkit start
+         // Spigot start
+         if (this instanceof LivingEntity) {
+            this.tickCount = p_20259_.getInt("Spigot.ticksLived");
+         }
+         // Spigot end
+         this.persist = !p_20259_.contains("Bukkit.persist") || p_20259_.getBoolean("Bukkit.persist");
+         this.visibleByDefault = !p_20259_.contains("Bukkit.visibleByDefault") || p_20259_.getBoolean("Bukkit.visibleByDefault");
+         // SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+         if (p_20259_.contains("Bukkit.MaxAirSupply")) {
+            maxAirTicks = p_20259_.getInt("Bukkit.MaxAirSupply");
+         }
+         // CraftBukkit end
+
+         // CraftBukkit start - Reset world
+         if (this instanceof ServerPlayer) {
+            org.bukkit.Server server = org.bukkit.Bukkit.getServer();
+            org.bukkit.World bworld = null;
+
+            // TODO: Remove World related checks, replaced with WorldUID
+            String worldName = p_20259_.getString("world");
+
+            if (p_20259_.contains("WorldUUIDMost") && p_20259_.contains("WorldUUIDLeast")) {
+               UUID uid = new UUID(p_20259_.getLong("WorldUUIDMost"), p_20259_.getLong("WorldUUIDLeast"));
+               bworld = server.getWorld(uid);
+            } else {
+               bworld = server.getWorld(worldName);
+            }
+
+            if (bworld == null) {
+               bworld = ((org.bukkit.craftbukkit.v1_20_R2.CraftServer) server).getServer().getLevel(Level.OVERWORLD).getWorld();
+            }
+
+            this.setLevel(bworld == null ? null : ((org.bukkit.craftbukkit.v1_20_R2.CraftWorld) bworld).getHandle());
+         }
+         this.getBukkitEntity().readBukkitValues(p_20259_);
+         if (p_20259_.contains("Bukkit.invisible")) {
+            boolean bukkitInvisible = p_20259_.getBoolean("Bukkit.invisible");
+            this.setInvisible(bukkitInvisible);
+            this.persistentInvisibility = bukkitInvisible;
+         }
+         // CraftBukkit end
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.forThrowable(throwable, "Loading entity NBT");
          CrashReportCategory crashreportcategory = crashreport.addCategory("Entity being loaded");
@@ -1801,8 +_,23 @@
       } else if (this.level().isClientSide) {
          return null;
       } else {
+         // CraftBukkit start - Capture drops for death event
+         if (this instanceof LivingEntity && !((LivingEntity) this).forceDrops) {
+            ((LivingEntity) this).drops.add(org.bukkit.craftbukkit.v1_20_R2.inventory.CraftItemStack.asBukkitCopy(p_19985_));
+            return null;
+         }
+         // CraftBukkit end
          ItemEntity itementity = new ItemEntity(this.level(), this.getX(), this.getY() + (double)p_19986_, this.getZ(), p_19985_);
          itementity.setDefaultPickUpDelay();
+         // CraftBukkit start
+         EntityDropItemEvent event = new EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) itementity.getBukkitEntity());
+         org.bukkit.Bukkit.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return null;
+         }
+         // CraftBukkit end
+         if (captureDrops() != null) captureDrops().add(itementity);
+         else
          this.level().addFreshEntity(itementity);
          return itementity;
       }
@@ -1839,6 +_,7 @@
 
    public void rideTick() {
       this.setDeltaMovement(Vec3.ZERO);
+      if (canUpdate())
       this.tick();
       if (this.isPassenger()) {
          this.getVehicle().positionRider(this);
@@ -1895,7 +_,30 @@
             }
          }
 
+         if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, p_19966_, true)) return false;
          if (p_19967_ || this.canRide(p_19966_) && p_19966_.canAddPassenger(this)) {
+            // CraftBukkit start
+            if (p_19966_.getBukkitEntity() instanceof org.bukkit.entity.Vehicle && this.getBukkitEntity() instanceof org.bukkit.entity.LivingEntity) {
+               org.bukkit.event.vehicle.VehicleEnterEvent event = new org.bukkit.event.vehicle.VehicleEnterEvent((org.bukkit.entity.Vehicle) p_19966_.getBukkitEntity(), this.getBukkitEntity());
+               // Suppress during worldgen
+               if (this.valid) {
+                  org.bukkit.Bukkit.getPluginManager().callEvent(event);
+               }
+               if (event.isCancelled()) {
+                  return false;
+               }
+            }
+            // CraftBukkit end
+            // Spigot start
+            org.spigotmc.event.entity.EntityMountEvent event = new org.spigotmc.event.entity.EntityMountEvent(this.getBukkitEntity(), p_19966_.getBukkitEntity());
+            // Suppress during worldgen
+            if (this.valid) {
+               org.bukkit.Bukkit.getPluginManager().callEvent(event);
+            }
+            if (event.isCancelled()) {
+               return false;
+            }
+            // Spigot end
             if (this.isPassenger()) {
                this.stopRiding();
             }
@@ -1929,8 +_,9 @@
    public void removeVehicle() {
       if (this.vehicle != null) {
          Entity entity = this.vehicle;
+         if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, entity, false)) return;
          this.vehicle = null;
-         entity.removePassenger(this);
+         if (!entity.removePassenger(this)) this.vehicle = entity; // CraftBukkit
       }
 
    }
@@ -1960,10 +_,39 @@
       }
    }
 
-   protected void removePassenger(Entity p_20352_) {
+   protected boolean removePassenger(Entity p_20352_) { // CraftBukkit
       if (p_20352_.getVehicle() == this) {
          throw new IllegalStateException("Use x.stopRiding(y), not y.removePassenger(x)");
       } else {
+         // CraftBukkit start
+         org.bukkit.craftbukkit.v1_20_R2.entity.CraftEntity craft = (org.bukkit.craftbukkit.v1_20_R2.entity.CraftEntity) p_20352_.getBukkitEntity().getVehicle();
+         Entity orig = craft == null ? null : craft.getHandle();
+         if (getBukkitEntity() instanceof org.bukkit.entity.Vehicle && p_20352_.getBukkitEntity() instanceof org.bukkit.entity.LivingEntity) {
+            org.bukkit.event.vehicle.VehicleExitEvent event = new org.bukkit.event.vehicle.VehicleExitEvent(
+                    (org.bukkit.entity.Vehicle) getBukkitEntity(),
+                    (org.bukkit.entity.LivingEntity) p_20352_.getBukkitEntity()
+            );
+            // Suppress during worldgen
+            if (this.valid) {
+               org.bukkit.Bukkit.getPluginManager().callEvent(event);
+            }
+            org.bukkit.craftbukkit.v1_20_R2.entity.CraftEntity craftn = (org.bukkit.craftbukkit.v1_20_R2.entity.CraftEntity) p_20352_.getBukkitEntity().getVehicle();
+            Entity n = craftn == null ? null : craftn.getHandle();
+            if (event.isCancelled() || n != orig) {
+               return false;
+            }
+         }
+         // CraftBukkit end
+         // Spigot start
+         org.spigotmc.event.entity.EntityDismountEvent event = new org.spigotmc.event.entity.EntityDismountEvent(p_20352_.getBukkitEntity(), this.getBukkitEntity());
+         // Suppress during worldgen
+         if (this.valid) {
+            org.bukkit.Bukkit.getPluginManager().callEvent(event);
+         }
+         if (event.isCancelled()) {
+            return false;
+         }
+         // Spigot end
          if (this.passengers.size() == 1 && this.passengers.get(0) == p_20352_) {
             this.passengers = ImmutableList.of();
          } else {
@@ -1975,12 +_,15 @@
          p_20352_.boardingCooldown = 60;
          this.gameEvent(GameEvent.ENTITY_DISMOUNT, p_20352_);
       }
+      return true; // CraftBukkit
    }
 
    protected boolean canAddPassenger(Entity p_20354_) {
       return this.passengers.isEmpty();
    }
 
+   /** @deprecated Forge: Use {@link #canBeRiddenUnderFluidType(net.minecraftforge.fluids.FluidType, Entity) rider sensitive version} */
+   @Deprecated
    protected boolean couldAcceptPassenger() {
       return true;
    }
@@ -2058,13 +_,20 @@
          ServerLevel serverlevel = (ServerLevel)this.level();
          if (this.isInsidePortal) {
             MinecraftServer minecraftserver = serverlevel.getServer();
-            ResourceKey<Level> resourcekey = this.level().dimension() == Level.NETHER ? Level.OVERWORLD : Level.NETHER;
+            ResourceKey<Level> resourcekey = this.level().getTypeKey() == net.minecraft.world.level.dimension.LevelStem.NETHER ? Level.OVERWORLD : Level.NETHER; // CraftBukkit
             ServerLevel serverlevel1 = minecraftserver.getLevel(resourcekey);
-            if (serverlevel1 != null && minecraftserver.isNetherEnabled() && !this.isPassenger() && this.portalTime++ >= i) {
+
+            if (!this.isPassenger() && this.portalTime++ >= i) { // CraftBukkit
                this.level().getProfiler().push("portal");
                this.portalTime = i;
                this.setPortalCooldown();
-               this.changeDimension(serverlevel1);
+               // CraftBukkit start
+               if (this instanceof ServerPlayer) {
+                  ((ServerPlayer) this).changeDimension(serverlevel1, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.NETHER_PORTAL);
+               } else {
+                  this.changeDimension(serverlevel1);
+               }
+               // CraftBukkit end
                this.level().getProfiler().pop();
             }
 
@@ -2186,10 +_,17 @@
    }
 
    public boolean isVisuallyCrawling() {
-      return this.isVisuallySwimming() && !this.isInWater();
+      return this.isVisuallySwimming() && !this.isInWater() && !this.isInFluidType((fluidType, height) -> this.canSwimInFluidType(fluidType));
    }
 
    public void setSwimming(boolean p_20283_) {
+      // CraftBukkit start
+      if (valid && this.isSwimming() != p_20283_ && this instanceof LivingEntity) {
+         if (org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callToggleSwimEvent((LivingEntity) this, p_20283_).isCancelled()) {
+            return;
+         }
+      }
+      // CraftBukkit end
       this.setSharedFlag(4, p_20283_);
    }
 
@@ -2239,8 +_,12 @@
       return this.getTeam() != null ? this.getTeam().isAlliedTo(p_20032_) : false;
    }
 
+   // CraftBukkit - start
    public void setInvisible(boolean p_20304_) {
-      this.setSharedFlag(5, p_20304_);
+      if (!this.persistentInvisibility) { // Prevent Minecraft from removing our invisibility flag
+         this.setSharedFlag(5, p_20304_);
+      }
+      // CraftBukkit - end
    }
 
    public boolean getSharedFlag(int p_20292_) {
@@ -2258,7 +_,7 @@
    }
 
    public int getMaxAirSupply() {
-      return 300;
+      return maxAirTicks; // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
    }
 
    public int getAirSupply() {
@@ -2266,7 +_,18 @@
    }
 
    public void setAirSupply(int p_20302_) {
-      this.entityData.set(DATA_AIR_SUPPLY_ID, p_20302_);
+      // CraftBukkit start
+      EntityAirChangeEvent event = new EntityAirChangeEvent(this.getBukkitEntity(), p_20302_);
+      // Suppress during worldgen
+      if (this.valid) {
+         event.getEntity().getServer().getPluginManager().callEvent(event);
+      }
+      if (event.isCancelled() && this.getAirSupply() != p_20302_) {
+         this.entityData.markDirty(Entity.DATA_AIR_SUPPLY_ID);
+         return;
+      }
+      this.entityData.set(Entity.DATA_AIR_SUPPLY_ID, event.getAmount());
+      // CraftBukkit end
    }
 
    public int getTicksFrozen() {
@@ -2292,11 +_,41 @@
 
    public void thunderHit(ServerLevel p_19927_, LightningBolt p_19928_) {
       this.setRemainingFireTicks(this.remainingFireTicks + 1);
+      // CraftBukkit start
+      final org.bukkit.entity.Entity thisBukkitEntity = this.getBukkitEntity();
+      final org.bukkit.entity.Entity stormBukkitEntity = p_19928_.getBukkitEntity();
+      final org.bukkit.plugin.PluginManager pluginManager = org.bukkit.Bukkit.getPluginManager();
+      // CraftBukkit end
+
       if (this.remainingFireTicks == 0) {
-         this.setSecondsOnFire(8);
-      }
-
-      this.hurt(this.damageSources().lightningBolt(), 5.0F);
+         // CraftBukkit start - Call a combust event when lightning strikes
+         EntityCombustByEntityEvent entityCombustEvent = new EntityCombustByEntityEvent(stormBukkitEntity, thisBukkitEntity, 8);
+         pluginManager.callEvent(entityCombustEvent);
+         if (!entityCombustEvent.isCancelled()) {
+            this.setSecondsOnFire(entityCombustEvent.getDuration(), false);
+         }
+         // CraftBukkit end
+      }
+
+      // CraftBukkit start
+      if (thisBukkitEntity instanceof org.bukkit.entity.Hanging) {
+         org.bukkit.event.hanging.HangingBreakByEntityEvent hangingEvent = new org.bukkit.event.hanging.HangingBreakByEntityEvent((org.bukkit.entity.Hanging) thisBukkitEntity, stormBukkitEntity);
+         pluginManager.callEvent(hangingEvent);
+
+         if (hangingEvent.isCancelled()) {
+            return;
+         }
+      }
+
+      if (this.fireImmune()) {
+         return;
+      }
+      org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.entityDamage = p_19928_;
+      if (!this.hurt(this.damageSources().lightningBolt(), p_19928_.getDamage())) {
+         org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.entityDamage = null;
+         return;
+      }
+      // CraftBukkit end
    }
 
    public void onAboveBubbleCol(boolean p_20313_) {
@@ -2392,7 +_,7 @@
    }
 
    protected Component getTypeName() {
-      return this.type.getDescription();
+      return this.getType().getDescription(); // Forge: Use getter to allow overriding by mods
    }
 
    public boolean is(Entity p_20356_) {
@@ -2448,32 +_,82 @@
 
    @Nullable
    public Entity changeDimension(ServerLevel p_20118_) {
+      return this.changeDimension(p_20118_, p_20118_.getPortalForcer());
+   }
+
+   //Ketting start - bukkit function
+   private Vec3 teleportTo$location;
+   @Nullable
+   public Entity teleportTo(ServerLevel worldserver, Vec3 location) {
+      try {
+         this.teleportTo$location = location;
+         return this.changeDimension(worldserver, worldserver.getPortalForcer());
+      } finally {
+         this.teleportTo$location = null;
+      }
+   }
+   //Ketting end
+
+   @Nullable
+   public Entity changeDimension(ServerLevel p_20118_, net.minecraftforge.common.util.ITeleporter teleporter) {
+      if (net.minecraftforge.event.ForgeEventFactory.onTravelToDimension(this, p_20118_.dimension())) return null;
       if (this.level() instanceof ServerLevel && !this.isRemoved()) {
          this.level().getProfiler().push("changeDimension");
-         this.unRide();
+         // CraftBukkit start
+         // this.unRide();
+         if (p_20118_ == null) {
+            return null;
+         }
+         // CraftBukkit end
          this.level().getProfiler().push("reposition");
-         PortalInfo portalinfo = this.findDimensionEntryPoint(p_20118_);
+         PortalInfo portalinfo = (teleportTo$location == null) ? teleporter.getPortalInfo(this, p_20118_, this::findDimensionEntryPoint) : new PortalInfo(new Vec3(teleportTo$location.x(), teleportTo$location.y(), teleportTo$location.z()), Vec3.ZERO, this.yRot, this.xRot, p_20118_, null);
+
          if (portalinfo == null) {
             return null;
          } else {
-            this.level().getProfiler().popPush("reloading");
-            Entity entity = this.getType().create(p_20118_);
-            if (entity != null) {
-               entity.restoreFrom(this);
-               entity.moveTo(portalinfo.pos.x, portalinfo.pos.y, portalinfo.pos.z, portalinfo.yRot, entity.getXRot());
-               entity.setDeltaMovement(portalinfo.speed);
-               p_20118_.addDuringTeleport(entity);
-               if (p_20118_.dimension() == Level.END) {
-                  ServerLevel.makeObsidianPlatform(p_20118_);
-               }
+            // CraftBukkit start
+            p_20118_ = portalinfo.world;
+            if (p_20118_ == level) {
+               // SPIGOT-6782: Just move the entity if a plugin changed the world to the one the entity is already in
+               moveTo(portalinfo.pos.x, portalinfo.pos.y, portalinfo.pos.z, portalinfo.yRot, portalinfo.xRot);
+               setDeltaMovement(portalinfo.speed);
+               return this;
             }
+            this.unRide();
+            // CraftBukkit end
+
+            final ServerLevel finalLevel = p_20118_; //Ketting
+
+            Entity transportedEntity = teleporter.placeEntity(this, (ServerLevel) this.level, finalLevel, this.yRot, spawnPortal -> { //Forge: Start vanilla logic
+               this.level().getProfiler().popPush("reloading");
+               Entity entity = this.getType().create(finalLevel);
+               if (entity != null) {
+                  entity.restoreFrom(this);
+                  entity.moveTo(portalinfo.pos.x, portalinfo.pos.y, portalinfo.pos.z, portalinfo.yRot, entity.getXRot());
+                  entity.setDeltaMovement(portalinfo.speed);
+                  finalLevel.addDuringTeleport(entity);
+                  if (spawnPortal && finalLevel.getTypeKey() == net.minecraft.world.level.dimension.LevelStem.END) { // CraftBukkit
+                     ServerLevel.makeObsidianPlatform(finalLevel, this); // CraftBukkit
+                  }
+
+                  // CraftBukkit start - Forward the org.bukkit.craftbukkit.v1_20_R2.entity.CraftEntity to the new entity
+                  this.getBukkitEntity().setHandle(entity);
+                  entity.bukkitEntity = this.getBukkitEntity();
+
+                  if (this instanceof Mob) {
+                     ((Mob) this).dropLeash(true, false); // Unleash to prevent duping of leads.
+                  }
+                  // CraftBukkit end
+               }
+               return entity;
+            }); //Forge: End vanilla logic
 
             this.removeAfterChangingDimensions();
             this.level().getProfiler().pop();
             ((ServerLevel)this.level()).resetEmptyTime();
-            p_20118_.resetEmptyTime();
+            finalLevel.resetEmptyTime();
             this.level().getProfiler().pop();
-            return entity;
+            return transportedEntity;
          }
       } else {
          return null;
@@ -2486,17 +_,34 @@
 
    @Nullable
    protected PortalInfo findDimensionEntryPoint(ServerLevel p_19923_) {
-      boolean flag = this.level().dimension() == Level.END && p_19923_.dimension() == Level.OVERWORLD;
-      boolean flag1 = p_19923_.dimension() == Level.END;
+      // CraftBukkit start
+      if (p_19923_ == null) {
+         return null;
+      }
+      boolean flag = this.level().getTypeKey() == net.minecraft.world.level.dimension.LevelStem.END && p_19923_.getTypeKey() == net.minecraft.world.level.dimension.LevelStem.OVERWORLD; // fromEndToOverworld
+      boolean flag1 = p_19923_.getTypeKey() == net.minecraft.world.level.dimension.LevelStem.END; // targetIsEnd
+      // CraftBukkit end
+
       if (!flag && !flag1) {
-         boolean flag2 = p_19923_.dimension() == Level.NETHER;
-         if (this.level().dimension() != Level.NETHER && !flag2) {
+         boolean flag2 = p_19923_.getTypeKey() == net.minecraft.world.level.dimension.LevelStem.NETHER; // CraftBukkit
+
+         if (this.level().getTypeKey() != net.minecraft.world.level.dimension.LevelStem.NETHER && !flag2) { // CraftBukkit
             return null;
          } else {
             WorldBorder worldborder = p_19923_.getWorldBorder();
             double d0 = DimensionType.getTeleportationScale(this.level().dimensionType(), p_19923_.dimensionType());
             BlockPos blockpos1 = worldborder.clampToBounds(this.getX() * d0, this.getY(), this.getZ() * d0);
-            return this.getExitPortal(p_19923_, blockpos1, flag2, worldborder).map((p_258249_) -> {
+            // CraftBukkit start
+            org.bukkit.craftbukkit.v1_20_R2.event.CraftPortalEvent event = callPortalEvent(this, p_19923_, new Vec3(blockpos1.getX(), blockpos1.getY(), blockpos1.getZ()), org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.NETHER_PORTAL, flag2 ? 16 : 128, 16);
+            if (event == null) {
+               return null;
+            }
+            final ServerLevel worldserverFinal = p_19923_ = ((org.bukkit.craftbukkit.v1_20_R2.CraftWorld) event.getTo().getWorld()).getHandle();
+            worldborder = worldserverFinal.getWorldBorder();
+            blockpos1 = worldborder.clampToBounds(event.getTo().getX(), event.getTo().getY(), event.getTo().getZ());
+
+            return this.getExitPortal(p_19923_, blockpos1, flag2, worldborder, event.getSearchRadius(), event.getCanCreatePortal(), event.getCreationRadius()).map((p_258249_) -> {
+               // CraftBukkit end
                BlockState blockstate = this.level().getBlockState(this.portalEntrancePos);
                Direction.Axis direction$axis;
                Vec3 vec3;
@@ -2511,8 +_,8 @@
                   vec3 = new Vec3(0.5D, 0.0D, 0.0D);
                }
 
-               return PortalShape.createPortalInfo(p_19923_, p_258249_, direction$axis, vec3, this, this.getDeltaMovement(), this.getYRot(), this.getXRot());
-            }).orElse((PortalInfo)null);
+               return PortalShape.createPortalInfo(worldserverFinal, p_258249_, direction$axis, vec3, this, this.getDeltaMovement(), this.getYRot(), this.getXRot(), event); // CraftBukkit
+            }).orElse(null);
          }
       } else {
          BlockPos blockpos;
@@ -2522,7 +_,14 @@
             blockpos = p_19923_.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, p_19923_.getSharedSpawnPos());
          }
 
-         return new PortalInfo(new Vec3((double)blockpos.getX() + 0.5D, (double)blockpos.getY(), (double)blockpos.getZ() + 0.5D), this.getDeltaMovement(), this.getYRot(), this.getXRot());
+         // CraftBukkit start
+         org.bukkit.craftbukkit.v1_20_R2.event.CraftPortalEvent event = callPortalEvent(this, p_19923_, new Vec3(blockpos.getX() + 0.5D, blockpos.getY(), blockpos.getZ() + 0.5D), org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.END_PORTAL, 0, 0);
+         if (event == null) {
+            return null;
+         }
+
+         return new PortalInfo(new Vec3(event.getTo().getX(), event.getTo().getY(), event.getTo().getZ()), this.getDeltaMovement(), this.getYRot(), this.getXRot(), ((org.bukkit.craftbukkit.v1_20_R2.CraftWorld) event.getTo().getWorld()).getHandle(), event);
+         // CraftBukkit end
       }
    }
 
@@ -2530,8 +_,23 @@
       return PortalShape.getRelativePosition(p_20046_, p_20045_, this.position(), this.getDimensions(this.getPose()));
    }
 
-   protected Optional<BlockUtil.FoundRectangle> getExitPortal(ServerLevel p_185935_, BlockPos p_185936_, boolean p_185937_, WorldBorder p_185938_) {
-      return p_185935_.getPortalForcer().findPortalAround(p_185936_, p_185937_, p_185938_);
+   // CraftBukkit start
+   protected org.bukkit.craftbukkit.v1_20_R2.event.CraftPortalEvent callPortalEvent(Entity entity, ServerLevel exitWorldServer, Vec3 exitPosition, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause, int searchRadius, int creationRadius) {
+      org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
+      org.bukkit.Location enter = bukkitEntity.getLocation();
+      org.bukkit.Location exit = org.bukkit.craftbukkit.v1_20_R2.util.CraftLocation.toBukkit(exitPosition, exitWorldServer.getWorld());
+
+      EntityPortalEvent event = new EntityPortalEvent(bukkitEntity, enter, exit, searchRadius);
+      event.getEntity().getServer().getPluginManager().callEvent(event);
+      if (event.isCancelled() || event.getTo() == null || event.getTo().getWorld() == null || !entity.isAlive()) {
+         return null;
+      }
+      return new org.bukkit.craftbukkit.v1_20_R2.event.CraftPortalEvent(event);
+   }
+
+   protected Optional<BlockUtil.FoundRectangle> getExitPortal(ServerLevel p_185935_, BlockPos p_185936_, boolean p_185937_, WorldBorder p_185938_, int searchRadius, boolean canCreatePortal, int createRadius) {
+      return p_185935_.getPortalForcer().findPortalAround(p_185936_, p_185938_, searchRadius);
+      // CraftBukkit end
    }
 
    public boolean canChangeDimensions() {
@@ -2595,6 +_,7 @@
       return this.stringUUID;
    }
 
+   @Deprecated // Forge: Use FluidType sensitive version
    public boolean isPushedByFluid() {
       return true;
    }
@@ -2643,6 +_,12 @@
       }
    }
 
+   // CraftBukkit start
+   public boolean teleportTo(ServerLevel worldserver, double d0, double d1, double d2, Set<RelativeMovement> set, float f, float f1, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+      return this.teleportTo(worldserver, d0, d1, d2, set, f, f1);
+   }
+   // CraftBukkit end
+
    public boolean teleportTo(ServerLevel p_265257_, double p_265407_, double p_265727_, double p_265410_, Set<RelativeMovement> p_265083_, float p_265573_, float p_265094_) {
       float f = Mth.clamp(p_265094_, -90.0F, 90.0F);
       if (p_265257_ == this.level()) {
@@ -2758,7 +_,26 @@
    }
 
    public final void setBoundingBox(AABB p_20012_) {
-      this.bb = p_20012_;
+      // CraftBukkit start - block invalid bounding boxes
+      double minX = p_20012_.minX,
+              minY = p_20012_.minY,
+              minZ = p_20012_.minZ,
+              maxX = p_20012_.maxX,
+              maxY = p_20012_.maxY,
+              maxZ = p_20012_.maxZ;
+      double len = p_20012_.maxX - p_20012_.minX;
+      if (len < 0) maxX = minX;
+      if (len > 64) maxX = minX + 64.0;
+
+      len = p_20012_.maxY - p_20012_.minY;
+      if (len < 0) maxY = minY;
+      if (len > 64) maxY = minY + 64.0;
+
+      len = p_20012_.maxZ - p_20012_.minZ;
+      if (len < 0) maxZ = minZ;
+      if (len > 64) maxZ = minZ + 64.0;
+      this.bb = new AABB(minX, minY, minZ, maxX, maxY, maxZ);
+      // CraftBukkit end
    }
 
    protected float getEyeHeight(Pose p_19976_, EntityDimensions p_19977_) {
@@ -3010,9 +_,22 @@
       this.yRotO = this.getYRot();
    }
 
+   @Deprecated // Forge: Use predicate version instead, only for vanilla Tags
    public boolean updateFluidHeightAndDoFluidPushing(TagKey<Fluid> p_204032_, double p_204033_) {
+      this.updateFluidHeightAndDoFluidPushing();
+      if(p_204032_ == FluidTags.WATER) return this.isInFluidType(net.minecraftforge.common.ForgeMod.WATER_TYPE.get());
+      else if (p_204032_ == FluidTags.LAVA) return this.isInFluidType(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
+      else return false;
+   }
+
+   @Deprecated(forRemoval = true, since = "1.20.1")
+   public void updateFluidHeightAndDoFluidPushing() {
+      this.updateFluidHeightAndDoFluidPushing(com.google.common.base.Predicates.alwaysTrue());
+   }
+
+   public void updateFluidHeightAndDoFluidPushing(Predicate<FluidState> shouldUpdate) {
       if (this.touchingUnloadedChunk()) {
-         return false;
+         return;
       } else {
          AABB aabb = this.getBoundingBox().deflate(0.001D);
          int i = Mth.floor(aabb.minX);
@@ -3027,53 +_,63 @@
          Vec3 vec3 = Vec3.ZERO;
          int k1 = 0;
          BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
+         it.unimi.dsi.fastutil.objects.Object2ObjectMap<net.minecraftforge.fluids.FluidType, org.apache.commons.lang3.tuple.MutableTriple<Double, Vec3, Integer>> interimCalcs = new it.unimi.dsi.fastutil.objects.Object2ObjectArrayMap<>(net.minecraftforge.fluids.FluidType.SIZE.get() - 1);
 
          for(int l1 = i; l1 < j; ++l1) {
             for(int i2 = k; i2 < l; ++i2) {
                for(int j2 = i1; j2 < j1; ++j2) {
                   blockpos$mutableblockpos.set(l1, i2, j2);
                   FluidState fluidstate = this.level().getFluidState(blockpos$mutableblockpos);
-                  if (fluidstate.is(p_204032_)) {
+                  net.minecraftforge.fluids.FluidType fluidType = fluidstate.getFluidType();
+                  if (!fluidType.isAir() && shouldUpdate.test(fluidstate)) {
                      double d1 = (double)((float)i2 + fluidstate.getHeight(this.level(), blockpos$mutableblockpos));
                      if (d1 >= aabb.minY) {
                         flag1 = true;
-                        d0 = Math.max(d1 - aabb.minY, d0);
-                        if (flag) {
+                        org.apache.commons.lang3.tuple.MutableTriple<Double, Vec3, Integer> interim = interimCalcs.computeIfAbsent(fluidType, t -> org.apache.commons.lang3.tuple.MutableTriple.of(0.0D, Vec3.ZERO, 0));
+                        interim.setLeft(Math.max(d1 - aabb.minY, interim.getLeft()));
+                        if (this.isPushedByFluid(fluidType)) {
                            Vec3 vec31 = fluidstate.getFlow(this.level(), blockpos$mutableblockpos);
-                           if (d0 < 0.4D) {
-                              vec31 = vec31.scale(d0);
+                           if (interim.getLeft() < 0.4D) {
+                              vec31 = vec31.scale(interim.getLeft());
                            }
 
-                           vec3 = vec3.add(vec31);
-                           ++k1;
-                        }
+                           interim.setMiddle(interim.getMiddle().add(vec31));
+                           interim.setRight(interim.getRight() + 1);
+                        }
+
+                        // CraftBukkit start - store last lava contact location
+                        if (fluidstate.is(FluidTags.LAVA)) {
+                           this.lastLavaContact = blockpos$mutableblockpos.immutable();
+                        }
+                        // CraftBukkit end
                      }
                   }
                }
             }
          }
 
-         if (vec3.length() > 0.0D) {
-            if (k1 > 0) {
-               vec3 = vec3.scale(1.0D / (double)k1);
+         interimCalcs.forEach((fluidType, interim) -> {
+         if (interim.getMiddle().length() > 0.0D) {
+            if (interim.getRight() > 0) {
+               interim.setMiddle(interim.getMiddle().scale(1.0D / (double)interim.getRight()));
             }
 
             if (!(this instanceof Player)) {
-               vec3 = vec3.normalize();
+               interim.setMiddle(interim.getMiddle().normalize());
             }
 
             Vec3 vec32 = this.getDeltaMovement();
-            vec3 = vec3.scale(p_204033_ * 1.0D);
+            interim.setMiddle(interim.getMiddle().scale(this.getFluidMotionScale(fluidType)));
             double d2 = 0.003D;
-            if (Math.abs(vec32.x) < 0.003D && Math.abs(vec32.z) < 0.003D && vec3.length() < 0.0045000000000000005D) {
-               vec3 = vec3.normalize().scale(0.0045000000000000005D);
+            if (Math.abs(vec32.x) < 0.003D && Math.abs(vec32.z) < 0.003D && interim.getMiddle().length() < 0.0045000000000000005D) {
+               interim.setMiddle(interim.getMiddle().normalize().scale(0.0045000000000000005D));
             }
 
-            this.setDeltaMovement(this.getDeltaMovement().add(vec3));
+            this.setDeltaMovement(this.getDeltaMovement().add(interim.getMiddle()));
          }
 
-         this.fluidHeight.put(p_204032_, d0);
-         return flag1;
+         this.setFluidTypeHeight(fluidType, interim.getLeft());
+         });
       }
    }
 
@@ -3086,7 +_,10 @@
       return !this.level().hasChunksAt(i, k, j, l);
    }
 
+   @Deprecated // Forge: Use getFluidTypeHeight instead
    public double getFluidHeight(TagKey<Fluid> p_204037_) {
+      if (p_204037_ == FluidTags.WATER) return getFluidTypeHeight(net.minecraftforge.common.ForgeMod.WATER_TYPE.get());
+      else if (p_204037_ == FluidTags.LAVA) return getFluidTypeHeight(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
       return this.fluidHeight.getDouble(p_204037_);
    }
 
@@ -3106,7 +_,9 @@
       return this.getBbHeight() + 0.5F;
    }
 
+   private boolean hasExtraSpawnData = this instanceof net.minecraftforge.entity.IEntityAdditionalSpawnData;
    public Packet<ClientGamePacketListener> getAddEntityPacket() {
+      if (hasExtraSpawnData) return net.minecraftforge.common.ForgeHooks.getEntitySpawnPacket(this);
       return new ClientboundAddEntityPacket(this);
    }
 
@@ -3222,6 +_,7 @@
 
          this.levelCallback.onMove();
       }
+      if (this.isAddedToWorld() && !this.level.isClientSide && !this.isRemoved()) this.level.getChunk((int) Math.floor(p_20344_) >> 4, (int) Math.floor(p_20346_) >> 4); // Forge - ensure target chunk is loaded.
 
    }
 
@@ -3294,6 +_,7 @@
       return false;
    }
 
+   @Deprecated /** Forge: Use {@link net.minecraftforge.common.extensions.IForgeEntity#getStepHeight()} */
    public float maxUpStep() {
       return this.maxUpStep;
    }
@@ -3349,6 +_,109 @@
    public boolean mayInteract(Level p_146843_, BlockPos p_146844_) {
       return true;
    }
+
+   /* ================================== Forge Start =====================================*/
+
+   private boolean canUpdate = true;
+   @Override
+   public void canUpdate(boolean value) {
+      this.canUpdate = value;
+   }
+   @Override
+   public boolean canUpdate() {
+      return this.canUpdate;
+   }
+   private java.util.Collection<ItemEntity> captureDrops = null;
+   @Override
+   public java.util.Collection<ItemEntity> captureDrops() {
+      return captureDrops;
+   }
+   @Override
+   public java.util.Collection<ItemEntity> captureDrops(java.util.Collection<ItemEntity> value) {
+      java.util.Collection<ItemEntity> ret = captureDrops;
+      this.captureDrops = value;
+      return ret;
+   }
+   private CompoundTag persistentData;
+   @Override
+   public CompoundTag getPersistentData() {
+      if (persistentData == null)
+         persistentData = new CompoundTag();
+      return persistentData;
+   }
+   @Override
+   public boolean canTrample(BlockState state, BlockPos pos, float fallDistance) {
+      return level.random.nextFloat() < fallDistance - 0.5F
+          && this instanceof LivingEntity
+          && (this instanceof Player || net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(level, this))
+          && this.getBbWidth() * this.getBbWidth() * this.getBbHeight() > 0.512F;
+   }
+
+   /**
+    * Internal use for keeping track of entities that are tracked by a world, to
+    * allow guarantees that entity position changes will force a chunk load, avoiding
+    * potential issues with entity desyncing and bad chunk data.
+    */
+   private boolean isAddedToWorld;
+
+   @Override
+   public final boolean isAddedToWorld() { return this.isAddedToWorld; }
+
+   @Override
+   public void onAddedToWorld() { this.isAddedToWorld = true; }
+
+   @Override
+   public void onRemovedFromWorld() { this.isAddedToWorld = false; }
+
+   @Override
+   public void revive() {
+      this.unsetRemoved();
+      this.reviveCaps();
+   }
+
+   // no AT because of overrides
+   /**
+    * Accessor method for {@link #getEyeHeight(Pose, EntityDimensions)}
+    */
+   @Deprecated(forRemoval = true, since = "1.20.1") // Remove Entity Eye/Size hooks, as they need to be redesigned
+   public float getEyeHeightAccess(Pose pose, EntityDimensions size) {
+      return this.getEyeHeight(pose, size);
+   }
+
+   protected Object2DoubleMap<net.minecraftforge.fluids.FluidType> forgeFluidTypeHeight = new Object2DoubleArrayMap<>(net.minecraftforge.fluids.FluidType.SIZE.get());
+   private net.minecraftforge.fluids.FluidType forgeFluidTypeOnEyes = net.minecraftforge.common.ForgeMod.EMPTY_TYPE.get();
+   protected final void setFluidTypeHeight(net.minecraftforge.fluids.FluidType type, double height) {
+      this.forgeFluidTypeHeight.put(type, height);
+   }
+   @Override
+   public final double getFluidTypeHeight(net.minecraftforge.fluids.FluidType type) {
+      return this.forgeFluidTypeHeight.getDouble(type);
+   }
+   @Override
+   public final boolean isInFluidType(java.util.function.BiPredicate<net.minecraftforge.fluids.FluidType, Double> predicate, boolean forAllTypes) {
+      return forAllTypes ? this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().allMatch(e -> predicate.test(e.getKey(), e.getDoubleValue()))
+              : this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().anyMatch(e -> predicate.test(e.getKey(), e.getDoubleValue()));
+   }
+   @Override
+   public final boolean isInFluidType() {
+      return this.forgeFluidTypeHeight.size() > 0;
+   }
+  @Override
+  public final net.minecraftforge.fluids.FluidType getEyeInFluidType() {
+      return forgeFluidTypeOnEyes;
+   }
+   @Override
+   public net.minecraftforge.fluids.FluidType getMaxHeightFluidType() {
+      return this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().max(java.util.Comparator.comparingDouble(Object2DoubleMap.Entry::getDoubleValue)).map(Object2DoubleMap.Entry::getKey).orElseGet(net.minecraftforge.common.ForgeMod.EMPTY_TYPE);
+   }
+
+   @Deprecated(forRemoval = true, since = "1.20.1") // Remove Entity Eye/Size hooks, as they need to be redesigned
+   public EntityDimensions getDimensionsForge(Pose pose) {
+       return getDimensions(pose);
+   }
+
+   /* ================================== Forge End =====================================*/
+
 
    public Level level() {
       return this.level;
