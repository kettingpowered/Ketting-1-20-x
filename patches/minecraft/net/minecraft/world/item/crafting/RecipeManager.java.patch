--- a/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/net/minecraft/world/item/crafting/RecipeManager.java
@@ -37,27 +_,47 @@
 public class RecipeManager extends SimpleJsonResourceReloadListener {
    private static final Gson GSON = (new GsonBuilder()).setPrettyPrinting().disableHtmlEscaping().create();
    private static final Logger LOGGER = LogUtils.getLogger();
-   private Map<RecipeType<?>, Map<ResourceLocation, RecipeHolder<?>>> recipes = ImmutableMap.of();
+   public Map<RecipeType<?>, it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<ResourceLocation, RecipeHolder<?>>> recipes = ImmutableMap.of(); // CraftBukkit
    private Map<ResourceLocation, RecipeHolder<?>> byName = ImmutableMap.of();
    private boolean hasErrors;
+   private final net.minecraftforge.common.crafting.conditions.ICondition.IContext context; //Forge: add context
 
+   /** @deprecated Forge: use {@linkplain RecipeManager#RecipeManager(net.minecraftforge.common.crafting.conditions.ICondition.IContext) constructor with context}. */
+   @Deprecated
    public RecipeManager() {
+      this(net.minecraftforge.common.crafting.conditions.ICondition.IContext.EMPTY);
+   }
+
+   public RecipeManager(net.minecraftforge.common.crafting.conditions.ICondition.IContext context) {
       super(GSON, "recipes");
+      this.context = context;
    }
 
    protected void apply(Map<ResourceLocation, JsonElement> p_44037_, ResourceManager p_44038_, ProfilerFiller p_44039_) {
       this.hasErrors = false;
-      Map<RecipeType<?>, ImmutableMap.Builder<ResourceLocation, RecipeHolder<?>>> map = Maps.newHashMap();
+      // CraftBukkit start - SPIGOT-5667 make sure all types are populated and mutable
+      Map<RecipeType<?>, it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<ResourceLocation, RecipeHolder<?>>> map = Maps.newHashMap();
+      for (RecipeType<?> recipeType : BuiltInRegistries.RECIPE_TYPE) {
+         map.put(recipeType, new it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<>());
+      }
+      // CraftBukkit end
       ImmutableMap.Builder<ResourceLocation, RecipeHolder<?>> builder = ImmutableMap.builder();
 
       for(Map.Entry<ResourceLocation, JsonElement> entry : p_44037_.entrySet()) {
          ResourceLocation resourcelocation = entry.getKey();
+         if (resourcelocation.getPath().startsWith("_")) continue; //Forge: filter anything beginning with "_" as it's used for metadata.
 
          try {
+            if (entry.getValue().isJsonObject() && !net.minecraftforge.common.ForgeHooks.readAndTestCondition(this.context, entry.getValue().getAsJsonObject())) {
+               LOGGER.debug("Skipping loading recipe {} as it's conditions were not met", resourcelocation);
+               continue;
+            }
             RecipeHolder<?> recipeholder = fromJson(resourcelocation, GsonHelper.convertToJsonObject(entry.getValue(), "top element"));
-            map.computeIfAbsent(recipeholder.value().getType(), (p_44075_) -> {
-               return ImmutableMap.builder();
-            }).put(resourcelocation, recipeholder);
+            // CraftBukkit start
+            (map.computeIfAbsent(recipeholder.value().getType(), (recipes) -> {
+               return new it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<>();
+               // CraftBukkit end
+            })).put(resourcelocation, recipeholder);
             builder.put(resourcelocation, recipeholder);
          } catch (IllegalArgumentException | JsonParseException jsonparseexception) {
             LOGGER.error("Parsing error loading recipe {}", resourcelocation, jsonparseexception);
@@ -65,20 +_,38 @@
       }
 
       this.recipes = map.entrySet().stream().collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, (p_44033_) -> {
-         return p_44033_.getValue().build();
+         return (p_44033_.getValue()); // CraftBukkit
       }));
-      this.byName = builder.build();
+      this.byName = Maps.newHashMap(builder.build()); // CraftBukkit
       LOGGER.info("Loaded {} recipes", (int)map.size());
    }
 
+   // CraftBukkit start
+   public void addRecipe(RecipeHolder<?> irecipe) {
+      org.spigotmc.AsyncCatcher.catchOp("Recipe Add"); // Spigot
+      it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<ResourceLocation, RecipeHolder<?>> map = this.recipes.get(irecipe.value().getType()); // CraftBukkit
+
+      if (byName.containsKey(irecipe.id()) || map.containsKey(irecipe.id())) {
+         throw new IllegalStateException("Duplicate recipe ignored with ID " + irecipe.id());
+      } else {
+         map.putAndMoveToFirst(irecipe.id(), irecipe); // CraftBukkit - SPIGOT-4638: last recipe gets priority
+         byName.put(irecipe.id(), irecipe);
+      }
+   }
+   // CraftBukkit end
+
    public boolean hadErrorsLoading() {
       return this.hasErrors;
    }
 
    public <C extends Container, T extends Recipe<C>> Optional<RecipeHolder<T>> getRecipeFor(RecipeType<T> p_44016_, C p_44017_, Level p_44018_) {
-      return this.byType(p_44016_).values().stream().filter((p_296918_) -> {
+      // CraftBukkit start
+      Optional<RecipeHolder<T>> recipe = this.byType(p_44016_).values().stream().filter((p_296918_) -> {
          return p_296918_.value().matches(p_44017_, p_44018_);
       }).findFirst();
+      p_44017_.setCurrentRecipe(recipe.orElse(null)); // CraftBukkit - Clear recipe when no recipe is found
+      return recipe;
+      // CraftBukkit end
    }
 
    public <C extends Container, T extends Recipe<C>> Optional<Pair<ResourceLocation, RecipeHolder<T>>> getRecipeFor(RecipeType<T> p_220249_, C p_220250_, Level p_220251_, @Nullable ResourceLocation p_220252_) {
@@ -110,7 +_,7 @@
    }
 
    private <C extends Container, T extends Recipe<C>> Map<ResourceLocation, RecipeHolder<T>> byType(RecipeType<T> p_44055_) {
-      return (Map<ResourceLocation, RecipeHolder<T>>)(Map)this.recipes.getOrDefault(p_44055_, Collections.emptyMap());
+      return (Map) this.recipes.getOrDefault(p_44055_, new it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<>()); // CraftBukkit
    }
 
    public <C extends Container, T extends Recipe<C>> NonNullList<ItemStack> getRemainingItemsFor(RecipeType<T> p_44070_, C p_44071_, Level p_44072_) {
@@ -155,11 +_,11 @@
 
    public void replaceRecipes(Iterable<RecipeHolder<?>> p_44025_) {
       this.hasErrors = false;
-      Map<RecipeType<?>, Map<ResourceLocation, RecipeHolder<?>>> map = Maps.newHashMap();
+      Map<RecipeType<?>, it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<ResourceLocation, RecipeHolder<?>>> map = Maps.newHashMap(); // CraftBukkit
       ImmutableMap.Builder<ResourceLocation, RecipeHolder<?>> builder = ImmutableMap.builder();
       p_44025_.forEach((p_296915_) -> {
          Map<ResourceLocation, RecipeHolder<?>> map1 = map.computeIfAbsent(p_296915_.value().getType(), (p_220272_) -> {
-            return Maps.newHashMap();
+            return new it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<>(); // CraftBukkit
          });
          ResourceLocation resourcelocation = p_296915_.id();
          RecipeHolder<?> recipeholder = map1.put(resourcelocation, p_296915_);
@@ -169,8 +_,28 @@
          }
       });
       this.recipes = ImmutableMap.copyOf(map);
-      this.byName = builder.build();
-   }
+      this.byName = Maps.newHashMap(builder.build()); // CraftBukkit
+   }
+
+   // CraftBukkit start
+   public boolean removeRecipe(ResourceLocation resourceLocation) {
+      for (it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<ResourceLocation, RecipeHolder<?>> recipes : recipes.values()) {
+         recipes.remove(resourceLocation);
+      }
+
+      return byName.remove(resourceLocation) != null;
+   }
+
+   public void clearRecipes() {
+      this.recipes = Maps.newHashMap();
+
+      for (RecipeType<?> recipeType : BuiltInRegistries.RECIPE_TYPE) {
+         this.recipes.put(recipeType, new it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<>());
+      }
+
+      this.byName = Maps.newHashMap();
+   }
+   // CraftBukkit end
 
    public static <C extends Container, T extends Recipe<C>> RecipeManager.CachedCheck<C, T> createCheck(final RecipeType<T> p_220268_) {
       return new RecipeManager.CachedCheck<C, T>() {
