--- a/net/minecraft/world/item/ItemStack.java
+++ b/net/minecraft/world/item/ItemStack.java
@@ -76,12 +_,16 @@
 import net.minecraft.world.level.block.state.pattern.BlockInWorld;
 import org.slf4j.Logger;
 
-public final class ItemStack {
+public final class ItemStack extends net.minecraftforge.common.capabilities.CapabilityProvider<ItemStack> implements net.minecraftforge.common.extensions.IForgeItemStack {
    public static final Codec<ItemStack> CODEC = RecordCodecBuilder.create((p_258963_) -> {
       return p_258963_.group(BuiltInRegistries.ITEM.byNameCodec().fieldOf("id").forGetter(ItemStack::getItem), Codec.INT.fieldOf("Count").forGetter(ItemStack::getCount), CompoundTag.CODEC.optionalFieldOf("tag").forGetter((p_281115_) -> {
          return Optional.ofNullable(p_281115_.getTag());
       })).apply(p_258963_, ItemStack::new);
    });
+   @org.jetbrains.annotations.Nullable
+   private net.minecraft.core.Holder.Reference<Item> delegate;
+   private CompoundTag capNBT;
+
    private static final Logger LOGGER = LogUtils.getLogger();
    public static final ItemStack EMPTY = new ItemStack((Void)null);
    public static final DecimalFormat ATTRIBUTE_MODIFIER_FORMAT = Util.make(new DecimalFormat("#.##"), (p_41704_) -> {
@@ -106,7 +_,7 @@
    /** @deprecated */
    @Deprecated
    @Nullable
-   private final Item item;
+   private Item item;
    @Nullable
    private CompoundTag tag;
    @Nullable
@@ -120,6 +_,23 @@
       return this.getItem().getTooltipImage(this);
    }
 
+   //Ketting start
+   public ItemStack(Class<ItemStack> baseClass) {
+      super(baseClass);
+   }
+
+   public CompoundTag getForgeCaps() {
+      return this.serializeCaps();
+   }
+
+   public void setForgeCaps(CompoundTag caps) {
+      this.capNBT = caps;
+      if (caps != null) {
+         this.deserializeCaps(caps);
+      }
+   }
+   //Ketting end
+
    public ItemStack(ItemLike p_41599_) {
       this(p_41599_, 1);
    }
@@ -138,30 +_,67 @@
    }
 
    public ItemStack(ItemLike p_41601_, int p_41602_) {
-      this.item = p_41601_.asItem();
-      this.count = p_41602_;
-      if (this.item.canBeDepleted()) {
+      this(p_41601_, p_41602_, (CompoundTag) null);
+   }
+
+   public ItemStack(ItemLike p_41604_, int p_41605_, @Nullable CompoundTag p_41606_) {
+      super(ItemStack.class, true);
+      this.capNBT = p_41606_;
+      this.item = p_41604_.asItem();
+      this.delegate = net.minecraftforge.registries.ForgeRegistries.ITEMS.getDelegateOrThrow(p_41604_.asItem());
+      this.count = p_41605_;
+      this.forgeInit();
+      if (this.item.isDamageable(this)) {
          this.setDamageValue(this.getDamageValue());
       }
 
    }
 
    private ItemStack(@Nullable Void p_282703_) {
+      super(ItemStack.class, true);
       this.item = null;
-   }
-
-   private ItemStack(CompoundTag p_41608_) {
-      this.item = BuiltInRegistries.ITEM.get(new ResourceLocation(p_41608_.getString("id")));
-      this.count = p_41608_.getByte("Count");
-      if (p_41608_.contains("tag", 10)) {
-         this.tag = p_41608_.getCompound("tag");
+      this.delegate = null;
+   }
+
+   // Called to run this stack through the data converter to handle older storage methods and serialized items
+   public void convertStack(int version) {
+      if (0 < version && version < org.bukkit.craftbukkit.v1_20_R2.util.CraftMagicNumbers.INSTANCE.getDataVersion()) {
+         /* org.kettingpowered.ketting.core.Ketting start
+         CompoundTag savedStack = new CompoundTag();
+         this.save(savedStack);
+         savedStack = (CompoundTag) net.minecraft.server.MinecraftServer.getServer().fixerUpper.update(net.minecraft.util.datafix.fixes.References.ITEM_STACK, new com.mojang.serialization.Dynamic(net.minecraft.nbt.NbtOps.INSTANCE, savedStack), version, org.bukkit.craftbukkit.v1_20_R2.util.CraftMagicNumbers.INSTANCE.getDataVersion()).getValue();
+         this.load(savedStack);
+         */
+         org.kettingpowered.ketting.core.Ketting.LOGGER.warn("Legacy ItemStack being used, updates will not applied: {}", this);
+         //Ketting end
+      }
+   }
+
+   // CraftBukkit - break into own method
+   private void load(CompoundTag tag) {
+      this.capNBT = tag.contains("ForgeCaps") ? tag.getCompound("ForgeCaps") : null;
+      Item rawItem =
+      this.item = BuiltInRegistries.ITEM.get(new ResourceLocation(tag.getString("id")));
+      this.delegate = net.minecraftforge.registries.ForgeRegistries.ITEMS.getDelegateOrThrow(rawItem);
+      this.count = tag.getByte("Count");
+      if (tag.contains("tag", 10)) {
+         // CraftBukkit start - make defensive copy as this data may be coming from the save thread
+         this.tag = tag.getCompound("tag").copy();
+         // CraftBukkit end
          this.getItem().verifyTagAfterLoad(this.tag);
       }
 
-      if (this.getItem().canBeDepleted()) {
+      this.forgeInit();
+
+      if (this.getItem().isDamageable(this)) {
          this.setDamageValue(this.getDamageValue());
       }
+   }
 
+   private ItemStack(CompoundTag p_41608_) {
+      super(ItemStack.class, true);
+      this.load(p_41608_);
+      // CraftBukkit end
    }
 
    public static ItemStack of(CompoundTag p_41713_) {
@@ -174,7 +_,7 @@
    }
 
    public boolean isEmpty() {
-      return this == EMPTY || this.item == Items.AIR || this.count <= 0;
+      return this == EMPTY || this.count <= 0 || this.delegate.get() == Items.AIR;
    }
 
    public boolean isItemEnabled(FeatureFlagSet p_250869_) {
@@ -199,7 +_,7 @@
    }
 
    public Item getItem() {
-      return this.isEmpty() ? Items.AIR : this.item;
+      return this.isEmpty() ? Items.AIR : this.delegate.get();
    }
 
    public Holder<Item> getItemHolder() {
@@ -231,6 +_,15 @@
    }
 
    public InteractionResult useOn(UseOnContext p_41662_) {
+      if (!p_41662_.getLevel().isClientSide) return net.minecraftforge.common.ForgeHooks.onPlaceItemIntoWorld(p_41662_);
+      return onItemUse(p_41662_, (c) -> getItem().useOn(p_41662_));
+   }
+
+   public InteractionResult onItemUseFirst(UseOnContext p_41662_) {
+      return onItemUse(p_41662_, (c) -> getItem().onItemUseFirst(this, p_41662_));
+   }
+
+   public InteractionResult onItemUse(UseOnContext p_41662_, java.util.function.Function<UseOnContext, InteractionResult> callback) {
       Player player = p_41662_.getPlayer();
       BlockPos blockpos = p_41662_.getClickedPos();
       BlockInWorld blockinworld = new BlockInWorld(p_41662_.getLevel(), blockpos, false);
@@ -238,10 +_,189 @@
          return InteractionResult.PASS;
       } else {
          Item item = this.getItem();
-         InteractionResult interactionresult = item.useOn(p_41662_);
+         // CraftBukkit start - handle all block place event logic here
+         CompoundTag oldData = this.getTagClone();
+         int oldCount = this.getCount();
+         net.minecraft.server.level.ServerLevel world = (net.minecraft.server.level.ServerLevel) p_41662_.getLevel();
+
+         if (!(item instanceof BucketItem || item instanceof SolidBucketItem)) { // if not bucket
+            world.captureBlockStates = true;
+            // special case bonemeal
+            if (item == Items.BONE_MEAL) {
+               world.captureTreeGeneration = true;
+            }
+         }
+
+         InteractionResult interactionresult;
+         try {
+            interactionresult = callback.apply(p_41662_);
+         } finally {
+            world.captureBlockStates = false;
+         }
+         CompoundTag newData = this.getTagClone();
+         int newCount = this.getCount();
+         this.setCount(oldCount);
+         this.setTagClone(oldData);
+         if (interactionresult.consumesAction() && world.captureTreeGeneration && world.capturedBlockStates.size() > 0) {
+            world.captureTreeGeneration = false;
+            org.bukkit.Location location = org.bukkit.craftbukkit.v1_20_R2.util.CraftLocation.toBukkit(blockpos, world.getWorld());
+            org.bukkit.TreeType treeType = net.minecraft.world.level.block.SaplingBlock.treeType;
+            net.minecraft.world.level.block.SaplingBlock.treeType = null;
+            List<org.bukkit.craftbukkit.v1_20_R2.block.CraftBlockState> blocks = new java.util.ArrayList<>(world.capturedBlockStates.values());
+            world.capturedBlockStates.clear();
+            org.bukkit.event.world.StructureGrowEvent structureEvent = null;
+            if (treeType != null) {
+               boolean isBonemeal = getItem() == Items.BONE_MEAL;
+               structureEvent = new org.bukkit.event.world.StructureGrowEvent(location, treeType, isBonemeal, (org.bukkit.entity.Player) player.getBukkitEntity(), (List) blocks);
+               org.bukkit.Bukkit.getPluginManager().callEvent(structureEvent);
+            }
+
+            org.bukkit.event.block.BlockFertilizeEvent fertilizeEvent = new org.bukkit.event.block.BlockFertilizeEvent(org.bukkit.craftbukkit.v1_20_R2.block.CraftBlock.at(world, blockpos), (org.bukkit.entity.Player) player.getBukkitEntity(), (List) blocks);
+            fertilizeEvent.setCancelled(structureEvent != null && structureEvent.isCancelled());
+            org.bukkit.Bukkit.getPluginManager().callEvent(fertilizeEvent);
+
+            if (!fertilizeEvent.isCancelled()) {
+               // Change the stack to its new contents if it hasn't been tampered with.
+               if (this.getCount() == oldCount && Objects.equals(this.tag, oldData)) {
+                  this.setTag(newData);
+                  this.setCount(newCount);
+               }
+               for (org.bukkit.craftbukkit.v1_20_R2.block.CraftBlockState blockstate : blocks) {
+                  world.setBlock(blockstate.getPosition(),blockstate.getHandle(), blockstate.getFlag()); // SPIGOT-7248 - manual update to avoid physics where appropriate
+               }
+               player.awardStat(Stats.ITEM_USED.get(item)); // SPIGOT-7236 - award stat
+            }
+
+            SignItem.openSign = null; // SPIGOT-6758 - Reset on early return
+            return interactionresult;
+         }
+         world.captureTreeGeneration = false;
+
          if (player != null && interactionresult.shouldAwardStats()) {
-            player.awardStat(Stats.ITEM_USED.get(item));
+            InteractionHand enumhand = p_41662_.getHand();
+            org.bukkit.event.block.BlockPlaceEvent placeEvent = null;
+            List<org.bukkit.block.BlockState> blocks = new java.util.ArrayList<>(world.capturedBlockStates.values());
+            world.capturedBlockStates.clear();
+            if (blocks.size() > 1) {
+               placeEvent = org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callBlockMultiPlaceEvent(world, player, enumhand, blocks, blockpos.getX(), blockpos.getY(), blockpos.getZ());
+            } else if (blocks.size() == 1) {
+               placeEvent = org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callBlockPlaceEvent(world, player, enumhand, blocks.get(0), blockpos.getX(), blockpos.getY(), blockpos.getZ());
+            }
+
+            if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild())) {
+               interactionresult = InteractionResult.FAIL;
+               // PAIL: Remove this when MC-99075 fixed
+               placeEvent.getPlayer().updateInventory();
+               // revert back all captured blocks
+               world.preventPoiUpdated = true; // CraftBukkit - SPIGOT-5710
+               for (org.bukkit.block.BlockState blockstate : blocks) {
+                  blockstate.update(true, false);
+               }
+               world.preventPoiUpdated = false;
+
+               // Brute force all possible updates
+               BlockPos placedPos = ((org.bukkit.craftbukkit.v1_20_R2.block.CraftBlock) placeEvent.getBlock()).getPosition();
+               for (net.minecraft.core.Direction dir : net.minecraft.core.Direction.values()) {
+                  ((ServerPlayer) player).connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(world, placedPos.relative(dir)));
+               }
+               SignItem.openSign = null; // SPIGOT-6758 - Reset on early return
+            } else {
+               // Change the stack to its new contents if it hasn't been tampered with.
+               if (this.getCount() == oldCount && Objects.equals(this.tag, oldData)) {
+                  this.setTag(newData);
+                  this.setCount(newCount);
+               }
+
+               for (Map.Entry<BlockPos, net.minecraft.world.level.block.entity.BlockEntity> e : world.capturedTileEntities.entrySet()) {
+                  world.setBlockEntity(e.getValue());
+               }
+
+               for (org.bukkit.block.BlockState blockstate : blocks) {
+                  int updateFlag = ((org.bukkit.craftbukkit.v1_20_R2.block.CraftBlockState) blockstate).getFlag();
+                  BlockState oldBlock = ((org.bukkit.craftbukkit.v1_20_R2.block.CraftBlockState) blockstate).getHandle();
+                  BlockPos newblockposition = ((org.bukkit.craftbukkit.v1_20_R2.block.CraftBlockState) blockstate).getPosition();
+                  BlockState block = world.getBlockState(newblockposition);
+
+                  if (!(block.getBlock() instanceof net.minecraft.world.level.block.BaseEntityBlock)) { // Containers get placed automatically
+                     block.getBlock().onPlace(block, world, newblockposition, oldBlock, true);
+                  }
+
+                  world.markAndNotifyBlock(newblockposition, null, oldBlock, block, updateFlag, 512); // send null chunk as chunk.k() returns false by this point
+               }
+
+               // Special case juke boxes as they update their tile entity. Copied from ItemRecord.
+               // PAIL: checkme on updates.
+               if (this.item instanceof RecordItem) {
+                  net.minecraft.world.level.block.entity.BlockEntity tileentity = world.getBlockEntity(blockpos);
+
+                  if (tileentity instanceof net.minecraft.world.level.block.entity.JukeboxBlockEntity jukebox) {
+                     // There can only be one
+                     ItemStack record = this.copy();
+                     if (!record.isEmpty()) {
+                        record.setCount(1);
+                     }
+
+                     jukebox.setFirstItem(record);
+                     world.gameEvent(net.minecraft.world.level.gameevent.GameEvent.BLOCK_CHANGE, blockpos, net.minecraft.world.level.gameevent.GameEvent.Context.of(player, world.getBlockState(blockpos)));
+                  }
+
+                  this.shrink(1);
+                  player.awardStat(Stats.PLAY_RECORD);
+               }
+
+               if (this.item == Items.WITHER_SKELETON_SKULL) { // Special case skulls to allow wither spawns to be cancelled
+                  BlockPos bp = blockpos;
+                  if (!world.getBlockState(blockpos).canBeReplaced()) {
+                     if (!world.getBlockState(blockpos).isSolid()) {
+                        bp = null;
+                     } else {
+                        bp = bp.relative(p_41662_.getClickedFace());
+                     }
+                  }
+                  if (bp != null) {
+                     net.minecraft.world.level.block.entity.BlockEntity te = world.getBlockEntity(bp);
+                     if (te instanceof net.minecraft.world.level.block.entity.SkullBlockEntity) {
+                        net.minecraft.world.level.block.WitherSkullBlock.checkSpawn(world, bp, (net.minecraft.world.level.block.entity.SkullBlockEntity) te);
+                     }
+                  }
+               }
+
+               // SPIGOT-4678
+               if (this.item instanceof SignItem && SignItem.openSign != null) {
+                  try {
+                     if (world.getBlockEntity(SignItem.openSign) instanceof net.minecraft.world.level.block.entity.SignBlockEntity tileentitysign) {
+                        if (world.getBlockState(SignItem.openSign).getBlock() instanceof net.minecraft.world.level.block.SignBlock blocksign) {
+                           blocksign.openTextEdit(player, tileentitysign, true, org.bukkit.event.player.PlayerSignOpenEvent.Cause.PLACE); // Craftbukkit
+                        }
+                     }
+                  } finally {
+                     SignItem.openSign = null;
+                  }
+               }
+
+               // SPIGOT-7315: Moved from BlockBed#setPlacedBy
+               if (placeEvent != null && this.item instanceof BedItem) {
+                  BlockPos position = ((org.bukkit.craftbukkit.v1_20_R2.block.CraftBlock) placeEvent.getBlock()).getPosition();
+                  BlockState blockData =  world.getBlockState(position);
+
+                  if (blockData.getBlock() instanceof net.minecraft.world.level.block.BedBlock) {
+                     world.blockUpdated(position, net.minecraft.world.level.block.Blocks.AIR);
+                     blockData.updateNeighbourShapes(world, position, 3);
+                  }
+               }
+
+               // SPIGOT-1288 - play sound stripped from ItemBlock
+               if (this.item instanceof BlockItem) {
+                  net.minecraft.world.level.block.SoundType soundeffecttype = ((BlockItem) this.item).getBlock().defaultBlockState().getSoundType(); // TODO: not strictly correct, however currently only affects decorated pots
+                  world.playSound(player, blockpos, soundeffecttype.getPlaceSound(), net.minecraft.sounds.SoundSource.BLOCKS, (soundeffecttype.getVolume() + 1.0F) / 2.0F, soundeffecttype.getPitch() * 0.8F);
+               }
+
+               player.awardStat(Stats.ITEM_USED.get(item));
+            }
          }
+         world.capturedTileEntities.clear();
+         world.capturedBlockStates.clear();
+         // CraftBukkit end
 
          return interactionresult;
       }
@@ -267,11 +_,15 @@
          p_41740_.put("tag", this.tag.copy());
       }
 
+      CompoundTag cnbt = this.serializeCaps();
+      if (cnbt != null && !cnbt.isEmpty()) {
+         p_41740_.put("ForgeCaps", cnbt);
+      }
       return p_41740_;
    }
 
    public int getMaxStackSize() {
-      return this.getItem().getMaxStackSize();
+      return this.getItem().getMaxStackSize(this);
    }
 
    public boolean isStackable() {
@@ -279,7 +_,7 @@
    }
 
    public boolean isDamageableItem() {
-      if (!this.isEmpty() && this.getItem().getMaxDamage() > 0) {
+      if (!this.isEmpty() && this.getItem().isDamageable(this)) {
          CompoundTag compoundtag = this.getTag();
          return compoundtag == null || !compoundtag.getBoolean("Unbreakable");
       } else {
@@ -288,19 +_,19 @@
    }
 
    public boolean isDamaged() {
-      return this.isDamageableItem() && this.getDamageValue() > 0;
+      return this.isDamageableItem() && getItem().isDamaged(this);
    }
 
    public int getDamageValue() {
-      return this.tag == null ? 0 : this.tag.getInt("Damage");
+      return this.getItem().getDamage(this);
    }
 
    public void setDamageValue(int p_41722_) {
-      this.getOrCreateTag().putInt("Damage", Math.max(0, p_41722_));
+      this.getItem().setDamage(this, p_41722_);
    }
 
    public int getMaxDamage() {
-      return this.getItem().getMaxDamage();
+      return this.getItem().getMaxDamage(this);
    }
 
    public boolean hurt(int p_220158_, RandomSource p_220159_, @Nullable ServerPlayer p_220160_) {
@@ -318,6 +_,21 @@
             }
 
             p_220158_ -= j;
+            // CraftBukkit start
+            if (p_220160_ != null) {
+               org.bukkit.event.player.PlayerItemDamageEvent event = new org.bukkit.event.player.PlayerItemDamageEvent(p_220160_.getBukkitEntity(), org.bukkit.craftbukkit.v1_20_R2.inventory.CraftItemStack.asCraftMirror(this), p_220158_);
+               event.getPlayer().getServer().getPluginManager().callEvent(event);
+
+               if (p_220158_ != event.getDamage() || event.isCancelled()) {
+                  event.getPlayer().updateInventory();
+               }
+               if (event.isCancelled()) {
+                  return false;
+               }
+
+               p_220158_ = event.getDamage();
+            }
+            // CraftBukkit end
             if (p_220158_ <= 0) {
                return false;
             }
@@ -336,9 +_,16 @@
    public <T extends LivingEntity> void hurtAndBreak(int p_41623_, T p_41624_, Consumer<T> p_41625_) {
       if (!p_41624_.level().isClientSide && (!(p_41624_ instanceof Player) || !((Player)p_41624_).getAbilities().instabuild)) {
          if (this.isDamageableItem()) {
+            p_41623_ = this.getItem().damageItem(this, p_41623_, p_41624_, p_41625_);
             if (this.hurt(p_41623_, p_41624_.getRandom(), p_41624_ instanceof ServerPlayer ? (ServerPlayer)p_41624_ : null)) {
                p_41625_.accept(p_41624_);
                Item item = this.getItem();
+               // CraftBukkit start - Check for item breaking
+               if (this.count == 1 && p_41624_ instanceof Player) {
+                  org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callPlayerItemBreakEvent((Player) p_41624_, this);
+               }
+               // CraftBukkit end
+
                this.shrink(1);
                if (p_41624_ instanceof Player) {
                   ((Player)p_41624_).awardStat(Stats.ITEM_BROKEN.get(item));
@@ -388,7 +_,7 @@
    }
 
    public boolean isCorrectToolForDrops(BlockState p_41736_) {
-      return this.getItem().isCorrectToolForDrops(p_41736_);
+      return this.getItem().isCorrectToolForDrops(this, p_41736_);
    }
 
    public InteractionResult interactLivingEntity(Player p_41648_, LivingEntity p_41649_, InteractionHand p_41650_) {
@@ -399,7 +_,7 @@
       if (this.isEmpty()) {
          return EMPTY;
       } else {
-         ItemStack itemstack = new ItemStack(this.getItem(), this.count);
+         ItemStack itemstack = new ItemStack(this.getItem(), this.count, this.serializeCaps());
          itemstack.setPopTime(this.getPopTime());
          if (this.tag != null) {
             itemstack.tag = this.tag.copy();
@@ -435,7 +_,7 @@
       if (!p_150943_.is(p_150944_.getItem())) {
          return false;
       } else {
-         return p_150943_.isEmpty() && p_150944_.isEmpty() ? true : Objects.equals(p_150943_.tag, p_150944_.tag);
+         return p_150943_.isEmpty() && p_150944_.isEmpty() ? true : Objects.equals(p_150943_.tag, p_150944_.tag) && p_150943_.areCapsCompatible(p_150944_);
       }
    }
 
@@ -488,6 +_,17 @@
       return this.tag;
    }
 
+   // CraftBukkit start
+   @Nullable
+   private CompoundTag getTagClone() {
+      return this.tag == null ? null : this.tag.copy();
+   }
+
+   private void setTagClone(@Nullable CompoundTag nbtttagcompound) {
+      this.setTag(nbtttagcompound == null ? null : nbtttagcompound.copy());
+   }
+   // CraftBukkit end
+
    public CompoundTag getOrCreateTag() {
       if (this.tag == null) {
          this.setTag(new CompoundTag());
@@ -527,7 +_,7 @@
 
    public void setTag(@Nullable CompoundTag p_41752_) {
       this.tag = p_41752_;
-      if (this.getItem().canBeDepleted()) {
+      if (this.getItem().isDamageable(this)) {
          this.setDamageValue(this.getDamageValue());
       }
 
@@ -588,7 +_,7 @@
 
    public List<Component> getTooltipLines(@Nullable Player p_41652_, TooltipFlag p_41653_) {
       List<Component> list = Lists.newArrayList();
-      MutableComponent mutablecomponent = Component.empty().append(this.getHoverName()).withStyle(this.getRarity().color);
+      MutableComponent mutablecomponent = Component.empty().append(this.getHoverName()).withStyle(this.getRarity().getStyleModifier());
       if (this.hasCustomHoverName()) {
          mutablecomponent.withStyle(ChatFormatting.ITALIC);
       }
@@ -735,6 +_,7 @@
          list.add(DISABLED_ITEM_TOOLTIP);
       }
 
+      net.minecraftforge.event.ForgeEventFactory.onItemTooltip(this, p_41652_, list, p_41653_);
       return list;
    }
 
@@ -743,7 +_,7 @@
    }
 
    private int getHideFlags() {
-      return this.hasTag() && this.tag.contains("HideFlags", 99) ? this.tag.getInt("HideFlags") : 0;
+      return this.hasTag() && this.tag.contains("HideFlags", 99) ? this.tag.getInt("HideFlags") : this.getItem().getDefaultTooltipHideFlags(this);
    }
 
    public void hideTooltipPart(ItemStack.TooltipPart p_41655_) {
@@ -863,9 +_,10 @@
             }
          }
       } else {
-         multimap = this.getItem().getDefaultAttributeModifiers(p_41639_);
+         multimap = this.getItem().getAttributeModifiers(p_41639_, this);
       }
 
+      multimap = net.minecraftforge.common.ForgeHooks.getAttributeModifiers(this, p_41639_, multimap);
       return multimap;
    }
 
@@ -885,6 +_,14 @@
       listtag.add(compoundtag);
    }
 
+   // CraftBukkit start
+   @Deprecated
+   public void setItem(Item item) {
+      this.item = item;
+      this.delegate = net.minecraftforge.registries.ForgeRegistries.ITEMS.getDelegateOrThrow(item); //Ketting
+   }
+   // CraftBukkit end
+
    public Component getDisplayName() {
       MutableComponent mutablecomponent = Component.empty().append(this.getHoverName());
       if (this.hasCustomHoverName()) {
@@ -893,7 +_,7 @@
 
       MutableComponent mutablecomponent1 = ComponentUtils.wrapInSquareBrackets(mutablecomponent);
       if (!this.isEmpty()) {
-         mutablecomponent1.withStyle(this.getRarity().color).withStyle((p_220170_) -> {
+         mutablecomponent1.withStyle(this.getRarity().getStyleModifier()).withStyle((p_220170_) -> {
             return p_220170_.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_ITEM, new HoverEvent.ItemStackInfo(this)));
          });
       }
@@ -945,12 +_,31 @@
       this.getItem().onUseTick(p_41732_, p_41733_, this, p_41734_);
    }
 
+   /** @deprecated Forge: Use {@linkplain net.minecraftforge.common.extensions.IForgeItemStack#onDestroyed(ItemEntity, net.minecraft.world.damagesource.DamageSource) damage source sensitive version} */
+   @Deprecated
    public void onDestroyed(ItemEntity p_150925_) {
       this.getItem().onDestroyed(p_150925_);
    }
 
    public boolean isEdible() {
       return this.getItem().isEdible();
+   }
+
+   // FORGE START
+   public void deserializeNBT(CompoundTag nbt) {
+      final ItemStack itemStack = ItemStack.of(nbt);
+      this.setTag(itemStack.getTag());
+      if (itemStack.capNBT != null) deserializeCaps(itemStack.capNBT);
+   }
+
+   /**
+    * Set up forge's ItemStack additions.
+    */
+   private void forgeInit() {
+      if (this.delegate != null) {
+         this.gatherCapabilities(() -> item.initCapabilities(this, this.capNBT));
+         if (this.capNBT != null) deserializeCaps(this.capNBT);
+      }
    }
 
    public SoundEvent getDrinkingSound() {
