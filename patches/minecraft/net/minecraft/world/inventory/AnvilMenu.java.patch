--- a/net/minecraft/world/inventory/AnvilMenu.java
+++ b/net/minecraft/world/inventory/AnvilMenu.java
@@ -16,6 +_,6 @@
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.level.block.AnvilBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import org.slf4j.Logger;
 
 public class AnvilMenu extends ItemCombinerMenu {
@@ -27,8 +_,8 @@
    public static final int MAX_NAME_LENGTH = 50;
    public int repairItemCountCost;
    @Nullable
-   private String itemName;
-   private final DataSlot cost = DataSlot.standalone();
+   public String itemName;
+   public final DataSlot cost = DataSlot.standalone();
    private static final int COST_FAIL = 0;
    private static final int COST_BASE = 1;
    private static final int COST_ADDED_BASE = 1;
@@ -40,6 +_,11 @@
    private static final int ADDITIONAL_SLOT_X_PLACEMENT = 76;
    private static final int RESULT_SLOT_X_PLACEMENT = 134;
    private static final int SLOT_Y_PLACEMENT = 47;
+   // CraftBukkit start
+   public static final int DEFAULT_DENIED_COST = -1;
+   public int maximumRepairCost = 40;
+   private org.bukkit.craftbukkit.v1_20_R2.inventory.CraftInventoryView bukkitEntity;
+   // CraftBukkit end
 
    public AnvilMenu(int p_39005_, Inventory p_39006_) {
       this(p_39005_, p_39006_, ContainerLevelAccess.NULL);
@@ -63,7 +_,7 @@
    }
 
    protected boolean mayPickup(Player p_39023_, boolean p_39024_) {
-      return (p_39023_.getAbilities().instabuild || p_39023_.experienceLevel >= this.cost.get()) && this.cost.get() > 0;
+      return (p_39023_.getAbilities().instabuild || p_39023_.experienceLevel >= this.cost.get()) && this.cost.get() > DEFAULT_DENIED_COST; // CraftBukkit - allow cost 0 like a free item
    }
 
    protected void onTake(Player p_150474_, ItemStack p_150475_) {
@@ -71,6 +_,8 @@
          p_150474_.giveExperienceLevels(-this.cost.get());
       }
 
+      float breakChance = net.minecraftforge.common.ForgeHooks.onAnvilRepair(p_150474_, p_150475_, AnvilMenu.this.inputSlots.getItem(0), AnvilMenu.this.inputSlots.getItem(1));
+
       this.inputSlots.setItem(0, ItemStack.EMPTY);
       if (this.repairItemCountCost > 0) {
          ItemStack itemstack = this.inputSlots.getItem(1);
@@ -84,10 +_,10 @@
          this.inputSlots.setItem(1, ItemStack.EMPTY);
       }
 
-      this.cost.set(0);
+      this.cost.set(DEFAULT_DENIED_COST); // CraftBukkit - use a variable for set a cost for denied item
       this.access.execute((p_150479_, p_150480_) -> {
          BlockState blockstate = p_150479_.getBlockState(p_150480_);
-         if (!p_150474_.getAbilities().instabuild && blockstate.is(BlockTags.ANVIL) && p_150474_.getRandom().nextFloat() < 0.12F) {
+         if (!p_150474_.getAbilities().instabuild && blockstate.is(BlockTags.ANVIL) && p_150474_.getRandom().nextFloat() < breakChance) {
             BlockState blockstate1 = AnvilBlock.damage(blockstate);
             if (blockstate1 == null) {
                p_150479_.removeBlock(p_150480_, false);
@@ -110,21 +_,24 @@
       int j = 0;
       int k = 0;
       if (itemstack.isEmpty()) {
-         this.resultSlots.setItem(0, ItemStack.EMPTY);
-         this.cost.set(0);
+         org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callPrepareAnvilEvent(getBukkitView(), ItemStack.EMPTY); // CraftBukkit
+         this.cost.set(DEFAULT_DENIED_COST); // CraftBukkit - use a variable for set a cost for denied item
       } else {
          ItemStack itemstack1 = itemstack.copy();
          ItemStack itemstack2 = this.inputSlots.getItem(1);
          Map<Enchantment, Integer> map = EnchantmentHelper.getEnchantments(itemstack1);
          j += itemstack.getBaseRepairCost() + (itemstack2.isEmpty() ? 0 : itemstack2.getBaseRepairCost());
          this.repairItemCountCost = 0;
+         boolean flag = false;
+
+         if (!net.minecraftforge.common.ForgeHooks.onAnvilChange(this, itemstack, itemstack2, resultSlots, itemName, j, this.player)) return;
          if (!itemstack2.isEmpty()) {
-            boolean flag = itemstack2.is(Items.ENCHANTED_BOOK) && !EnchantedBookItem.getEnchantments(itemstack2).isEmpty();
+            flag = itemstack2.getItem() == Items.ENCHANTED_BOOK && !EnchantedBookItem.getEnchantments(itemstack2).isEmpty();
             if (itemstack1.isDamageableItem() && itemstack1.getItem().isValidRepairItem(itemstack, itemstack2)) {
                int l2 = Math.min(itemstack1.getDamageValue(), itemstack1.getMaxDamage() / 4);
                if (l2 <= 0) {
-                  this.resultSlots.setItem(0, ItemStack.EMPTY);
-                  this.cost.set(0);
+                  org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callPrepareAnvilEvent(getBukkitView(), ItemStack.EMPTY); // CraftBukkit
+                  this.cost.set(DEFAULT_DENIED_COST); // CraftBukkit - use a variable for set a cost for denied item
                   return;
                }
 
@@ -139,8 +_,8 @@
                this.repairItemCountCost = i3;
             } else {
                if (!flag && (!itemstack1.is(itemstack2.getItem()) || !itemstack1.isDamageableItem())) {
-                  this.resultSlots.setItem(0, ItemStack.EMPTY);
-                  this.cost.set(0);
+                  org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callPrepareAnvilEvent(getBukkitView(), ItemStack.EMPTY); // CraftBukkit
+                  this.cost.set(DEFAULT_DENIED_COST); // CraftBukkit - use a variable for set a cost for denied item
                   return;
                }
 
@@ -218,8 +_,8 @@
                }
 
                if (flag3 && !flag2) {
-                  this.resultSlots.setItem(0, ItemStack.EMPTY);
-                  this.cost.set(0);
+                  org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callPrepareAnvilEvent(getBukkitView(), ItemStack.EMPTY); // CraftBukkit
+                  this.cost.set(DEFAULT_DENIED_COST); // CraftBukkit - use a variable for set a cost for denied item
                   return;
                }
             }
@@ -236,17 +_,18 @@
             i += k;
             itemstack1.resetHoverName();
          }
+         if (flag && !itemstack1.isBookEnchantable(itemstack2)) itemstack1 = ItemStack.EMPTY;
 
          this.cost.set(j + i);
          if (i <= 0) {
             itemstack1 = ItemStack.EMPTY;
          }
 
-         if (k == i && k > 0 && this.cost.get() >= 40) {
-            this.cost.set(39);
+         if (k == i && k > 0 && this.cost.get() >= maximumRepairCost) { // CraftBukkit
+            this.cost.set(maximumRepairCost - 1); // CraftBukkit
          }
 
-         if (this.cost.get() >= 40 && !this.player.getAbilities().instabuild) {
+         if (this.cost.get() >= maximumRepairCost && !this.player.getAbilities().instabuild) { // CraftBukkit
             itemstack1 = ItemStack.EMPTY;
          }
 
@@ -264,7 +_,8 @@
             EnchantmentHelper.setEnchantments(map, itemstack1);
          }
 
-         this.resultSlots.setItem(0, itemstack1);
+         org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callPrepareAnvilEvent(getBukkitView(), itemstack1); // CraftBukkit
+         sendAllDataToRemote(); // CraftBukkit - SPIGOT-6686: Always send completed inventory to stay in sync with client
          this.broadcastChanges();
       }
    }
@@ -302,4 +_,22 @@
    public int getCost() {
       return this.cost.get();
    }
+
+   public void setMaximumCost(int value) {
+      this.cost.set(value);
+   }
+
+   // CraftBukkit start
+   @Override
+   public org.bukkit.craftbukkit.v1_20_R2.inventory.CraftInventoryView getBukkitView() {
+      if (bukkitEntity != null) {
+         return bukkitEntity;
+      }
+
+      org.bukkit.craftbukkit.v1_20_R2.inventory.CraftInventory inventory = new org.bukkit.craftbukkit.v1_20_R2.inventory.CraftInventoryAnvil(
+              access.getLocation(), this.inputSlots, this.resultSlots, this);
+      bukkitEntity = new org.bukkit.craftbukkit.v1_20_R2.inventory.CraftInventoryView(this.player.getBukkitEntity(), inventory, this);
+      return bukkitEntity;
+   }
+   // CraftBukkit end
 }
