--- a/net/minecraft/server/level/ServerEntity.java
+++ b/net/minecraft/server/level/ServerEntity.java
@@ -26,6 +_,6 @@
 import net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket;
 import net.minecraft.network.protocol.game.VecDeltaCodec;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EquipmentSlot;
@@ -38,6 +_,6 @@
 import net.minecraft.world.item.MapItem;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import net.minecraft.world.phys.Vec3;
 import org.slf4j.Logger;
 
 public class ServerEntity {
@@ -63,8 +_,12 @@
    private boolean wasOnGround;
    @Nullable
    private List<SynchedEntityData.DataValue<?>> trackedDataValues;
+   // CraftBukkit start
+   private final Set<net.minecraft.server.network.ServerPlayerConnection> trackedPlayers;
 
-   public ServerEntity(ServerLevel p_8528_, Entity p_8529_, int p_8530_, boolean p_8531_, Consumer<Packet<?>> p_8532_) {
+   public ServerEntity(ServerLevel p_8528_, Entity p_8529_, int p_8530_, boolean p_8531_, Consumer<Packet<?>> p_8532_, Set<net.minecraft.server.network.ServerPlayerConnection> trackedPlayers) {
+      this.trackedPlayers = trackedPlayers;
+      // CraftBukkit end
       this.level = p_8528_;
       this.broadcast = p_8532_;
       this.entity = p_8529_;
@@ -81,7 +_,7 @@
    public void sendChanges() {
       List<Entity> list = this.entity.getPassengers();
       if (!list.equals(this.lastPassengers)) {
-         this.broadcast.accept(new ClientboundSetPassengersPacket(this.entity));
+         this.broadcastAndSend(new ClientboundSetPassengersPacket(this.entity)); // CraftBukkit
          removedPassengers(list, this.lastPassengers).forEach((p_296578_) -> {
             if (p_296578_ instanceof ServerPlayer serverplayer1) {
                serverplayer1.connection.teleport(serverplayer1.getX(), serverplayer1.getY(), serverplayer1.getZ(), serverplayer1.getYRot(), serverplayer1.getXRot());
@@ -93,15 +_,20 @@
 
       Entity $$11 = this.entity;
       if ($$11 instanceof ItemFrame itemframe) {
-         if (this.tickCount % 10 == 0) {
+         if (true || this.tickCount % 10 == 0) { // CraftBukkit - Moved below, should always enter this block
             ItemStack itemstack = itemframe.getItem();
-            if (itemstack.getItem() instanceof MapItem) {
+
+            if (this.tickCount % 10 == 0 && itemstack.getItem() instanceof MapItem) { // CraftBukkit - Moved this.tickCounter % 10 logic here so item frames do not enter the other blocks
                Integer integer = MapItem.getMapId(itemstack);
-               MapItemSavedData mapitemsaveddata = MapItem.getSavedData(integer, this.level);
+               MapItemSavedData mapitemsaveddata = MapItem.getSavedData(itemstack, this.level);
+
                if (mapitemsaveddata != null) {
-                  for(ServerPlayer serverplayer : this.level.players()) {
+                  for (net.minecraft.server.network.ServerPlayerConnection connection : this.trackedPlayers) { // CraftBukkit
+                     ServerPlayer serverplayer = connection.getPlayer(); // CraftBukkit
+
                      mapitemsaveddata.tickCarriedBy(serverplayer, itemstack);
                      Packet<?> packet = mapitemsaveddata.getUpdatePacket(integer, serverplayer);
+
                      if (packet != null) {
                         serverplayer.connection.send(packet);
                      }
@@ -203,7 +_,27 @@
 
       ++this.tickCount;
       if (this.entity.hurtMarked) {
-         this.broadcastAndSend(new ClientboundSetEntityMotionPacket(this.entity));
+         // CraftBukkit start - Create PlayerVelocity event
+         boolean cancelled = false;
+
+         if (this.entity instanceof ServerPlayer) {
+            org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.entity.getBukkitEntity();
+            org.bukkit.util.Vector velocity = player.getVelocity();
+
+            org.bukkit.event.player.PlayerVelocityEvent event = new org.bukkit.event.player.PlayerVelocityEvent(player, velocity.clone());
+            this.entity.level().getCraftServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+               cancelled = true;
+            } else if (!velocity.equals(event.getVelocity())) {
+               player.setVelocity(event.getVelocity());
+            }
+         }
+
+         if (!cancelled) {
+            this.broadcastAndSend(new ClientboundSetEntityMotionPacket(this.entity));
+         }
+         // CraftBukkit end
          this.entity.hurtMarked = false;
       }
 
@@ -218,6 +_,7 @@
    public void removePairing(ServerPlayer p_8535_) {
       this.entity.stopSeenByPlayer(p_8535_);
       p_8535_.connection.send(new ClientboundRemoveEntitiesPacket(this.entity.getId()));
+      net.minecraftforge.event.ForgeEventFactory.onStopEntityTracking(this.entity, p_8535_);
    }
 
    public void addPairing(ServerPlayer p_8542_) {
@@ -225,11 +_,15 @@
       this.sendPairingData(p_8542_, list::add);
       p_8542_.connection.send(new ClientboundBundlePacket(list));
       this.entity.startSeenByPlayer(p_8542_);
+      net.minecraftforge.event.ForgeEventFactory.onStartEntityTracking(this.entity, p_8542_);
    }
 
    public void sendPairingData(ServerPlayer p_289562_, Consumer<Packet<ClientGamePacketListener>> p_289563_) {
       if (this.entity.isRemoved()) {
-         LOGGER.warn("Fetching packet for removed entity {}", (Object)this.entity);
+         // CraftBukkit start - Remove useless error spam, just return
+         // LOGGER.warn("Fetching packet for removed entity {}", (Object)this.entity);
+         return;
+         // CraftBukkit end
       }
 
       Packet<ClientGamePacketListener> packet = this.entity.getAddEntityPacket();
@@ -242,6 +_,13 @@
       boolean flag = this.trackDelta;
       if (this.entity instanceof LivingEntity) {
          Collection<AttributeInstance> collection = ((LivingEntity)this.entity).getAttributes().getSyncableAttributes();
+
+         // CraftBukkit start - If sending own attributes send scaled health instead of current maximum health
+         if (this.entity.getId() == p_289562_.getId()) {
+            ((ServerPlayer) this.entity).getBukkitEntity().injectScaledMaxHealth(collection, false);
+         }
+         // CraftBukkit end
+
          if (!collection.isEmpty()) {
             p_289563_.accept(new ClientboundUpdateAttributesPacket(this.entity.getId(), collection));
          }
@@ -269,7 +_,14 @@
          if (!list.isEmpty()) {
             p_289563_.accept(new ClientboundSetEquipmentPacket(this.entity.getId(), list));
          }
-      }
+         ((LivingEntity) this.entity).detectEquipmentUpdatesPublic(); // CraftBukkit - SPIGOT-3789: sync again immediately after sending
+      }
+
+      // CraftBukkit start - MC-109346: Fix for nonsensical head yaw
+      if (this.entity instanceof ServerPlayer) {
+         p_289563_.accept(new ClientboundRotateHeadPacket(this.entity, (byte) Mth.floor(this.entity.getYHeadRot() * 256.0F / 360.0F)));
+      }
+      // CraftBukkit end
 
       if (!this.entity.getPassengers().isEmpty()) {
          p_289563_.accept(new ClientboundSetPassengersPacket(this.entity));
@@ -299,6 +_,11 @@
       if (this.entity instanceof LivingEntity) {
          Set<AttributeInstance> set = ((LivingEntity)this.entity).getAttributes().getDirtyAttributes();
          if (!set.isEmpty()) {
+            // CraftBukkit start - Send scaled max health
+            if (this.entity instanceof ServerPlayer) {
+               ((ServerPlayer) this.entity).getBukkitEntity().injectScaledMaxHealth(set, false);
+            }
+            // CraftBukkit end
             this.broadcastAndSend(new ClientboundUpdateAttributesPacket(this.entity.getId(), set));
          }
 
