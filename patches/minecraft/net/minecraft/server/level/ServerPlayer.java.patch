--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -147,7 +_,7 @@
 import net.minecraft.world.scores.criteria.ObjectiveCriteria;
 import org.slf4j.Logger;
 
-public class ServerPlayer extends Player {
+public class ServerPlayer extends Player implements net.minecraftforge.common.extensions.IForgeServerPlayer {
    private static final Logger LOGGER = LogUtils.getLogger();
    private static final int NEUTRAL_MOB_DEATH_NOTIFICATION_RADII_XZ = 32;
    private static final int NEUTRAL_MOB_DEATH_NOTIFICATION_RADII_Y = 10;
@@ -243,6 +_,19 @@
    public int containerCounter;
    public boolean wonGame;
 
+   // CraftBukkit start
+   public String displayName;
+   public org.bukkit.Location compassTarget;
+   public int newExp = 0;
+   public int newLevel = 0;
+   public int newTotalExp = 0;
+   public boolean keepLevel = false;
+   public double maxHealthCache;
+   public boolean joining = true;
+   public boolean sentListPacket = false;
+   public String kickLeaveMessage = null; // SPIGOT-3034: Forward leave message to PlayerQuitEvent
+   // CraftBukkit end
+
    public ServerPlayer(MinecraftServer p_254143_, ServerLevel p_254435_, GameProfile p_253651_, ClientInformation p_299301_) {
       super(p_254435_, p_254435_.getSharedSpawnPos(), p_254435_.getSharedSpawnAngle(), p_253651_);
       this.textFilter = p_254143_.createTextFilterForPlayer(this);
@@ -253,11 +_,56 @@
       this.setMaxUpStep(1.0F);
       this.fudgeSpawnLocation(p_254435_);
       this.updateOptions(p_299301_);
-   }
+
+      // CraftBukkit start
+      this.displayName = this.getScoreboardName();
+      this.bukkitPickUpLoot = true;
+      this.maxHealthCache = this.getMaxHealth();
+   }
+
+   // Yes, this doesn't match Vanilla, but it's the best we can do for now.
+   // If this is an issue, PRs are welcome
+   public final BlockPos getSpawnPoint(ServerLevel level) {
+      BlockPos blockposition = level.getSharedSpawnPos();
+
+      if (level.dimensionType().hasSkyLight() && level.serverLevelData.getGameType() != GameType.ADVENTURE) {
+         int i = Math.max(0, this.server.getSpawnRadius(level));
+         int j = Mth.floor(level.getWorldBorder().getDistanceToBorder((double) blockposition.getX(), (double) blockposition.getZ()));
+
+         if (j < i) {
+            i = j;
+         }
+
+         if (j <= 1) {
+            i = 1;
+         }
+
+         long k = (long) (i * 2 + 1);
+         long l = k * k;
+         int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int) l;
+         int j1 = this.getCoprime(i1);
+         int k1 = RandomSource.create().nextInt(i1);
+
+         for (int l1 = 0; l1 < i1; ++l1) {
+            int i2 = (k1 + j1 * l1) % i1;
+            int j2 = i2 % (i * 2 + 1);
+            int k2 = i2 / (i * 2 + 1);
+            BlockPos blockposition1 = PlayerRespawnLogic.getOverworldRespawnPos(level, blockposition.getX() + j2 - i, blockposition.getZ() + k2 - i);
+
+            if (blockposition1 != null) {
+               return blockposition1;
+            }
+         }
+      }
+
+      return blockposition;
+   }
+   // CraftBukkit end
 
    private void fudgeSpawnLocation(ServerLevel p_9202_) {
       BlockPos blockpos = p_9202_.getSharedSpawnPos();
-      if (p_9202_.dimensionType().hasSkyLight() && p_9202_.getServer().getWorldData().getGameType() != GameType.ADVENTURE) {
+
+      if (p_9202_.dimensionType().hasSkyLight() && p_9202_.serverLevelData.getGameType() != GameType.ADVENTURE) { // CraftBukkit
          int i = Math.max(0, this.server.getSpawnRadius(p_9202_));
          int j = Mth.floor(p_9202_.getWorldBorder().getDistanceToBorder((double)blockpos.getX(), (double)blockpos.getZ()));
          if (j < i) {
@@ -317,11 +_,25 @@
       if (p_9131_.contains("recipeBook", 10)) {
          this.recipeBook.fromNbt(p_9131_.getCompound("recipeBook"), this.server.getRecipeManager());
       }
+      this.getBukkitEntity().readExtraData(p_9131_); // CraftBukkit
+
+      //Ketting start - load forge captures
+      net.minecraft.nbt.ListTag forgeCaptures = p_9131_.getList("ForgeCaptures", 10);
+      setForgeCaptures(this, forgeCaptures);
+      //Ketting end
 
       if (this.isSleeping()) {
          this.stopSleeping();
       }
 
+      // CraftBukkit start
+      String spawnWorld = p_9131_.getString("SpawnWorld");
+      org.bukkit.craftbukkit.v1_20_R2.CraftWorld oldWorld = (org.bukkit.craftbukkit.v1_20_R2.CraftWorld) org.bukkit.Bukkit.getWorld(spawnWorld);
+      if (oldWorld != null) {
+         this.respawnDimension = oldWorld.getHandle().dimension();
+      }
+      // CraftBukkit end
+
       if (p_9131_.contains("SpawnX", 99) && p_9131_.contains("SpawnY", 99) && p_9131_.contains("SpawnZ", 99)) {
          this.respawnPosition = new BlockPos(p_9131_.getInt("SpawnX"), p_9131_.getInt("SpawnY"), p_9131_.getInt("SpawnZ"));
          this.respawnForced = p_9131_.getBoolean("SpawnForced");
@@ -350,9 +_,24 @@
 
       Entity entity1 = this.getRootVehicle();
       Entity entity = this.getVehicle();
-      if (entity != null && entity1 != this && entity1.hasExactlyOnePlayerPassenger()) {
+
+      // CraftBukkit start - handle non-persistent vehicles
+      boolean persistVehicle = true;
+      if (entity1 != null) {
+         Entity vehicle;
+         for (vehicle = entity1; vehicle != null; vehicle = vehicle.getVehicle()) {
+            if (!vehicle.persist) {
+               persistVehicle = false;
+               break;
+            }
+         }
+      }
+
+      if (persistVehicle && entity != null && entity1 != this && entity1.hasExactlyOnePlayerPassenger()) {
+         // CraftBukkit end
          CompoundTag compoundtag1 = new CompoundTag();
          CompoundTag compoundtag2 = new CompoundTag();
+
          entity1.save(compoundtag2);
          compoundtag1.putUUID("Attach", entity.getUUID());
          compoundtag1.put("Entity", compoundtag2);
@@ -371,8 +_,36 @@
             p_9197_.put("SpawnDimension", p_248207_);
          });
       }
-
-   }
+      this.getBukkitEntity().setExtraData(p_9197_); // CraftBukkit
+
+      //Ketting start - save forge captures
+      Inventory forgeCaptures = getForgeCaptures();
+      if (forgeCaptures != null) p_9197_.put("ForgeCaptures", forgeCaptures.save(new net.minecraft.nbt.ListTag()));
+      //Ketting end
+   }
+
+   // CraftBukkit start - World fallback code, either respawn location or global spawn
+   public void spawnIn(Level level) {
+      this.setLevel(level);
+      if (level == null) {
+         this.unsetRemoved();
+         Vec3 position = null;
+         if (this.respawnDimension != null) {
+            level = this.server.getLevel(this.respawnDimension);
+            if (level != null && this.getRespawnPosition() != null) {
+               position = Player.findRespawnPositionAndUseSpawnBlock((ServerLevel) level, this.getRespawnPosition(), this.getRespawnAngle(), false, false).orElse(null);
+            }
+         }
+         if (level == null || position == null) {
+            level = ((org.bukkit.craftbukkit.v1_20_R2.CraftWorld) org.bukkit.Bukkit.getServer().getWorlds().get(0)).getHandle();
+            position = Vec3.atCenterOf(level.getSharedSpawnPos());
+         }
+         this.setLevel(level);
+         this.setPos(position);
+      }
+      this.gameMode.setLevel((ServerLevel) level);
+   }
+   // CraftBukkit end
 
    public void setExperiencePoints(int p_8986_) {
       float f = (float)this.getXpNeededForNextLevel();
@@ -424,6 +_,11 @@
    }
 
    public void tick() {
+      // CraftBukkit start
+      if (this.joining) {
+         this.joining = false;
+      }
+      // CraftBukkit end
       this.gameMode.tick();
       this.wardenSpawnTracker.tick();
       --this.spawnInvulnerableTime;
@@ -477,7 +_,7 @@
          }
 
          if (this.getHealth() != this.lastSentHealth || this.lastSentFood != this.foodData.getFoodLevel() || this.foodData.getSaturationLevel() == 0.0F != this.lastFoodSaturationZero) {
-            this.connection.send(new ClientboundSetHealthPacket(this.getHealth(), this.foodData.getFoodLevel(), this.foodData.getSaturationLevel()));
+            this.connection.send(new ClientboundSetHealthPacket(this.getBukkitEntity().getScaledHealth(), this.foodData.getFoodLevel(), this.foodData.getSaturationLevel())); // CraftBukkit
             this.lastSentHealth = this.getHealth();
             this.lastSentFood = this.foodData.getFoodLevel();
             this.lastFoodSaturationZero = this.foodData.getSaturationLevel() == 0.0F;
@@ -508,6 +_,12 @@
             this.updateScoreForCriteria(ObjectiveCriteria.EXPERIENCE, Mth.ceil((float)this.lastRecordedExperience));
          }
 
+         // CraftBukkit start - Force max health updates
+         if (this.maxHealthCache != this.getMaxHealth()) {
+            this.getBukkitEntity().updateScaledHealth();
+         }
+         // CraftBukkit end
+
          if (this.experienceLevel != this.lastRecordedLevel) {
             this.lastRecordedLevel = this.experienceLevel;
             this.updateScoreForCriteria(ObjectiveCriteria.LEVEL, Mth.ceil((float)this.lastRecordedLevel));
@@ -522,6 +_,20 @@
             CriteriaTriggers.LOCATION.trigger(this);
          }
 
+         // CraftBukkit start - initialize oldLevel, fire PlayerLevelChangeEvent, and tick client-sided world border
+         if (this.oldLevel == -1) {
+            this.oldLevel = this.experienceLevel;
+         }
+
+         if (this.oldLevel != this.experienceLevel) {
+            org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callPlayerLevelChangeEvent(this.getBukkitEntity(), this.oldLevel, this.experienceLevel);
+            this.oldLevel = this.experienceLevel;
+         }
+
+         if (this.getBukkitEntity().hasClientWorldBorder()) {
+            ((org.bukkit.craftbukkit.v1_20_R2.CraftWorldBorder) this.getBukkitEntity().getWorldBorder()).getHandle().tick();
+         }
+         // CraftBukkit end
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking player");
          CrashReportCategory crashreportcategory = crashreport.addCategory("Player being ticked");
@@ -562,16 +_,55 @@
    }
 
    private void updateScoreForCriteria(ObjectiveCriteria p_9105_, int p_9106_) {
-      this.getScoreboard().forAllObjectives(p_9105_, this.getScoreboardName(), (p_9178_) -> {
+      // CraftBukkit - Use our scores instead
+      this.level().getCraftServer().getScoreboardManager().getScoreboardScores(p_9105_, this.getScoreboardName(), (p_9178_) -> {
          p_9178_.setScore(p_9106_);
       });
    }
 
    public void die(DamageSource p_9035_) {
       this.gameEvent(GameEvent.ENTITY_DIE);
+      if (net.minecraftforge.common.ForgeHooks.onLivingDeath(this, p_9035_)) return;
       boolean flag = this.level().getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES);
-      if (flag) {
-         Component component = this.getCombatTracker().getDeathMessage();
+      // CraftBukkit start - fire PlayerDeathEvent
+      if (this.dead) {
+         return;
+      }
+      boolean keepInventory = this.level().getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY) || this.isSpectator();
+
+      //Ketting start
+      Inventory copy = new Inventory(this);
+      copy.replaceWith(getInventory()); // Create a deep copy
+
+      if (!this.isSpectator()) {
+         this.dropAllDeathLoot(p_9035_);
+      }
+
+      List<org.bukkit.inventory.ItemStack> capturedDrops = new java.util.ArrayList<>(this.drops);
+      this.drops.clear();
+
+      Component defaultMessage = this.getCombatTracker().getDeathMessage();
+      String deathmessage = defaultMessage.getString();
+      keepLevel = keepInventory; // SPIGOT-2222: pre-set keepLevel
+      org.bukkit.event.entity.PlayerDeathEvent event = org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callPlayerDeathEvent(this, capturedDrops, deathmessage, keepInventory); //Ketting - capturedDrops
+      //Ketting end
+
+      // SPIGOT-943 - only call if they have an inventory open
+      if (this.containerMenu != this.inventoryMenu) {
+         this.closeContainer();
+      }
+
+      String deathMessage = event.getDeathMessage();
+
+      if (deathMessage != null && deathMessage.length() > 0 && flag) { // TODO: allow plugins to override?
+         Component component;
+
+         if (deathMessage.equals(deathmessage)) {
+            component = this.getCombatTracker().getDeathMessage();
+         } else {
+            component = org.bukkit.craftbukkit.v1_20_R2.util.CraftChatMessage.fromStringOrNull(deathMessage);
+         }
+
          this.connection.send(new ClientboundPlayerCombatKillPacket(this.getId(), component), PacketSendListener.exceptionallySend(() -> {
             int i = 256;
             String s = component.getString(256);
@@ -582,6 +_,7 @@
             return new ClientboundPlayerCombatKillPacket(this.getId(), component2);
          }));
          Team team = this.getTeam();
+
          if (team != null && team.getDeathMessageVisibility() != Team.Visibility.ALWAYS) {
             if (team.getDeathMessageVisibility() == Team.Visibility.HIDE_FOR_OTHER_TEAMS) {
                this.server.getPlayerList().broadcastSystemToTeam(this, component);
@@ -600,12 +_,23 @@
          this.tellNeutralMobsThatIDied();
       }
 
-      if (!this.isSpectator()) {
-         this.dropAllDeathLoot(p_9035_);
+      // SPIGOT-5478 must be called manually now
+      this.dropExperience();
+      // we clean the player's inventory after the EntityDeathEvent is called so plugins can get the exact state of the inventory.
+      if (!event.getKeepInventory()) {
+         this.getInventory().clearContent();
+      } else { //Ketting - if keepInventory is modified by a plugin, reset the inventory and clear the forge captures
+         this.getInventory().replaceWith(copy);
+         getForgeCapturesAndClear();
       }
 
-      this.getScoreboard().forAllObjectives(ObjectiveCriteria.DEATH_COUNT, this.getScoreboardName(), Score::increment);
+      this.setCamera(this); // Remove spectated target
+      // CraftBukkit end
+
+      // CraftBukkit - Get our scores instead
+      this.level().getCraftServer().getScoreboardManager().getScoreboardScores(ObjectiveCriteria.DEATH_COUNT, this.getScoreboardName(), Score::increment);
       LivingEntity livingentity = this.getKillCredit();
+
       if (livingentity != null) {
          this.awardStat(Stats.ENTITY_KILLED_BY.get(livingentity.getType()));
          livingentity.awardKillScore(this, this.deathScore, p_9035_);
@@ -638,10 +_,13 @@
          this.increaseScore(p_9051_);
          String s = this.getScoreboardName();
          String s1 = p_9050_.getScoreboardName();
-         this.getScoreboard().forAllObjectives(ObjectiveCriteria.KILL_COUNT_ALL, s, Score::increment);
+
+         // CraftBukkit - Get our scores instead
+         this.level().getCraftServer().getScoreboardManager().getScoreboardScores(ObjectiveCriteria.KILL_COUNT_ALL, s, Score::increment);
          if (p_9050_ instanceof Player) {
             this.awardStat(Stats.PLAYER_KILLS);
-            this.getScoreboard().forAllObjectives(ObjectiveCriteria.KILL_COUNT_PLAYERS, s, Score::increment);
+            // CraftBukkit - Get our scores instead
+            this.level().getCraftServer().getScoreboardManager().getScoreboardScores(ObjectiveCriteria.KILL_COUNT_PLAYERS, s, Score::increment);
          } else {
             this.awardStat(Stats.MOB_KILLS);
          }
@@ -657,7 +_,8 @@
       if (playerteam != null) {
          int i = playerteam.getColor().getId();
          if (i >= 0 && i < p_9127_.length) {
-            this.getScoreboard().forAllObjectives(p_9127_[i], p_9125_, Score::increment);
+            // CraftBukkit - Get our scores instead
+            this.level().getCraftServer().getScoreboardManager().getScoreboardScores(p_9127_[i], p_9125_, Score::increment);
          }
       }
 
@@ -700,15 +_,18 @@
    }
 
    private boolean isPvpAllowed() {
-      return this.server.isPvpAllowed();
+      // CraftBukkit - this.server.isPvpAllowed() -> this.world.pvpMode
+      return this.level().pvpMode;
    }
 
    @Nullable
    protected PortalInfo findDimensionEntryPoint(ServerLevel p_8998_) {
       PortalInfo portalinfo = super.findDimensionEntryPoint(p_8998_);
-      if (portalinfo != null && this.level().dimension() == Level.OVERWORLD && p_8998_.dimension() == Level.END) {
+      p_8998_ = (portalinfo == null) ? p_8998_ : portalinfo.world; // CraftBukkit
+
+      if (portalinfo != null && this.level().dimension() == Level.OVERWORLD && p_8998_ != null && p_8998_.dimension() == Level.END) { // CraftBukkit
          Vec3 vec3 = portalinfo.pos.add(0.0D, -1.0D, 0.0D);
-         return new PortalInfo(vec3, Vec3.ZERO, 90.0F, 0.0F);
+         return new PortalInfo(vec3, Vec3.ZERO, 90.0F, 0.0F, p_8998_, portalinfo.portalEventInfo); // CraftBukkit
       } else {
          return portalinfo;
       }
@@ -716,10 +_,31 @@
 
    @Nullable
    public Entity changeDimension(ServerLevel p_9180_) {
-      this.isChangingDimension = true;
+      // CraftBukkit start
+      return changeDimension(p_9180_, p_9180_.getPortalForcer(), PlayerTeleportEvent.TeleportCause.UNKNOWN);
+   }
+
+   @Nullable
+   public Entity changeDimension(ServerLevel p_9180_, net.minecraftforge.common.util.ITeleporter teleporter) {
+      return changeDimension(p_9180_, teleporter, PlayerTeleportEvent.TeleportCause.UNKNOWN);
+   }
+
+   @Nullable
+   public Entity changeDimension(ServerLevel p_9180_, PlayerTeleportEvent.TeleportCause cause) {
+      return changeDimension(p_9180_, p_9180_.getPortalForcer(), cause);
+   }
+
+   @Nullable
+   public Entity changeDimension(ServerLevel p_9180_, net.minecraftforge.common.util.ITeleporter teleporter, PlayerTeleportEvent.TeleportCause cause) {
+      // CraftBukkit end
+      if (net.minecraftforge.event.ForgeEventFactory.onTravelToDimension(this, p_9180_.dimension())) return null;
+      if (this.isSleeping()) return this; // CraftBukkit - SPIGOT-3154
+      // this.isChangingDimension = true; // CraftBukkit - Moved down and into PlayerList#changeDimension
       ServerLevel serverlevel = this.serverLevel();
       ResourceKey<Level> resourcekey = serverlevel.dimension();
-      if (resourcekey == Level.END && p_9180_.dimension() == Level.OVERWORLD) {
+
+      if (resourcekey == Level.END && p_9180_ != null && p_9180_.dimension() == Level.OVERWORLD && teleporter.isVanilla()) { //Forge: Fix non-vanilla teleporters triggering end credits // CraftBukkit
+         this.isChangingDimension = true; // CraftBukkit - Moved down from above
          this.unRide();
          this.serverLevel().removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
          if (!this.wonGame) {
@@ -730,71 +_,138 @@
 
          return this;
       } else {
+         // CraftBukkit start
+         /*
          LevelData leveldata = p_9180_.getLevelData();
          this.connection.send(new ClientboundRespawnPacket(this.createCommonSpawnInfo(p_9180_), (byte)3));
          this.connection.send(new ClientboundChangeDifficultyPacket(leveldata.getDifficulty(), leveldata.isDifficultyLocked()));
-         PlayerList playerlist = this.server.getPlayerList();
          playerlist.sendPlayerPermissionLevel(this);
          serverlevel.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
-         this.unsetRemoved();
-         PortalInfo portalinfo = this.findDimensionEntryPoint(p_9180_);
+         this.revive();
+         */
+         // CraftBukkit end
+         PlayerList playerList = this.server.getPlayerList();
+         PortalInfo portalinfo = teleporter.getPortalInfo(this, p_9180_, this::findDimensionEntryPoint);
+
+         java.util.concurrent.atomic.AtomicReference<ServerLevel> levelRef = new java.util.concurrent.atomic.AtomicReference<>(p_9180_);
+
          if (portalinfo != null) {
-            serverlevel.getProfiler().push("moving");
-            if (resourcekey == Level.OVERWORLD && p_9180_.dimension() == Level.NETHER) {
-               this.enteredNetherPosition = this.position();
-            } else if (p_9180_.dimension() == Level.END) {
-               this.createEndPlatform(p_9180_, BlockPos.containing(portalinfo.pos));
-            }
-
-            serverlevel.getProfiler().pop();
-            serverlevel.getProfiler().push("placing");
-            this.setServerLevel(p_9180_);
-            this.connection.teleport(portalinfo.pos.x, portalinfo.pos.y, portalinfo.pos.z, portalinfo.yRot, portalinfo.xRot);
-            this.connection.resetPosition();
-            p_9180_.addDuringPortalTeleport(this);
-            serverlevel.getProfiler().pop();
-            this.triggerDimensionChangeTriggers(serverlevel);
+            Entity e = teleporter.placeEntity(this, serverlevel, levelRef.get(), this.getYRot(), spawnPortal -> {//Forge: Start vanilla logic
+               serverlevel.getProfiler().push("moving");
+               levelRef.set(portalinfo.world); // CraftBukkit
+               if (levelRef.get() == null) { } else // CraftBukkit - empty to fall through to null to event
+                  if (resourcekey == Level.OVERWORLD && levelRef.get().dimension() == Level.NETHER) {
+                     this.enteredNetherPosition = this.position();
+                  } else if ((spawnPortal || (portalinfo.portalEventInfo != null && portalinfo.portalEventInfo.getCanCreatePortal())) && levelRef.get().dimension() == Level.END) { //Ketting - combine bukkit and forge logic
+                     this.createEndPlatform(levelRef.get(), BlockPos.containing(portalinfo.pos));
+                  }
+
+               // CraftBukkit start
+               org.bukkit.Location enter = this.getBukkitEntity().getLocation();
+               org.bukkit.Location exit = (levelRef.get() == null) ? null : org.bukkit.craftbukkit.v1_20_R2.util.CraftLocation.toBukkit(portalinfo.pos, levelRef.get().getWorld(), portalinfo.yRot, portalinfo.xRot);
+               PlayerTeleportEvent tpEvent = new PlayerTeleportEvent(this.getBukkitEntity(), enter, exit, cause);
+               org.bukkit.Bukkit.getServer().getPluginManager().callEvent(tpEvent);
+               if (tpEvent.isCancelled() || tpEvent.getTo() == null) {
+                  return null;
+               }
+               exit = tpEvent.getTo();
+               levelRef.set(((org.bukkit.craftbukkit.v1_20_R2.CraftWorld) exit.getWorld()).getHandle());
+               // CraftBukkit end
+
+               serverlevel.getProfiler().pop();
+               serverlevel.getProfiler().push("placing");
+               this.isChangingDimension = true; // CraftBukkit - Set teleport invulnerability only if player changing worlds
+
+               this.connection.send(new ClientboundRespawnPacket(this.createCommonSpawnInfo(levelRef.get()), (byte) 3));
+               this.connection.send(new ClientboundChangeDifficultyPacket(this.level().getDifficulty(), this.level().getLevelData().isDifficultyLocked()));
+
+               playerList.sendPlayerPermissionLevel(this);
+               serverlevel.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
+               this.unsetRemoved();
+
+               // CraftBukkit end
+               this.setServerLevel(levelRef.get());
+               this.connection.teleport(exit); // CraftBukkit - use internal teleport without event
+               this.connection.resetPosition();
+               levelRef.get().addDuringPortalTeleport(this);
+               serverlevel.getProfiler().pop();
+               this.triggerDimensionChangeTriggers(serverlevel);
+               return this;//forge: this is part of the ITeleporter patch
+            });//Forge: End vanilla logic
+
+            if (e != this) throw new java.lang.IllegalArgumentException(String.format(java.util.Locale.ENGLISH, "Teleporter %s returned not the player entity but instead %s, expected PlayerEntity %s", teleporter, e, this));
             this.connection.send(new ClientboundPlayerAbilitiesPacket(this.getAbilities()));
-            playerlist.sendLevelInfo(this, p_9180_);
-            playerlist.sendAllPlayerInfo(this);
+            playerList.sendLevelInfo(this, levelRef.get());
+            playerList.sendAllPlayerInfo(this);
 
             for(MobEffectInstance mobeffectinstance : this.getActiveEffects()) {
                this.connection.send(new ClientboundUpdateMobEffectPacket(this.getId(), mobeffectinstance));
             }
 
-            this.connection.send(new ClientboundLevelEventPacket(1032, BlockPos.ZERO, 0, false));
+            if (teleporter.playTeleportSound(this, serverlevel, levelRef.get()))
+               this.connection.send(new ClientboundLevelEventPacket(1032, BlockPos.ZERO, 0, false));
             this.lastSentExp = -1;
             this.lastSentHealth = -1.0F;
             this.lastSentFood = -1;
+            net.minecraftforge.event.ForgeEventFactory.onPlayerChangedDimension(this, resourcekey, levelRef.get().dimension());
+
+            // CraftBukkit start
+            PlayerChangedWorldEvent changeEvent = new PlayerChangedWorldEvent(this.getBukkitEntity(), serverlevel.getWorld());
+            this.level().getCraftServer().getPluginManager().callEvent(changeEvent);
+            // CraftBukkit end
+         } else {
+            return null;
          }
 
          return this;
       }
    }
+
+   // CraftBukkit start
+   @Override
+   protected org.bukkit.craftbukkit.v1_20_R2.event.CraftPortalEvent callPortalEvent(Entity entity, ServerLevel exitWorldServer, Vec3 exitPosition, PlayerTeleportEvent.TeleportCause cause, int searchRadius, int creationRadius) {
+      org.bukkit.Location enter = this.getBukkitEntity().getLocation();
+      org.bukkit.Location exit = org.bukkit.craftbukkit.v1_20_R2.util.CraftLocation.toBukkit(exitPosition, exitWorldServer.getWorld(), getYRot(), getXRot());
+      PlayerPortalEvent event = new PlayerPortalEvent(this.getBukkitEntity(), enter, exit, cause, searchRadius, true, creationRadius);
+      org.bukkit.Bukkit.getServer().getPluginManager().callEvent(event);
+      if (event.isCancelled() || event.getTo() == null || event.getTo().getWorld() == null) {
+         return null;
+      }
+      return new org.bukkit.craftbukkit.v1_20_R2.event.CraftPortalEvent(event);
+   }
+   // CraftBukkit end
 
    private void createEndPlatform(ServerLevel p_9007_, BlockPos p_9008_) {
       BlockPos.MutableBlockPos blockpos$mutableblockpos = p_9008_.mutable();
+      org.bukkit.craftbukkit.v1_20_R2.util.BlockStateListPopulator blockList = new org.bukkit.craftbukkit.v1_20_R2.util.BlockStateListPopulator(p_9007_); // CraftBukkit
 
       for(int i = -2; i <= 2; ++i) {
          for(int j = -2; j <= 2; ++j) {
             for(int k = -1; k < 3; ++k) {
                BlockState blockstate = k == -1 ? Blocks.OBSIDIAN.defaultBlockState() : Blocks.AIR.defaultBlockState();
-               p_9007_.setBlockAndUpdate(blockpos$mutableblockpos.set(p_9008_).move(j, k, i), blockstate);
+               blockList.setBlock(blockpos$mutableblockpos.set(p_9008_).move(j, k, i), blockstate, 3); // CraftBukkit
             }
          }
       }
+      // CraftBukkit start - call portal event
+      org.bukkit.event.world.PortalCreateEvent portalEvent = new org.bukkit.event.world.PortalCreateEvent((List<org.bukkit.block.BlockState>) (List) blockList.getList(), p_9007_.getWorld(), this.getBukkitEntity(), org.bukkit.event.world.PortalCreateEvent.CreateReason.END_PLATFORM);
+      p_9007_.getCraftServer().getPluginManager().callEvent(portalEvent);
+      if (!portalEvent.isCancelled()) {
+         blockList.updateList();
+      }
+      // CraftBukkit end
 
    }
 
-   protected Optional<BlockUtil.FoundRectangle> getExitPortal(ServerLevel p_184131_, BlockPos p_184132_, boolean p_184133_, WorldBorder p_184134_) {
-      Optional<BlockUtil.FoundRectangle> optional = super.getExitPortal(p_184131_, p_184132_, p_184133_, p_184134_);
-      if (optional.isPresent()) {
+   protected Optional<BlockUtil.FoundRectangle> getExitPortal(ServerLevel p_184131_, BlockPos p_184132_, boolean p_184133_, WorldBorder p_184134_, int searchRadius, boolean canCreatePortal, int createRadius) { // CraftBukkit
+      Optional<BlockUtil.FoundRectangle> optional = super.getExitPortal(p_184131_, p_184132_, p_184133_, p_184134_, searchRadius, canCreatePortal, createRadius); // CraftBukkit
+      if (optional.isPresent() || !canCreatePortal) { // CraftBukkit
          return optional;
       } else {
          Direction.Axis direction$axis = this.level().getBlockState(this.portalEntrancePos).getOptionalValue(NetherPortalBlock.AXIS).orElse(Direction.Axis.X);
-         Optional<BlockUtil.FoundRectangle> optional1 = p_184131_.getPortalForcer().createPortal(p_184132_, direction$axis);
+         Optional<BlockUtil.FoundRectangle> optional1 = p_184131_.getPortalForcer().createPortal(p_184132_, direction$axis, this, createRadius); // CraftBukkit
          if (optional1.isEmpty()) {
-            LOGGER.error("Unable to create a portal, likely target out of worldborder");
+            // LOGGER.error("Unable to create a portal, likely target out of worldborder"); // CraftBukkit
          }
 
          return optional1;
@@ -804,12 +_,21 @@
    public void triggerDimensionChangeTriggers(ServerLevel p_9210_) {
       ResourceKey<Level> resourcekey = p_9210_.dimension();
       ResourceKey<Level> resourcekey1 = this.level().dimension();
-      CriteriaTriggers.CHANGED_DIMENSION.trigger(this, resourcekey, resourcekey1);
-      if (resourcekey == Level.NETHER && resourcekey1 == Level.OVERWORLD && this.enteredNetherPosition != null) {
+      // CraftBukkit start
+      ResourceKey<Level> maindimensionkey = org.bukkit.craftbukkit.v1_20_R2.util.CraftDimensionUtil.getMainDimensionKey(p_9210_);
+      ResourceKey<Level> maindimensionkey1 = org.bukkit.craftbukkit.v1_20_R2.util.CraftDimensionUtil.getMainDimensionKey(this.level());
+
+      CriteriaTriggers.CHANGED_DIMENSION.trigger(this, maindimensionkey, maindimensionkey1);
+      if (maindimensionkey != resourcekey || maindimensionkey1 != resourcekey1) {
+         CriteriaTriggers.CHANGED_DIMENSION.trigger(this, resourcekey, resourcekey1);
+      }
+
+      if (maindimensionkey == Level.NETHER && maindimensionkey1 == Level.OVERWORLD && this.enteredNetherPosition != null) {
+         // CraftBukkit end
          CriteriaTriggers.NETHER_TRAVEL.trigger(this, this.enteredNetherPosition);
       }
 
-      if (resourcekey1 != Level.NETHER) {
+      if (maindimensionkey1 != Level.NETHER) { // CraftBukkit
          this.enteredNetherPosition = null;
       }
 
@@ -828,36 +_,70 @@
       this.containerMenu.broadcastChanges();
    }
 
-   public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos p_9115_) {
-      Direction direction = this.level().getBlockState(p_9115_).getValue(HorizontalDirectionalBlock.FACING);
+   // CraftBukkit start - moved bed result checks from below into separate method
+   private Either<Player.BedSleepingProblem, Unit> getBedResult(BlockPos blockposition, Direction enumdirection) {
       if (!this.isSleeping() && this.isAlive()) {
-         if (!this.level().dimensionType().natural()) {
+         if (!this.level().dimensionType().natural() || !this.level().dimensionType().bedWorks()) {
             return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_HERE);
-         } else if (!this.bedInRange(p_9115_, direction)) {
+         } else if (!this.bedInRange(blockposition, enumdirection)) {
             return Either.left(Player.BedSleepingProblem.TOO_FAR_AWAY);
-         } else if (this.bedBlocked(p_9115_, direction)) {
+         } else if (this.bedBlocked(blockposition, enumdirection)) {
             return Either.left(Player.BedSleepingProblem.OBSTRUCTED);
          } else {
-            this.setRespawnPosition(this.level().dimension(), p_9115_, this.getYRot(), false, true);
+            this.setRespawnPosition(this.level().dimension(), blockposition, this.getYRot(), false, true, PlayerSpawnChangeEvent.Cause.BED); // CraftBukkit
             if (this.level().isDay()) {
                return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_NOW);
             } else {
                if (!this.isCreative()) {
                   double d0 = 8.0D;
                   double d1 = 5.0D;
-                  Vec3 vec3 = Vec3.atBottomCenterOf(p_9115_);
-                  List<Monster> list = this.level().getEntitiesOfClass(Monster.class, new AABB(vec3.x() - 8.0D, vec3.y() - 5.0D, vec3.z() - 8.0D, vec3.x() + 8.0D, vec3.y() + 5.0D, vec3.z() + 8.0D), (p_9062_) -> {
-                     return p_9062_.isPreventingPlayerRest(this);
+                  Vec3 vec3d = Vec3.atBottomCenterOf(blockposition);
+                  List<Monster> list = this.level().getEntitiesOfClass(Monster.class, new AABB(vec3d.x() - 8.0D, vec3d.y() - 5.0D, vec3d.z() - 8.0D, vec3d.x() + 8.0D, vec3d.y() + 5.0D, vec3d.z() + 8.0D), (entitymonster) -> {
+                     return entitymonster.isPreventingPlayerRest(this);
                   });
+
                   if (!list.isEmpty()) {
                      return Either.left(Player.BedSleepingProblem.NOT_SAFE);
                   }
                }
 
+               return Either.right(Unit.INSTANCE);
+            }
+         }
+      } else {
+         return Either.left(Player.BedSleepingProblem.OTHER_PROBLEM);
+      }
+   }
+
+   public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos p_9115_, boolean force) {
+      var optAt = java.util.Optional.of(p_9115_);
+      var ret = net.minecraftforge.event.ForgeEventFactory.onPlayerSleepInBed(this, optAt);
+      if (ret != null) return Either.left(ret);
+
+      Direction direction = this.level().getBlockState(p_9115_).getValue(HorizontalDirectionalBlock.FACING);
+      Either<Player.BedSleepingProblem, Unit> bedResult = this.getBedResult(p_9115_, direction);
+
+      if (bedResult.left().orElse(null) == Player.BedSleepingProblem.OTHER_PROBLEM) {
+         return bedResult; // return immediately if the result is not bypassable by plugins
+      }
+
+      if (force) {
+         bedResult = Either.right(Unit.INSTANCE);
+      }
+
+      bedResult = org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callPlayerBedEnterEvent(this, p_9115_, bedResult);
+      if (bedResult.left().isPresent()) {
+         return bedResult;
+      }
+
+      {
+         {
+            {
                Either<Player.BedSleepingProblem, Unit> either = super.startSleepInBed(p_9115_).ifRight((p_9029_) -> {
                   this.awardStat(Stats.SLEEP_IN_BED);
                   CriteriaTriggers.SLEPT_IN_BED.trigger(this);
                });
+
                if (!this.serverLevel().canSleepThroughNights()) {
                   this.displayClientMessage(Component.translatable("sleep.not_possible"), true);
                }
@@ -866,9 +_,8 @@
                return either;
             }
          }
-      } else {
-         return Either.left(Player.BedSleepingProblem.OTHER_PROBLEM);
       }
+      // CraftBukkit end
    }
 
    public void startSleeping(BlockPos p_9190_) {
@@ -877,6 +_,7 @@
    }
 
    private boolean bedInRange(BlockPos p_9117_, Direction p_9118_) {
+      if (p_9118_ == null) return false;
       return this.isReachableBedBlock(p_9117_) || this.isReachableBedBlock(p_9117_.relative(p_9118_.getOpposite()));
    }
 
@@ -891,13 +_,31 @@
    }
 
    public void stopSleepInBed(boolean p_9165_, boolean p_9166_) {
+      if (!this.isSleeping()) return; // CraftBukkit - Can't leave bed if not in one!
+      // CraftBukkit start - fire PlayerBedLeaveEvent
+      org.bukkit.craftbukkit.v1_20_R2.entity.CraftPlayer player = this.getBukkitEntity();
+      BlockPos bedPosition = this.getSleepingPos().orElse(null);
+
+      org.bukkit.block.Block bed;
+      if (bedPosition != null) {
+         bed = this.level().getWorld().getBlockAt(bedPosition.getX(), bedPosition.getY(), bedPosition.getZ());
+      } else {
+         bed = this.level().getWorld().getBlockAt(player.getLocation());
+      }
+
+      PlayerBedLeaveEvent event = new PlayerBedLeaveEvent(player, bed, true);
+      this.level().getCraftServer().getPluginManager().callEvent(event);
+      if (event.isCancelled()) {
+         return;
+      }
+      // CraftBukkit end
       if (this.isSleeping()) {
          this.serverLevel().getChunkSource().broadcastAndSend(this, new ClientboundAnimatePacket(this, 2));
       }
 
       super.stopSleepInBed(p_9165_, p_9166_);
       if (this.connection != null) {
-         this.connection.teleport(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
+         this.connection.teleport(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot(), PlayerTeleportEvent.TeleportCause.EXIT_BED); // CraftBukkit
       }
 
    }
@@ -938,16 +_,46 @@
       this.containerCounter = this.containerCounter % 100 + 1;
    }
 
+   //Ketting start
+   public int nextContainerCounterInt() {
+      nextContainerCounter();
+      return containerCounter;
+   }
+   //Ketting end
+
    public OptionalInt openMenu(@Nullable MenuProvider p_9033_) {
       if (p_9033_ == null) {
          return OptionalInt.empty();
       } else {
+         // CraftBukkit start - SPIGOT-6552: Handle inventory closing in CraftEventFactory#callInventoryOpenEvent(...)
+         /*
          if (this.containerMenu != this.inventoryMenu) {
             this.closeContainer();
          }
+         */
+         // CraftBukkit end
 
          this.nextContainerCounter();
          AbstractContainerMenu abstractcontainermenu = p_9033_.createMenu(this.containerCounter, this.getInventory(), this);
+
+         // CraftBukkit start - Inventory open hook
+         if (abstractcontainermenu != null) {
+            abstractcontainermenu.setTitle(p_9033_.getDisplayName());
+
+            boolean cancelled = false;
+            abstractcontainermenu = org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callInventoryOpenEvent(this, abstractcontainermenu, cancelled);
+            if (abstractcontainermenu == null && !cancelled) { // Let pre-cancelled events fall through
+               // SPIGOT-5263 - close chest if cancelled
+               if (p_9033_ instanceof Container) {
+                  ((Container) p_9033_).stopOpen(this);
+               } else if (p_9033_ instanceof net.minecraft.world.level.block.ChestBlock.DoubleInventory) {
+                  // SPIGOT-5355 - double chests too :(
+                  ((net.minecraft.world.level.block.ChestBlock.DoubleInventory) p_9033_).inventorylargechest.stopOpen(this);
+               }
+               return OptionalInt.empty();
+            }
+         }
+         // CraftBukkit end
          if (abstractcontainermenu == null) {
             if (this.isSpectator()) {
                this.displayClientMessage(Component.translatable("container.spectatorCantOpen").withStyle(ChatFormatting.RED), true);
@@ -955,9 +_,13 @@
 
             return OptionalInt.empty();
          } else {
-            this.connection.send(new ClientboundOpenScreenPacket(abstractcontainermenu.containerId, abstractcontainermenu.getType(), p_9033_.getDisplayName()));
-            this.initMenu(abstractcontainermenu);
+            // CraftBukkit start
             this.containerMenu = abstractcontainermenu;
+            this.connection.send(new ClientboundOpenScreenPacket(abstractcontainermenu.containerId, abstractcontainermenu.getType(), abstractcontainermenu.getTitle()));
+            // CraftBukkit end
+
+            this.initMenu(abstractcontainermenu);
+            net.minecraftforge.event.ForgeEventFactory.onPlayerOpenContainer(this, this.containerMenu);
             return OptionalInt.of(this.containerCounter);
          }
       }
@@ -968,14 +_,26 @@
    }
 
    public void openHorseInventory(AbstractHorse p_9059_, Container p_9060_) {
-      if (this.containerMenu != this.inventoryMenu) {
-         this.closeContainer();
-      }
-
+      // CraftBukkit start - Inventory open hook
       this.nextContainerCounter();
+      AbstractContainerMenu container = new HorseInventoryMenu(this.containerCounter, this.getInventory(), p_9060_, p_9059_);
+      container.setTitle(p_9059_.getDisplayName());
+      container = org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callInventoryOpenEvent(this, container);
+
+      if (container == null) {
+         p_9060_.stopOpen(this);
+         return;
+      }
+      // CraftBukkit end
+      if (this.containerMenu != this.inventoryMenu) {
+         this.closeContainer();
+      }
+
+      // this.nextContainerCounter(); // CraftBukkit - moved up
       this.connection.send(new ClientboundHorseScreenOpenPacket(this.containerCounter, p_9060_.getContainerSize(), p_9059_.getId()));
-      this.containerMenu = new HorseInventoryMenu(this.containerCounter, this.getInventory(), p_9060_, p_9059_);
+      this.containerMenu = container; // CraftBukkit
       this.initMenu(this.containerMenu);
+      net.minecraftforge.event.ForgeEventFactory.onPlayerOpenContainer(this, this.containerMenu);
    }
 
    public void openItemGui(ItemStack p_9082_, InteractionHand p_9083_) {
@@ -994,6 +_,7 @@
    }
 
    public void closeContainer() {
+      org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.handleInventoryCloseEvent(this); // CraftBukkit
       this.connection.send(new ClientboundContainerClosePacket(this.containerMenu.containerId));
       this.doCloseContainer();
    }
@@ -1001,6 +_,7 @@
    public void doCloseContainer() {
       this.containerMenu.removed(this);
       this.inventoryMenu.transferState(this.containerMenu);
+      net.minecraftforge.event.ForgeEventFactory.onPlayerCloseContainer(this, this.containerMenu);
       this.containerMenu = this.inventoryMenu;
    }
 
@@ -1015,6 +_,16 @@
          }
 
          this.jumping = p_8983_;
+         // CraftBukkit start
+         if (p_8984_ != this.isShiftKeyDown()) {
+            PlayerToggleSneakEvent event = new PlayerToggleSneakEvent(this.getBukkitEntity(), p_8984_);
+            this.server.server.getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+               return;
+            }
+         }
+         // CraftBukkit end
          this.setShiftKeyDown(p_8984_);
       }
 
@@ -1022,14 +_,14 @@
 
    public void awardStat(Stat<?> p_9026_, int p_9027_) {
       this.stats.increment(this, p_9026_, p_9027_);
-      this.getScoreboard().forAllObjectives(p_9026_, this.getScoreboardName(), (p_8996_) -> {
+      this.level().getCraftServer().getScoreboardManager().getScoreboardScores(p_9026_, this.getScoreboardName(), (p_8996_) -> { // CraftBukkit - Get our scores instead
          p_8996_.add(p_9027_);
       });
    }
 
    public void resetStat(Stat<?> p_9024_) {
       this.stats.setValue(this, p_9024_, 0);
-      this.getScoreboard().forAllObjectives(p_9024_, this.getScoreboardName(), Score::reset);
+      this.level().getCraftServer().getScoreboardManager().getScoreboardScores(p_9024_, this.getScoreboardName(), Score::reset); // CraftBukkit - Get our scores instead
    }
 
    public int awardRecipes(Collection<RecipeHolder<?>> p_9129_) {
@@ -1074,6 +_,7 @@
 
    public void resetSentInfo() {
       this.lastSentHealth = -1.0E8F;
+      this.lastSentExp = -1; // CraftBukkit - Added to reset
    }
 
    public void displayClientMessage(Component p_9154_, boolean p_9155_) {
@@ -1121,19 +_,36 @@
          this.setScore(p_9016_.getScore());
       }
 
+      //Ketting start - copy over the forge captures
+      Inventory forgeCaptures = p_9016_.getForgeCapturesAndClear();
+      if (forgeCaptures != null)
+         forgeCaptures.items.stream().filter(item -> !item.isEmpty()).forEach(item -> this.getInventory().add(item));
+
+      this.getInventory().setChanged();
+      //Ketting end
+
       this.enchantmentSeed = p_9016_.enchantmentSeed;
       this.enderChestInventory = p_9016_.enderChestInventory;
       this.getEntityData().set(DATA_PLAYER_MODE_CUSTOMISATION, p_9016_.getEntityData().get(DATA_PLAYER_MODE_CUSTOMISATION));
       this.lastSentExp = -1;
       this.lastSentHealth = -1.0F;
       this.lastSentFood = -1;
-      this.recipeBook.copyOverData(p_9016_.recipeBook);
+      // this.recipeBook.copyOverData(p_9016_.recipeBook); // CraftBukkit
       this.seenCredits = p_9016_.seenCredits;
       this.enteredNetherPosition = p_9016_.enteredNetherPosition;
       this.chunkTrackingView = p_9016_.chunkTrackingView;
       this.setShoulderEntityLeft(p_9016_.getShoulderEntityLeft());
       this.setShoulderEntityRight(p_9016_.getShoulderEntityRight());
       this.setLastDeathLocation(p_9016_.getLastDeathLocation());
+
+      //Copy over a section of the Entity Data from the old player.
+      //Allows mods to specify data that persists after players respawn.
+      CompoundTag old = p_9016_.getPersistentData();
+      if (old.contains(PERSISTED_NBT_TAG))
+          getPersistentData().put(PERSISTED_NBT_TAG, old.get(PERSISTED_NBT_TAG));
+      net.minecraftforge.event.ForgeEventFactory.onPlayerClone(this, p_9016_, !p_9017_);
+      this.tabListHeader = p_9016_.tabListHeader;
+      this.tabListFooter = p_9016_.tabListFooter;
    }
 
    protected void onEffectAdded(MobEffectInstance p_143393_, @Nullable Entity p_143394_) {
@@ -1172,6 +_,12 @@
    }
 
    public boolean teleportTo(ServerLevel p_265564_, double p_265424_, double p_265680_, double p_265312_, Set<RelativeMovement> p_265192_, float p_265059_, float p_265266_) {
+      // CraftBukkit start
+      return teleportTo(p_265564_, p_265424_, p_265680_, p_265312_, p_265192_, p_265059_, p_265266_, PlayerTeleportEvent.TeleportCause.UNKNOWN);
+   }
+
+   public boolean teleportTo(ServerLevel p_265564_, double p_265424_, double p_265680_, double p_265312_, Set<RelativeMovement> p_265192_, float p_265059_, float p_265266_, PlayerTeleportEvent.TeleportCause cause) {
+      // CraftBukkit end
       ChunkPos chunkpos = new ChunkPos(BlockPos.containing(p_265424_, p_265680_, p_265312_));
       p_265564_.getChunkSource().addRegionTicket(TicketType.POST_TELEPORT, chunkpos, 1, this.getId());
       this.stopRiding();
@@ -1180,9 +_,9 @@
       }
 
       if (p_265564_ == this.level()) {
-         this.connection.teleport(p_265424_, p_265680_, p_265312_, p_265059_, p_265266_, p_265192_);
+         this.connection.teleport(p_265424_, p_265680_, p_265312_, p_265059_, p_265266_, p_265192_, cause); // CraftBukkit
       } else {
-         this.teleportTo(p_265564_, p_265424_, p_265680_, p_265312_, p_265059_, p_265266_);
+         this.teleportTo(p_265564_, p_265424_, p_265680_, p_265312_, p_265059_, p_265266_, cause); // CraftBukkit
       }
 
       this.setYHeadRot(p_265059_);
@@ -1214,6 +_,7 @@
    }
 
    public boolean setGameMode(GameType p_143404_) {
+      p_143404_ = net.minecraftforge.common.ForgeHooks.onChangeGameType(this, this.gameMode.getGameModeForPlayer(), p_143404_);
       if (!this.gameMode.changeGameModeForPlayer(p_143404_)) {
          return false;
       } else {
@@ -1275,6 +_,16 @@
    }
 
    public void updateOptions(ClientInformation p_297843_) {
+      // CraftBukkit start
+      if (getMainArm() != p_297843_.mainHand()) {
+         PlayerChangedMainHandEvent event = new PlayerChangedMainHandEvent(getBukkitEntity(), getMainArm() == HumanoidArm.LEFT ? org.bukkit.inventory.MainHand.LEFT : org.bukkit.inventory.MainHand.RIGHT);
+         this.server.server.getPluginManager().callEvent(event);
+      }
+      if (!this.language.equals(p_297843_.language())) {
+         PlayerLocaleChangeEvent event = new PlayerLocaleChangeEvent(getBukkitEntity(), p_297843_.language());
+         this.server.server.getPluginManager().callEvent(event);
+      }
+      // CraftBukkit end
       this.language = p_297843_.language();
       this.requestedViewDistance = p_297843_.viewDistance();
       this.chatVisibility = p_297843_.chatVisibility();
@@ -1348,11 +_,13 @@
    public void setCamera(@Nullable Entity p_9214_) {
       Entity entity = this.getCamera();
       this.camera = (Entity)(p_9214_ == null ? this : p_9214_);
+      while (this.camera instanceof net.minecraftforge.entity.PartEntity<?> partEntity)
+         this.camera = partEntity.getParent(); // FORGE: fix MC-46486
       if (entity != this.camera) {
          Level level = this.camera.level();
          if (level instanceof ServerLevel) {
             ServerLevel serverlevel = (ServerLevel)level;
-            this.teleportTo(serverlevel, this.camera.getX(), this.camera.getY(), this.camera.getZ(), Set.of(), this.getYRot(), this.getXRot());
+            this.teleportTo(serverlevel, this.camera.getX(), this.camera.getY(), this.camera.getZ(), Set.of(), this.getYRot(), this.getXRot(), PlayerTeleportEvent.TeleportCause.SPECTATE); // CraftBukkit
          }
 
          if (p_9214_ != null) {
@@ -1387,7 +_,11 @@
 
    @Nullable
    public Component getTabListDisplayName() {
-      return null;
+      if (!this.hasTabListName) {
+         this.tabListDisplayName = net.minecraftforge.event.ForgeEventFactory.getPlayerTabListDisplayName(this);
+         this.hasTabListName = true;
+      }
+      return this.tabListDisplayName;
    }
 
    public void swing(InteractionHand p_9031_) {
@@ -1407,27 +_,40 @@
       return this.advancements;
    }
 
+   // CraftBukkit start
    public void teleportTo(ServerLevel p_9000_, double p_9001_, double p_9002_, double p_9003_, float p_9004_, float p_9005_) {
+      this.teleportTo(p_9000_, p_9001_, p_9002_, p_9003_, p_9004_, p_9005_, PlayerTeleportEvent.TeleportCause.UNKNOWN);
+   }
+
+   public void teleportTo(ServerLevel p_9000_, double p_9001_, double p_9002_, double p_9003_, float p_9004_, float p_9005_, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+      // CraftBukkit end
       this.setCamera(this);
       this.stopRiding();
+      /* CraftBukkit start - replace with bukkit handling for multi-world
       if (p_9000_ == this.level()) {
          this.connection.teleport(p_9001_, p_9002_, p_9003_, p_9004_, p_9005_);
       } else {
+         if (net.minecraftforge.event.ForgeEventFactory.onTravelToDimension(this, p_9000_.dimension())) return;
          ServerLevel serverlevel = this.serverLevel();
          LevelData leveldata = p_9000_.getLevelData();
          this.connection.send(new ClientboundRespawnPacket(this.createCommonSpawnInfo(p_9000_), (byte)3));
          this.connection.send(new ClientboundChangeDifficultyPacket(leveldata.getDifficulty(), leveldata.isDifficultyLocked()));
          this.server.getPlayerList().sendPlayerPermissionLevel(this);
          serverlevel.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
-         this.unsetRemoved();
+         this.revive();
          this.moveTo(p_9001_, p_9002_, p_9003_, p_9004_, p_9005_);
          this.setServerLevel(p_9000_);
          p_9000_.addDuringCommandTeleport(this);
          this.triggerDimensionChangeTriggers(serverlevel);
          this.connection.teleport(p_9001_, p_9002_, p_9003_, p_9004_, p_9005_);
+         this.gameMode.setLevel(p_9000_);
          this.server.getPlayerList().sendLevelInfo(this, p_9000_);
          this.server.getPlayerList().sendAllPlayerInfo(this);
+         net.minecraftforge.event.ForgeEventFactory.onPlayerChangedDimension(this, serverlevel.dimension(), p_9000_.dimension());
       }
+      */
+      this.getBukkitEntity().teleport(new org.bukkit.Location(p_9000_.getWorld(), p_9001_, p_9002_, p_9003_, p_9004_, p_9005_), cause);
+      // CraftBukkit end
 
    }
 
@@ -1449,6 +_,35 @@
    }
 
    public void setRespawnPosition(ResourceKey<Level> p_9159_, @Nullable BlockPos p_9160_, float p_9161_, boolean p_9162_, boolean p_9163_) {
+      // CraftBukkit start
+      this.setRespawnPosition(p_9159_, p_9160_, p_9161_, p_9162_, p_9163_, PlayerSpawnChangeEvent.Cause.UNKNOWN);
+   }
+
+   public void setRespawnPosition(ResourceKey<Level> p_9159_, @Nullable BlockPos p_9160_, float p_9161_, boolean p_9162_, boolean p_9163_, PlayerSpawnChangeEvent.Cause cause) {
+      if (net.minecraftforge.event.ForgeEventFactory.onPlayerSpawnSet(this, p_9160_ == null ? Level.OVERWORLD : p_9159_, p_9160_, p_9162_))
+         return;
+
+      ServerLevel newWorld = this.server.getLevel(p_9159_);
+      org.bukkit.Location newSpawn = (p_9160_ != null) ? org.bukkit.craftbukkit.v1_20_R2.util.CraftLocation.toBukkit(p_9160_, newWorld.getWorld(), p_9161_, 0) : null;
+
+      PlayerSpawnChangeEvent event = new PlayerSpawnChangeEvent(this.getBukkitEntity(), newSpawn, p_9162_, cause);
+      org.bukkit.Bukkit.getServer().getPluginManager().callEvent(event);
+      if (event.isCancelled()) {
+         return;
+      }
+      newSpawn = event.getNewSpawn();
+      p_9162_ = event.isForced();
+
+      if (newSpawn != null) {
+         p_9159_ = ((org.bukkit.craftbukkit.v1_20_R2.CraftWorld) newSpawn.getWorld()).getHandle().dimension();
+         p_9160_ = BlockPos.containing(newSpawn.getX(), newSpawn.getY(), newSpawn.getZ());
+         p_9161_ = newSpawn.getYaw();
+      } else {
+         p_9159_ = Level.OVERWORLD;
+         p_9160_ = null;
+         p_9161_ = 0.0F;
+      }
+      // CraftBukkit end
       if (p_9160_ != null) {
          boolean flag = p_9160_.equals(this.respawnPosition) && p_9159_.equals(this.respawnDimension);
          if (p_9163_ && !flag) {
@@ -1493,6 +_,9 @@
       if (itementity == null) {
          return null;
       } else {
+         if (captureDrops() != null)
+            captureDrops().add(itementity);
+         else
          this.level().addFreshEntity(itementity);
          ItemStack itemstack = itementity.getItem();
          if (p_9087_) {
@@ -1507,6 +_,75 @@
       }
    }
 
+   /**
+    * Returns the language last reported by the player as their local language.
+    * Defaults to en_us if the value is unknown.
+    */
+   public String getLanguage() {
+      return this.language;
+   }
+
+   private Component tabListHeader = Component.empty();
+   private Component tabListFooter = Component.empty();
+
+   public Component getTabListHeader() {
+       return this.tabListHeader;
+   }
+
+   /**
+    * Set the tab list header while preserving the footer.
+    *
+    * @param header the new header, or {@link Component#empty()} to clear
+    */
+   public void setTabListHeader(final Component header) {
+       this.setTabListHeaderFooter(header, this.tabListFooter);
+   }
+
+   public Component getTabListFooter() {
+       return this.tabListFooter;
+   }
+
+   /**
+    * Set the tab list footer while preserving the header.
+    *
+    * @param footer the new footer, or {@link Component#empty()} to clear
+    */
+   public void setTabListFooter(final Component footer) {
+       this.setTabListHeaderFooter(this.tabListHeader, footer);
+   }
+
+   /**
+    * Set the tab list header and footer at once.
+    *
+    * @param header the new header, or {@link Component#empty()} to clear
+    * @param footer the new footer, or {@link Component#empty()} to clear
+    */
+   public void setTabListHeaderFooter(final Component header, final Component footer) {
+       if (java.util.Objects.equals(header, this.tabListHeader)
+           && java.util.Objects.equals(footer, this.tabListFooter)) {
+           return;
+       }
+
+       this.tabListHeader = java.util.Objects.requireNonNull(header, "header");
+       this.tabListFooter = java.util.Objects.requireNonNull(footer, "footer");
+
+       this.connection.send(new net.minecraft.network.protocol.game.ClientboundTabListPacket(header, footer));
+   }
+
+   // We need this as tablistDisplayname may be null even if the event was fired.
+   public boolean hasTabListName = false;
+   public Component tabListDisplayName = null;
+   /**
+    * Force the name displayed in the tab list to refresh, by firing {@link net.minecraftforge.event.entity.player.PlayerEvent.TabListNameFormat}.
+    */
+   public void refreshTabListName() {
+      Component oldName = this.tabListDisplayName;
+      this.tabListDisplayName = net.minecraftforge.event.ForgeEventFactory.getPlayerTabListDisplayName(this);
+      if (!java.util.Objects.equals(oldName, this.tabListDisplayName)) {
+         this.getServer().getPlayerList().broadcastAll(new net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket(net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME, this));
+      }
+   }
+
    public TextFilter getTextFilter() {
       return this.textFilter;
    }
@@ -1566,11 +_,14 @@
 
    public boolean drop(boolean p_182295_) {
       Inventory inventory = this.getInventory();
+      ItemStack selected = inventory.getSelected();
+      if (selected.isEmpty() || !selected.onDroppedByPlayer(this)) return false;
+      if (isUsingItem() && getUsedItemHand() == InteractionHand.MAIN_HAND && (p_182295_ || selected.getCount() == 1)) stopUsingItem(); // Forge: fix MC-231097 on the serverside
       ItemStack itemstack = inventory.removeFromSelected(p_182295_);
       this.containerMenu.findSlot(inventory, inventory.selected).ifPresent((p_287377_) -> {
          this.containerMenu.setRemoteSlot(p_287377_, inventory.getSelected());
       });
-      return this.drop(itemstack, false, true) != null;
+      return net.minecraftforge.common.ForgeHooks.onPlayerTossEvent(this, itemstack, true) != null;
    }
 
    public boolean allowsListing() {
@@ -1636,4 +_,146 @@
    public CommonPlayerSpawnInfo createCommonSpawnInfo(ServerLevel p_301182_) {
       return new CommonPlayerSpawnInfo(p_301182_.dimensionTypeId(), p_301182_.dimension(), BiomeManager.obfuscateSeed(p_301182_.getSeed()), this.gameMode.getGameModeForPlayer(), this.gameMode.getPreviousGameModeForPlayer(), p_301182_.isDebug(), p_301182_.isFlat(), this.getLastDeathLocation(), this.getPortalCooldown());
    }
+
+   // CraftBukkit start - Add per-player time and weather.
+   public long timeOffset = 0;
+   public boolean relativeTime = true;
+
+   public long getPlayerTime() {
+      if (this.relativeTime) {
+         // Adds timeOffset to the current server time.
+         return this.level().getDayTime() + this.timeOffset;
+      } else {
+         // Adds timeOffset to the beginning of this day.
+         return this.level().getDayTime() - (this.level().getDayTime() % 24000) + this.timeOffset;
+      }
+   }
+
+   public org.bukkit.WeatherType weather = null;
+
+   public org.bukkit.WeatherType getPlayerWeather() {
+      return this.weather;
+   }
+
+   public void setPlayerWeather(org.bukkit.WeatherType type, boolean plugin) {
+      if (!plugin && this.weather != null) {
+         return;
+      }
+
+      if (plugin) {
+         this.weather = type;
+      }
+
+      if (type == org.bukkit.WeatherType.DOWNFALL) {
+         this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.STOP_RAINING, 0));
+      } else {
+         this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0));
+      }
+   }
+
+   private float pluginRainPosition;
+   private float pluginRainPositionPrevious;
+
+   public void updateWeather(float oldRain, float newRain, float oldThunder, float newThunder) {
+      if (this.weather == null) {
+         // Vanilla
+         if (oldRain != newRain) {
+            this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, newRain));
+         }
+      } else {
+         // Plugin
+         if (pluginRainPositionPrevious != pluginRainPosition) {
+            this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, pluginRainPosition));
+         }
+      }
+
+      if (oldThunder != newThunder) {
+         if (weather == org.bukkit.WeatherType.DOWNFALL || weather == null) {
+            this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, newThunder));
+         } else {
+            this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, 0));
+         }
+      }
+   }
+
+   public void tickWeather() {
+      if (this.weather == null) return;
+
+      pluginRainPositionPrevious = pluginRainPosition;
+      if (weather == org.bukkit.WeatherType.DOWNFALL) {
+         pluginRainPosition += 0.01;
+      } else {
+         pluginRainPosition -= 0.01;
+      }
+
+      pluginRainPosition = Mth.clamp(pluginRainPosition, 0.0F, 1.0F);
+   }
+
+   public void resetPlayerWeather() {
+      this.weather = null;
+      this.setPlayerWeather(this.level().getLevelData().isRaining() ? org.bukkit.WeatherType.DOWNFALL : org.bukkit.WeatherType.CLEAR, false);
+   }
+
+   @Override
+   public String toString() {
+      return super.toString() + "(" + this.getScoreboardName() + " at " + this.getX() + "," + this.getY() + "," + this.getZ() + ")";
+   }
+
+   // SPIGOT-1903, MC-98153
+   public void forceSetPositionRotation(double x, double y, double z, float yaw, float pitch) {
+      this.moveTo(x, y, z, yaw, pitch);
+      this.connection.resetPosition();
+   }
+
+   @Override
+   public boolean isImmobile() {
+      return super.isImmobile() || !getBukkitEntity().isOnline();
+   }
+
+   @Override
+   public net.minecraft.world.scores.Scoreboard getScoreboard() {
+      return getBukkitEntity().getScoreboard().getHandle();
+   }
+
+   public void reset() {
+      float exp = 0;
+      boolean keepInventory = this.level().getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY);
+
+      if (this.keepLevel) { // CraftBukkit - SPIGOT-6687: Only use keepLevel (was pre-set with RULE_KEEPINVENTORY value in PlayerDeathEvent)
+         exp = this.experienceProgress;
+         this.newTotalExp = this.totalExperience;
+         this.newLevel = this.experienceLevel;
+      }
+
+      this.setHealth(this.getMaxHealth());
+      this.stopUsingItem(); // CraftBukkit - SPIGOT-6682: Clear active item on reset
+      this.setRemainingFireTicks(0);
+      this.fallDistance = 0;
+      this.foodData = new net.minecraft.world.food.FoodData(this);
+      this.experienceLevel = this.newLevel;
+      this.totalExperience = this.newTotalExp;
+      this.experienceProgress = 0;
+      this.deathTime = 0;
+      this.setArrowCount(0, true); // CraftBukkit - ArrowBodyCountChangeEvent
+      this.removeAllEffects(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.DEATH);
+      this.effectsDirty = true;
+      this.containerMenu = this.inventoryMenu;
+      this.lastHurtByPlayer = null;
+      this.lastHurtByMob = null;
+      this.combatTracker = new net.minecraft.world.damagesource.CombatTracker(this);
+      this.lastSentExp = -1;
+      if (this.keepLevel) { // CraftBukkit - SPIGOT-6687: Only use keepLevel (was pre-set with RULE_KEEPINVENTORY value in PlayerDeathEvent)
+         this.experienceProgress = exp;
+      } else {
+         this.giveExperiencePoints(this.newExp);
+      }
+      this.keepLevel = false;
+      this.setDeltaMovement(0, 0, 0); // CraftBukkit - SPIGOT-6948: Reset velocity on death
+   }
+
+   @Override
+   public org.bukkit.craftbukkit.v1_20_R2.entity.CraftPlayer getBukkitEntity() {
+      return (org.bukkit.craftbukkit.v1_20_R2.entity.CraftPlayer) super.getBukkitEntity();
+   }
+   // CraftBukkit end
 }
