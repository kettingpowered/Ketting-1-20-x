--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -18,14 +_,14 @@
 import java.io.Writer;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.function.Function;
@@ -114,6 +_,6 @@
 import net.minecraft.world.level.StructureManager;
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.SnowLayerBlock;
@@ -136,7 +_,7 @@
 import net.minecraft.world.level.gameevent.DynamicGameEventListener;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.gameevent.GameEventDispatcher;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 import net.minecraft.world.level.levelgen.structure.Structure;
 import net.minecraft.world.level.levelgen.structure.StructureCheck;
@@ -146,15 +_,15 @@
 import net.minecraft.world.level.portal.PortalForcer;
 import net.minecraft.world.level.saveddata.maps.MapIndex;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.ServerLevelData;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.world.ticks.LevelTicks;
 import org.slf4j.Logger;
 
 public class ServerLevel extends Level implements WorldGenLevel {
@@ -169,9 +_,9 @@
    final List<ServerPlayer> players = Lists.newArrayList();
    private final ServerChunkCache chunkSource;
    private final MinecraftServer server;
-   private final ServerLevelData serverLevelData;
+   public final net.minecraft.world.level.storage.PrimaryLevelData serverLevelData; // CraftBukkit - type
    final EntityTickList entityTickList = new EntityTickList();
-   private final PersistentEntitySectionManager<Entity> entityManager;
+   public final PersistentEntitySectionManager<Entity> entityManager;
    private final GameEventDispatcher gameEventDispatcher;
    public boolean noSave;
    private final SleepStatus sleepStatus;
@@ -188,24 +_,121 @@
    private final List<CustomSpawner> customSpawners;
    @Nullable
    private EndDragonFight dragonFight;
-   final Int2ObjectMap<EnderDragonPart> dragonParts = new Int2ObjectOpenHashMap<>();
+   final Int2ObjectMap<net.minecraftforge.entity.PartEntity<?>> dragonParts = new Int2ObjectOpenHashMap<>();
    private final StructureManager structureManager;
    private final StructureCheck structureCheck;
    private final boolean tickTime;
    private final RandomSequences randomSequences;
-
+   private net.minecraftforge.common.util.LevelCapabilityData capabilityData;
+
+   // CraftBukkit start
+   public final LevelStorageSource.LevelStorageAccess convertable;
+   public final UUID uuid;
+
+   public LevelChunk getChunkIfLoaded(int x, int z) {
+      return this.chunkSource.getChunk(x, z, false);
+   }
+
+   @Override
+   public ResourceKey<LevelStem> getTypeKey() {
+      return convertable.dimensionType;
+   }
+
+   //Ketting start
+   // Add env and gen to constructor
+   public ServerLevel(MinecraftServer p_214999_, Executor p_215000_, LevelStorageSource.LevelStorageAccess p_215001_, ServerLevelData p_215002_, ResourceKey<Level> p_215003_, LevelStem p_215004_, ChunkProgressListener p_215005_, boolean p_215006_, long p_215007_, List<CustomSpawner> p_215008_, boolean p_215009_, @Nullable RandomSequences p_288977_, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider) {
+      super(p_215002_, p_215003_, p_214999_.registryAccess(), p_215004_.type(), p_214999_::getProfiler, false, p_215006_, p_215007_, p_214999_.getMaxChainedNeighborUpdates(), gen, biomeProvider, env);
+      convertable = p_215001_;
+      uuid = org.bukkit.craftbukkit.v1_20_R2.util.WorldUUID.getUUID(p_215001_.levelDirectory.path().toFile());
+      // CraftBukkit end
+      this.tickTime = p_215009_;
+      this.server = p_214999_;
+      this.customSpawners = p_215008_;
+      if (p_215002_ instanceof net.minecraft.world.level.storage.PrimaryLevelData primary)
+         this.serverLevelData = primary;
+      else
+         this.serverLevelData = org.kettingpowered.ketting.utils.DelegateWorldInfo.wrap((net.minecraft.world.level.storage.DerivedLevelData) p_215002_);
+      ChunkGenerator chunkgenerator = p_215004_.generator();
+      // CraftBukkit start
+      serverLevelData.setWorld(this);
+
+      if (biomeProvider != null) {
+         net.minecraft.world.level.biome.BiomeSource worldChunkManager = new org.bukkit.craftbukkit.v1_20_R2.generator.CustomWorldChunkManager(getWorld(), biomeProvider, server.registryAccess().registryOrThrow(Registries.BIOME));
+         if (chunkgenerator instanceof net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator cga) {
+            chunkgenerator = new net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator(worldChunkManager, cga.settings);
+         } else if (chunkgenerator instanceof net.minecraft.world.level.levelgen.FlatLevelSource cpf) {
+            chunkgenerator = new net.minecraft.world.level.levelgen.FlatLevelSource(cpf.settings(), worldChunkManager);
+         }
+      }
+
+      if (gen != null) {
+         chunkgenerator = new org.bukkit.craftbukkit.v1_20_R2.generator.CustomChunkGenerator(this, chunkgenerator, gen);
+      }
+      // CraftBukkit end
+      boolean flag = p_214999_.forceSynchronousWrites();
+      DataFixer datafixer = p_214999_.getFixerUpper();
+      EntityPersistentStorage<Entity> entitypersistentstorage = new EntityStorage(this, p_215001_.getDimensionPath(p_215003_).resolve("entities"), datafixer, flag, p_214999_);
+
+      this.entityManager = new PersistentEntitySectionManager<>(Entity.class, new ServerLevel.EntityCallbacks(), entitypersistentstorage);
+      this.chunkSource = new ServerChunkCache(this, p_215001_, datafixer, p_214999_.getStructureManager(), p_215000_, chunkgenerator, this.spigotConfig.viewDistance, this.spigotConfig.simulationDistance, flag, p_215005_, this.entityManager::updateChunkStatus, () -> { // Spigot
+         return p_214999_.overworld().getDataStorage();
+      });
+      this.chunkSource.getGeneratorState().ensureStructuresGenerated();
+      this.portalForcer = new PortalForcer(this);
+      this.updateSkyBrightness();
+      this.prepareWeather();
+      this.getWorldBorder().setAbsoluteMaxSize(p_214999_.getAbsoluteMaxWorldSize());
+      this.raids = this.getDataStorage().computeIfAbsent(Raids.factory(this), Raids.getFileId(this.dimensionTypeRegistration()));
+      if (!p_214999_.isSingleplayer()) {
+         p_215002_.setGameType(p_214999_.getDefaultGameType());
+      }
+
+      long i = p_214999_.getWorldData().worldGenOptions().seed();
+      this.structureCheck = new StructureCheck(this.chunkSource.chunkScanner(), this.registryAccess(), p_214999_.getStructureManager(), p_215003_, chunkgenerator, this.chunkSource.randomState(), this, chunkgenerator.getBiomeSource(), i, datafixer);
+      this.structureCheck.setTypeKey(getTypeKey()); //Ketting
+      this.structureManager = new StructureManager(this, this.serverLevelData.worldGenOptions(), this.structureCheck); // CraftBukkit
+      if ((this.dimension() == Level.END && this.dimensionTypeRegistration().is(BuiltinDimensionTypes.END)) || env == org.bukkit.World.Environment.THE_END) { // CraftBukkit - Allow to create EnderDragonBattle in default and custom END
+         this.dragonFight = new EndDragonFight(this, this.serverLevelData.worldGenOptions().seed(), this.serverLevelData.endDragonFightData()); // CraftBukkit
+      } else {
+         this.dragonFight = null;
+      }
+
+      this.sleepStatus = new SleepStatus();
+      this.gameEventDispatcher = new GameEventDispatcher(this);
+      this.randomSequences = Objects.requireNonNullElseGet(p_288977_, () -> {
+         return this.getDataStorage().computeIfAbsent(RandomSequences.factory(i), "random_sequences");
+      });
+      this.initCapabilities();
+   }
+
+   /**
+    * Use bukkit version
+    * @see #ServerLevel(MinecraftServer, Executor, LevelStorageSource.LevelStorageAccess, ServerLevelData, ResourceKey, LevelStem, ChunkProgressListener, boolean, long, List, boolean, RandomSequences, org.bukkit.World.Environment, org.bukkit.generator.ChunkGenerator, org.bukkit.generator.BiomeProvider)
+    */
+   @Deprecated
+   //Ketting end
    public ServerLevel(MinecraftServer p_214999_, Executor p_215000_, LevelStorageSource.LevelStorageAccess p_215001_, ServerLevelData p_215002_, ResourceKey<Level> p_215003_, LevelStem p_215004_, ChunkProgressListener p_215005_, boolean p_215006_, long p_215007_, List<CustomSpawner> p_215008_, boolean p_215009_, @Nullable RandomSequences p_288977_) {
       super(p_215002_, p_215003_, p_214999_.registryAccess(), p_215004_.type(), p_214999_::getProfiler, false, p_215006_, p_215007_, p_214999_.getMaxChainedNeighborUpdates());
+      convertable = p_215001_;
+      uuid = org.bukkit.craftbukkit.v1_20_R2.util.WorldUUID.getUUID((p_215002_ instanceof net.minecraft.world.level.storage.DerivedLevelData ? p_215001_.getDimensionPath(p_215003_) : p_215001_.levelDirectory.path()).toFile()); //Ketting
+      // CraftBukkit end
       this.tickTime = p_215009_;
       this.server = p_214999_;
       this.customSpawners = p_215008_;
-      this.serverLevelData = p_215002_;
+      if (p_215002_ instanceof net.minecraft.world.level.storage.PrimaryLevelData primary)
+         this.serverLevelData = primary;
+      else
+         this.serverLevelData = org.kettingpowered.ketting.utils.DelegateWorldInfo.wrap((net.minecraft.world.level.storage.DerivedLevelData) p_215002_);
       ChunkGenerator chunkgenerator = p_215004_.generator();
+      // CraftBukkit start
+      serverLevelData.setWorld(this);
+      // CraftBukkit end
       boolean flag = p_214999_.forceSynchronousWrites();
       DataFixer datafixer = p_214999_.getFixerUpper();
       EntityPersistentStorage<Entity> entitypersistentstorage = new EntityStorage(this, p_215001_.getDimensionPath(p_215003_).resolve("entities"), datafixer, flag, p_214999_);
+
       this.entityManager = new PersistentEntitySectionManager<>(Entity.class, new ServerLevel.EntityCallbacks(), entitypersistentstorage);
-      this.chunkSource = new ServerChunkCache(this, p_215001_, datafixer, p_214999_.getStructureManager(), p_215000_, chunkgenerator, p_214999_.getPlayerList().getViewDistance(), p_214999_.getPlayerList().getSimulationDistance(), flag, p_215005_, this.entityManager::updateChunkStatus, () -> {
+      this.chunkSource = new ServerChunkCache(this, p_215001_, datafixer, p_214999_.getStructureManager(), p_215000_, chunkgenerator, this.spigotConfig.viewDistance, this.spigotConfig.simulationDistance, flag, p_215005_, this.entityManager::updateChunkStatus, () -> { // Spigot
          return p_214999_.overworld().getDataStorage();
       });
       this.chunkSource.getGeneratorState().ensureStructuresGenerated();
@@ -220,9 +_,9 @@
 
       long i = p_214999_.getWorldData().worldGenOptions().seed();
       this.structureCheck = new StructureCheck(this.chunkSource.chunkScanner(), this.registryAccess(), p_214999_.getStructureManager(), p_215003_, chunkgenerator, this.chunkSource.randomState(), this, chunkgenerator.getBiomeSource(), i, datafixer);
-      this.structureManager = new StructureManager(this, p_214999_.getWorldData().worldGenOptions(), this.structureCheck);
+      this.structureManager = new StructureManager(this, this.serverLevelData.worldGenOptions(), this.structureCheck); // CraftBukkit
       if (this.dimension() == Level.END && this.dimensionTypeRegistration().is(BuiltinDimensionTypes.END)) {
-         this.dragonFight = new EndDragonFight(this, i, p_214999_.getWorldData().endDragonFightData());
+         this.dragonFight = new EndDragonFight(this, this.serverLevelData.worldGenOptions().seed(), this.serverLevelData.endDragonFightData()); // CraftBukkit
       } else {
          this.dragonFight = null;
       }
@@ -232,6 +_,7 @@
       this.randomSequences = Objects.requireNonNullElseGet(p_288977_, () -> {
          return this.getDataStorage().computeIfAbsent(RandomSequences.factory(i), "random_sequences");
       });
+      this.initCapabilities();
    }
 
    /** @deprecated */
@@ -265,13 +_,23 @@
       profilerfiller.popPush("weather");
       this.advanceWeatherCycle();
       int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
+      long j;
+
       if (this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
+         // CraftBukkit start
+         j = this.levelData.getDayTime() + 24000L;
+         org.bukkit.event.world.TimeSkipEvent event = new org.bukkit.event.world.TimeSkipEvent(this.getWorld(), org.bukkit.event.world.TimeSkipEvent.SkipReason.NIGHT_SKIP, (j - j % 24000L) - this.getDayTime());
          if (this.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)) {
-            long j = this.levelData.getDayTime() + 24000L;
-            this.setDayTime(j - j % 24000L);
+            this.getCraftServer().getPluginManager().callEvent(event);
+            if (!event.isCancelled()) {
+               this.setDayTime(this.getDayTime() + event.getSkipAmount());
+            }
          }
 
-         this.wakeUpAllPlayers();
+         if (!event.isCancelled()) {
+            this.wakeUpAllPlayers();
+         }
+         // CraftBukkit end
          if (this.getGameRules().getBoolean(GameRules.RULE_WEATHER_CYCLE) && this.isRaining()) {
             this.resetWeatherCycle();
          }
@@ -280,6 +_,7 @@
       this.updateSkyBrightness();
       this.tickTime();
       profilerfiller.popPush("tickPending");
+      timings.doTickPending.startTiming(); // Spigot
       if (!this.isDebug()) {
          long k = this.getGameTime();
          profilerfiller.push("blockTicks");
@@ -288,31 +_,37 @@
          this.fluidTicks.tick(k, 65536, this::tickFluid);
          profilerfiller.pop();
       }
+      timings.doTickPending.stopTiming(); // Spigot
 
       profilerfiller.popPush("raid");
       this.raids.tick();
       profilerfiller.popPush("chunkSource");
       this.getChunkSource().tick(p_8794_, true);
       profilerfiller.popPush("blockEvents");
+      timings.doSounds.startTiming(); // Spigot
       this.runBlockEvents();
+      timings.doSounds.stopTiming(); // Spigot
       this.handlingTick = false;
       profilerfiller.pop();
-      boolean flag = !this.players.isEmpty() || !this.getForcedChunks().isEmpty();
+      boolean flag = true || !this.players.isEmpty() || net.minecraftforge.common.world.ForgeChunkManager.hasForcedChunks(this); //Forge: Replace vanilla's has forced chunk check with forge's that checks both the vanilla and forge added ones // CraftBukkit - this prevents entity cleanup, other issues on servers with no players
       if (flag) {
          this.resetEmptyTime();
       }
 
       if (flag || this.emptyTime++ < 300) {
          profilerfiller.push("entities");
+         timings.tickEntities.startTiming(); // Spigot
          if (this.dragonFight != null) {
             profilerfiller.push("dragonFight");
             this.dragonFight.tick();
             profilerfiller.pop();
          }
 
+         org.spigotmc.ActivationRange.activateEntities(this); // Spigot
+         timings.entityTick.startTiming(); // Spigot
          this.entityTickList.forEach((p_184065_) -> {
             if (!p_184065_.isRemoved()) {
-               if (this.shouldDiscardEntity(p_184065_)) {
+               if (false && this.shouldDiscardEntity(p_184065_)) { // CraftBukkit - We prevent spawning in general, so this butchering is not needed
                   p_184065_.discard();
                } else {
                   profilerfiller.push("checkDespawn");
@@ -329,12 +_,16 @@
                      }
 
                      profilerfiller.push("tick");
-                     this.guardEntityTick(this::tickNonPassenger, p_184065_);
+                     if (!p_184065_.isRemoved() && !(p_184065_ instanceof net.minecraftforge.entity.PartEntity)) {
+                        this.guardEntityTick(this::tickNonPassenger, p_184065_);
+                     }
                      profilerfiller.pop();
                   }
                }
             }
          });
+         timings.entityTick.stopTiming(); // Spigot
+         timings.tickEntities.stopTiming(); // Spigot
          profilerfiller.pop();
          this.tickBlockEntities();
       }
@@ -393,7 +_,7 @@
       int j = chunkpos.getMinBlockZ();
       ProfilerFiller profilerfiller = this.getProfiler();
       profilerfiller.push("thunder");
-      if (flag && this.isThundering() && this.random.nextInt(100000) == 0) {
+      if (flag && this.isThundering() && this.spigotConfig.thunderChance > 0 && this.random.nextInt(this.spigotConfig.thunderChance) == 0) { // Spigot
          BlockPos blockpos = this.findLightningTargetAround(this.getBlockRandomPos(i, 0, j, 15));
          if (this.isRainingAt(blockpos)) {
             DifficultyInstance difficultyinstance = this.getCurrentDifficultyAt(blockpos);
@@ -404,7 +_,7 @@
                   skeletonhorse.setTrap(true);
                   skeletonhorse.setAge(0);
                   skeletonhorse.setPos((double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ());
-                  this.addFreshEntity(skeletonhorse);
+                  this.addFreshEntity(skeletonhorse, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.LIGHTNING); // CraftBukkit
                }
             }
 
@@ -412,7 +_,7 @@
             if (lightningbolt != null) {
                lightningbolt.moveTo(Vec3.atBottomCenterOf(blockpos));
                lightningbolt.setVisualOnly(flag1);
-               this.addFreshEntity(lightningbolt);
+               this.strikeLightning(lightningbolt, org.bukkit.event.weather.LightningStrikeEvent.Cause.WEATHER); // CraftBukkit
             }
          }
       }
@@ -461,8 +_,9 @@
       BlockPos blockpos = this.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING, p_300602_);
       BlockPos blockpos1 = blockpos.below();
       Biome biome = this.getBiome(blockpos).value();
+      if (this.isAreaLoaded(blockpos1, 1)) // Forge: check area to avoid loading neighbors in unloaded chunks
       if (biome.shouldFreeze(this, blockpos1)) {
-         this.setBlockAndUpdate(blockpos1, Blocks.ICE.defaultBlockState());
+         org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.handleBlockFormEvent(this, blockpos1, Blocks.ICE.defaultBlockState(), null); // CraftBukkit
       }
 
       if (p_298297_) {
@@ -475,9 +_,10 @@
                   BlockState blockstate1 = blockstate.setValue(SnowLayerBlock.LAYERS, Integer.valueOf(j + 1));
                   Block.pushEntitiesUp(blockstate, blockstate1, this, blockpos);
                   this.setBlockAndUpdate(blockpos, blockstate1);
+                  org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.handleBlockFormEvent(this, blockpos, blockstate1, null); // CraftBukkit
                }
             } else {
-               this.setBlockAndUpdate(blockpos, Blocks.SNOW.defaultBlockState());
+               org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.handleBlockFormEvent(this, blockpos, Blocks.SNOW.defaultBlockState(), null); // CraftBukkit
             }
          }
 
@@ -625,6 +_,7 @@
          this.rainLevel = Mth.clamp(this.rainLevel, 0.0F, 1.0F);
       }
 
+      /* CraftBukkit start
       if (this.oRainLevel != this.rainLevel) {
          this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, this.rainLevel), this.dimension());
       }
@@ -633,24 +_,60 @@
          this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, this.thunderLevel), this.dimension());
       }
 
+      * The function in use here has been replaced in order to only send the weather info to players in the correct dimension,
+      * rather than to all players on the server. This is what causes the client-side rain, as the
+      * client believes that it has started raining locally, rather than in another dimension.
       if (flag != this.isRaining()) {
          if (flag) {
-            this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.STOP_RAINING, 0.0F));
+            this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.STOP_RAINING, 0.0F), this.dimension());
          } else {
-            this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0.0F));
-         }
-
-         this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, this.rainLevel));
-         this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, this.thunderLevel));
-      }
+            this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0.0F), this.dimension());
+         }
+
+         this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, this.rainLevel), this.dimension());
+         this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, this.thunderLevel), this.dimension());
+      }
+      */
+      for (int idx = 0; idx < this.players.size(); ++idx) {
+         if ((this.players.get(idx)).level() == this) {
+            (this.players.get(idx)).tickWeather();
+         }
+      }
+
+      if (flag != this.isRaining()) {
+         // Only send weather packets to those affected
+         for (int idx = 0; idx < this.players.size(); ++idx) {
+            if ((this.players.get(idx)).level() == this) {
+               (this.players.get(idx)).setPlayerWeather((!flag ? org.bukkit.WeatherType.DOWNFALL : org.bukkit.WeatherType.CLEAR), false);
+            }
+         }
+      }
+      for (int idx = 0; idx < this.players.size(); ++idx) {
+         if ((this.players.get(idx)).level() == this) {
+            (this.players.get(idx)).updateWeather(this.oRainLevel, this.rainLevel, this.oThunderLevel, this.thunderLevel);
+         }
+      }
+      // CraftBukkit end
 
    }
 
    private void resetWeatherCycle() {
-      this.serverLevelData.setRainTime(0);
+      // CraftBukkit start
       this.serverLevelData.setRaining(false);
-      this.serverLevelData.setThunderTime(0);
+      // If we stop due to everyone sleeping we should reset the weather duration to some other random value.
+      // Not that everyone ever manages to get the whole server to sleep at the same time....
+      if (!this.serverLevelData.isRaining()) {
+         this.serverLevelData.setRainTime(0);
+      }
+      // CraftBukkit end
       this.serverLevelData.setThundering(false);
+      // CraftBukkit start
+      // If we stop due to everyone sleeping we should reset the weather duration to some other random value.
+      // Not that everyone ever manages to get the whole server to sleep at the same time....
+      if (!this.serverLevelData.isThundering()) {
+         this.serverLevelData.setThunderTime(0);
+      }
+      // CraftBukkit end
    }
 
    public void resetEmptyTime() {
@@ -674,6 +_,14 @@
    }
 
    public void tickNonPassenger(Entity p_8648_) {
+      // Spigot start
+      if (!org.spigotmc.ActivationRange.checkIfActive(p_8648_)) {
+         p_8648_.tickCount++;
+         p_8648_.inactiveTick();
+         return;
+      }
+      // Spigot end
+      p_8648_.tickTimer.startTiming(); // Spigot
       p_8648_.setOldPosAndRot();
       ProfilerFiller profilerfiller = this.getProfiler();
       ++p_8648_.tickCount;
@@ -682,11 +_,13 @@
       });
       profilerfiller.incrementCounter("tickNonPassenger");
       p_8648_.tick();
+      p_8648_.postTick(); // CraftBukkit
       this.getProfiler().pop();
 
       for(Entity entity : p_8648_.getPassengers()) {
          this.tickPassenger(p_8648_, entity);
       }
+      p_8648_.tickTimer.stopTiming(); // Spigot
 
    }
 
@@ -700,7 +_,9 @@
                return BuiltInRegistries.ENTITY_TYPE.getKey(p_8664_.getType()).toString();
             });
             profilerfiller.incrementCounter("tickPassenger");
+            if (p_8664_.canUpdate())
             p_8664_.rideTick();
+            p_8664_.postTick(); // CraftBukkit
             profilerfiller.pop();
 
             for(Entity entity : p_8664_.getPassengers()) {
@@ -720,6 +_,7 @@
    public void save(@Nullable ProgressListener p_8644_, boolean p_8645_, boolean p_8646_) {
       ServerChunkCache serverchunkcache = this.getChunkSource();
       if (!p_8646_) {
+         org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld())); // CraftBukkit
          if (p_8644_ != null) {
             p_8644_.progressStartNoAbort(Component.translatable("menu.savingLevel"));
          }
@@ -736,12 +_,20 @@
             this.entityManager.autoSave();
          }
 
+         // CraftBukkit start - moved from MinecraftServer.saveChunks
+         ServerLevel serverlevel = this;
+
+         serverLevelData.setWorldBorder(serverlevel.getWorldBorder().createSettings());
+         serverLevelData.setCustomBossEvents(this.server.getCustomBossEvents().save());
+         convertable.saveDataTag(this.server.registryAccess(), this.serverLevelData, this.server.getPlayerList().getSingleplayerData());
+         // CraftBukkit end
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.LevelEvent.Save(this));
       }
    }
 
    private void saveLevelData() {
       if (this.dragonFight != null) {
-         this.server.getWorldData().setEndDragonFightData(this.dragonFight.saveData());
+         this.serverLevelData.setEndDragonFightData(this.dragonFight.saveData()); // CraftBukkit
       }
 
       this.getChunkSource().getDataStorage().save();
@@ -800,15 +_,37 @@
    }
 
    public boolean addFreshEntity(Entity p_8837_) {
-      return this.addEntity(p_8837_);
+      // CraftBukkit start
+      return this.addFreshEntity(p_8837_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+   }
+
+   @Override
+   public boolean addFreshEntity(Entity entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+      return this.addEntity(entity, reason);
+      // CraftBukkit end
    }
 
    public boolean addWithUUID(Entity p_8848_) {
-      return this.addEntity(p_8848_);
+      // CraftBukkit start
+      return this.addWithUUID(p_8848_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+   }
+
+   public boolean addWithUUID(Entity entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+      return this.addEntity(entity, reason);
+      // CraftBukkit end
    }
 
    public void addDuringTeleport(Entity p_143335_) {
-      this.addEntity(p_143335_);
+      // CraftBukkit start
+      // SPIGOT-6415: Don't call spawn event for entities which travel trough worlds,
+      // since it is only an implementation detail, that a new entity is created when
+      // they are traveling between worlds.
+      this.addDuringTeleport(p_143335_, null);
+   }
+
+   public void addDuringTeleport(Entity entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+      this.addEntity(entity, reason);
+      // CraftBukkit end
    }
 
    public void addDuringCommandTeleport(ServerPlayer p_8623_) {
@@ -828,6 +_,7 @@
    }
 
    private void addPlayer(ServerPlayer p_8854_) {
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinLevelEvent(p_8854_, this))) return;
       Entity entity = this.getEntities().get(p_8854_.getUUID());
       if (entity != null) {
          LOGGER.warn("Force-added player with duplicate UUID {}", (Object)p_8854_.getUUID());
@@ -835,28 +_,56 @@
          this.removePlayerImmediately((ServerPlayer)entity, Entity.RemovalReason.DISCARDED);
       }
 
-      this.entityManager.addNewEntity(p_8854_);
+      this.entityManager.addNewEntityWithoutEvent(p_8854_);
+      p_8854_.onAddedToWorld();
    }
 
-   private boolean addEntity(Entity p_8873_) {
+   private boolean addEntity(Entity p_8873_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
+      org.spigotmc.AsyncCatcher.catchOp("entity add"); // Spigot
       if (p_8873_.isRemoved()) {
-         LOGGER.warn("Tried to add entity {} but it was marked as removed already", (Object)EntityType.getKey(p_8873_.getType()));
+         // LOGGER.warn("Tried to add entity {} but it was marked as removed already", (Object)EntityType.getKey(p_8873_.getType())); // CraftBukkit
          return false;
       } else {
-         return this.entityManager.addNewEntity(p_8873_);
+         // SPIGOT-6415: Don't call spawn event when reason is null. For example when an entity teleports to a new world.
+         if (spawnReason != null && !org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.doEntityAddEventCalling(this, p_8873_, spawnReason)) {
+            return false;
+         }
+         // CraftBukkit end
+
+         if (this.entityManager.addNewEntity(p_8873_)) {
+            p_8873_.onAddedToWorld();
+            return true;
+         } else {
+            return false;
+         }
       }
    }
 
    public boolean tryAddFreshEntityWithPassengers(Entity p_8861_) {
+      // CraftBukkit start
+      return this.tryAddFreshEntityWithPassengers(p_8861_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+   }
+
+   public boolean tryAddFreshEntityWithPassengers(Entity p_8861_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+      // CraftBukkit end
       if (p_8861_.getSelfAndPassengers().map(Entity::getUUID).anyMatch(this.entityManager::isLoaded)) {
          return false;
       } else {
-         this.addFreshEntityWithPassengers(p_8861_);
+         this.addFreshEntityWithPassengers(p_8861_, reason); // CraftBukkit
          return true;
       }
    }
 
    public void unload(LevelChunk p_8713_) {
+      // Spigot Start
+      for (net.minecraft.world.level.block.entity.BlockEntity tileentity : p_8713_.getBlockEntities().values()) {
+         if (tileentity instanceof net.minecraft.world.Container) {
+            for (org.bukkit.entity.HumanEntity h : Lists.newArrayList(((net.minecraft.world.Container) tileentity).getViewers())) {
+               h.closeInventory();
+            }
+         }
+      }
+      // Spigot End
       p_8713_.clearAllBlockEntities();
       p_8713_.unregisterTickContainerFromLevel(this);
    }
@@ -865,12 +_,41 @@
       p_143262_.remove(p_143263_);
    }
 
+   // CraftBukkit start
+   public boolean strikeLightning(Entity entitylightning) {
+      return this.strikeLightning(entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause.UNKNOWN);
+   }
+
+   public boolean strikeLightning(Entity entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause cause) {
+      org.bukkit.event.weather.LightningStrikeEvent lightning = org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory.callLightningStrikeEvent((org.bukkit.entity.LightningStrike) entitylightning.getBukkitEntity(), cause);
+
+      if (lightning.isCancelled()) {
+         return false;
+      }
+
+      return this.addFreshEntity(entitylightning);
+   }
+   // CraftBukkit end
+
    public void destroyBlockProgress(int p_8612_, BlockPos p_8613_, int p_8614_) {
+      // CraftBukkit start
+      Player player = null;
+      Entity entity = this.getEntity(p_8612_);
+      if (entity instanceof Player) player = (Player) entity;
+      // CraftBukkit end
+
       for(ServerPlayer serverplayer : this.server.getPlayerList().getPlayers()) {
          if (serverplayer != null && serverplayer.level() == this && serverplayer.getId() != p_8612_) {
             double d0 = (double)p_8613_.getX() - serverplayer.getX();
             double d1 = (double)p_8613_.getY() - serverplayer.getY();
             double d2 = (double)p_8613_.getZ() - serverplayer.getZ();
+
+            // CraftBukkit start
+            if (player != null && !serverplayer.getBukkitEntity().canSee(player.getBukkitEntity())) {
+               continue;
+            }
+            // CraftBukkit end
+
             if (d0 * d0 + d1 * d1 + d2 * d2 < 1024.0D) {
                serverplayer.connection.send(new ClientboundBlockDestructionPacket(p_8612_, p_8613_, p_8614_));
             }
@@ -880,10 +_,22 @@
    }
 
    public void playSeededSound(@Nullable Player p_263330_, double p_263393_, double p_263369_, double p_263354_, Holder<SoundEvent> p_263412_, SoundSource p_263338_, float p_263352_, float p_263390_, long p_263403_) {
+      net.minecraftforge.event.PlayLevelSoundEvent.AtPosition event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtPosition(this, p_263393_, p_263369_, p_263354_, p_263412_, p_263338_, p_263352_, p_263390_);
+      if (event.isCanceled() || event.getSound() == null) return;
+      p_263412_ = event.getSound();
+      p_263338_ = event.getSource();
+      p_263352_ = event.getNewVolume();
+      p_263390_ = event.getNewPitch();
       this.server.getPlayerList().broadcast(p_263330_, p_263393_, p_263369_, p_263354_, (double)p_263412_.value().getRange(p_263352_), this.dimension(), new ClientboundSoundPacket(p_263412_, p_263338_, p_263393_, p_263369_, p_263354_, p_263352_, p_263390_, p_263403_));
    }
 
    public void playSeededSound(@Nullable Player p_263545_, Entity p_263544_, Holder<SoundEvent> p_263491_, SoundSource p_263542_, float p_263530_, float p_263520_, long p_263490_) {
+      net.minecraftforge.event.PlayLevelSoundEvent.AtEntity event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtEntity(p_263544_, p_263491_, p_263542_, p_263530_, p_263520_);
+      if (event.isCanceled() || event.getSound() == null) return;
+      p_263491_ = event.getSound();
+      p_263542_ = event.getSource();
+      p_263530_ = event.getNewVolume();
+      p_263520_ = event.getNewPitch();
       this.server.getPlayerList().broadcast(p_263545_, p_263544_.getX(), p_263544_.getY(), p_263544_.getZ(), (double)p_263491_.value().getRange(p_263530_), this.dimension(), new ClientboundSoundEntityPacket(p_263491_, p_263542_, p_263544_, p_263530_, p_263520_, p_263490_));
    }
 
@@ -905,6 +_,7 @@
    }
 
    public void gameEvent(GameEvent p_215041_, Vec3 p_215042_, GameEvent.Context p_215043_) {
+      if (!net.minecraftforge.common.ForgeHooks.onVanillaGameEvent(this, p_215041_, p_215042_, p_215043_)) return;
       this.gameEventDispatcher.post(p_215041_, p_215042_, p_215043_);
    }
 
@@ -917,11 +_,26 @@
       this.getChunkSource().blockChanged(p_8755_);
       VoxelShape voxelshape1 = p_8756_.getCollisionShape(this, p_8755_);
       VoxelShape voxelshape = p_8757_.getCollisionShape(this, p_8755_);
+
       if (Shapes.joinIsNotEmpty(voxelshape1, voxelshape, BooleanOp.NOT_SAME)) {
          List<PathNavigation> list = new ObjectArrayList<>();
+         java.util.Iterator iterator = this.navigatingMobs.iterator();
 
-         for(Mob mob : this.navigatingMobs) {
+         while (iterator.hasNext()) {
+            // CraftBukkit start - fix SPIGOT-6362
+            Mob mob;
+            try {
+               mob = (Mob) iterator.next();
+            } catch (java.util.ConcurrentModificationException ex) {
+               // This can happen because the pathfinder update below may trigger a chunk load, which in turn may cause more navigators to register
+               // In this case we just run the update again across all the iterators as the chunk will then be loaded
+               // As this is a relative edge case it is much faster than copying navigators (on either read or write)
+               sendBlockUpdated(p_8755_, p_8756_, p_8757_, p_8758_);
+               return;
+            }
+            // CraftBukkit end
             PathNavigation pathnavigation = mob.getNavigation();
+
             if (pathnavigation.shouldRecomputePath(p_8755_)) {
                list.add(pathnavigation);
             }
@@ -941,10 +_,15 @@
    }
 
    public void updateNeighborsAt(BlockPos p_215045_, Block p_215046_) {
+      net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, p_215045_, this.getBlockState(p_215045_), java.util.EnumSet.allOf(Direction.class), false).isCanceled();
       this.neighborUpdater.updateNeighborsAtExceptFromFacing(p_215045_, p_215046_, (Direction)null);
    }
 
    public void updateNeighborsAtExceptFromFacing(BlockPos p_215052_, Block p_215053_, Direction p_215054_) {
+      java.util.EnumSet<Direction> directions = java.util.EnumSet.allOf(Direction.class);
+      directions.remove(p_215054_);
+      if (net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, p_215052_, this.getBlockState(p_215052_), directions, false).isCanceled())
+         return;
       this.neighborUpdater.updateNeighborsAtExceptFromFacing(p_215052_, p_215053_, p_215054_);
    }
 
@@ -970,6 +_,12 @@
 
    public Explosion explode(@Nullable Entity p_256039_, @Nullable DamageSource p_255778_, @Nullable ExplosionDamageCalculator p_256002_, double p_256067_, double p_256370_, double p_256153_, float p_256045_, boolean p_255686_, Level.ExplosionInteraction p_255827_) {
       Explosion explosion = this.explode(p_256039_, p_255778_, p_256002_, p_256067_, p_256370_, p_256153_, p_256045_, p_255686_, p_255827_, false);
+      // CraftBukkit start
+      if (explosion.wasCanceled) {
+         return explosion;
+      }
+      // CraftBukkit end
+
       if (!explosion.interactsWithBlocks()) {
          explosion.clearToBlow();
       }
@@ -1031,12 +_,20 @@
    }
 
    public <T extends ParticleOptions> int sendParticles(T p_8768_, double p_8769_, double p_8770_, double p_8771_, int p_8772_, double p_8773_, double p_8774_, double p_8775_, double p_8776_) {
+      // CraftBukkit - visibility api support
+      return sendParticles(null, p_8768_, p_8769_, p_8770_, p_8771_, p_8772_, p_8773_, p_8774_, p_8775_, p_8776_, false);
+   }
+
+   public <T extends ParticleOptions> int sendParticles(ServerPlayer sender, T p_8768_, double p_8769_, double p_8770_, double p_8771_, int p_8772_, double p_8773_, double p_8774_, double p_8775_, double p_8776_, boolean force) {
       ClientboundLevelParticlesPacket clientboundlevelparticlespacket = new ClientboundLevelParticlesPacket(p_8768_, false, p_8769_, p_8770_, p_8771_, (float)p_8773_, (float)p_8774_, (float)p_8775_, (float)p_8776_, p_8772_);
+      // CraftBukkit end
       int i = 0;
 
       for(int j = 0; j < this.players.size(); ++j) {
          ServerPlayer serverplayer = this.players.get(j);
-         if (this.sendParticles(serverplayer, false, p_8769_, p_8770_, p_8771_, clientboundlevelparticlespacket)) {
+         if (sender != null && !serverplayer.getBukkitEntity().canSee(sender.getBukkitEntity())) continue; // CraftBukkit
+
+         if (this.sendParticles(serverplayer, force, p_8769_, p_8770_, p_8771_, clientboundlevelparticlespacket)) { // CraftBukkit
             ++i;
          }
       }
@@ -1083,7 +_,7 @@
 
    @Nullable
    public BlockPos findNearestMapStructure(TagKey<Structure> p_215012_, BlockPos p_215013_, int p_215014_, boolean p_215015_) {
-      if (!this.server.getWorldData().worldGenOptions().generateStructures()) {
+      if (!this.serverLevelData.worldGenOptions().generateStructures()) { // CraftBukkit
          return null;
       } else {
          Optional<HolderSet.Named<Structure>> optional = this.registryAccess().registryOrThrow(Registries.STRUCTURE).getTag(p_215012_);
@@ -1119,6 +_,7 @@
    }
 
    public void setMapData(String p_143305_, MapItemSavedData p_143306_) {
+      p_143306_.id = p_143305_; // CraftBukkit
       this.getServer().overworld().getDataStorage().set(p_143305_, p_143306_);
    }
 
@@ -1309,6 +_,11 @@
 
    public void blockUpdated(BlockPos p_8743_, Block p_8744_) {
       if (!this.isDebug()) {
+         // CraftBukkit start
+         if (populating) {
+            return;
+         }
+         // CraftBukkit end
          this.updateNeighborsAt(p_8743_, p_8744_);
       }
 
@@ -1327,11 +_,11 @@
    }
 
    public boolean isFlat() {
-      return this.server.getWorldData().isFlatWorld();
+      return this.serverLevelData.isFlatWorld(); // CraftBukkit
    }
 
    public long getSeed() {
-      return this.server.getWorldData().worldGenOptions().seed();
+      return this.serverLevelData.worldGenOptions().seed(); // CraftBukkit
    }
 
    @Nullable
@@ -1368,19 +_,42 @@
    }
 
    public static void makeObsidianPlatform(ServerLevel p_8618_) {
+      // CraftBukkit start
+      ServerLevel.makeObsidianPlatform(p_8618_, null);
+   }
+
+   public static void makeObsidianPlatform(ServerLevel p_8618_, Entity entity) {
+      // CraftBukkit end
       BlockPos blockpos = END_SPAWN_POINT;
       int i = blockpos.getX();
       int j = blockpos.getY() - 2;
       int k = blockpos.getZ();
-      BlockPos.betweenClosed(i - 2, j + 1, k - 2, i + 2, j + 3, k + 2).forEach((p_207578_) -> {
-         p_8618_.setBlockAndUpdate(p_207578_, Blocks.AIR.defaultBlockState());
-      });
-      BlockPos.betweenClosed(i - 2, j, k - 2, i + 2, j, k + 2).forEach((p_184101_) -> {
-         p_8618_.setBlockAndUpdate(p_184101_, Blocks.OBSIDIAN.defaultBlockState());
-      });
+
+      // CraftBukkit start
+      org.bukkit.craftbukkit.v1_20_R2.util.BlockStateListPopulator blockList = new org.bukkit.craftbukkit.v1_20_R2.util.BlockStateListPopulator(p_8618_);
+      BlockPos.betweenClosed(i - 2, j + 1, k - 2, i + 2, j + 3, k + 2).forEach((blockposition1) -> {
+         blockList.setBlock(blockposition1, Blocks.AIR.defaultBlockState(), 3);
+      });
+      BlockPos.betweenClosed(i - 2, j, k - 2, i + 2, j, k + 2).forEach((blockposition1) -> {
+         blockList.setBlock(blockposition1, Blocks.OBSIDIAN.defaultBlockState(), 3);
+      });
+      org.bukkit.World bworld = p_8618_.getWorld();
+      org.bukkit.event.world.PortalCreateEvent portalEvent = new org.bukkit.event.world.PortalCreateEvent((List<org.bukkit.block.BlockState>) (List) blockList.getList(), bworld, (entity == null) ? null : entity.getBukkitEntity(), org.bukkit.event.world.PortalCreateEvent.CreateReason.END_PLATFORM);
+
+      p_8618_.getCraftServer().getPluginManager().callEvent(portalEvent);
+      if (!portalEvent.isCancelled()) {
+         blockList.updateList();
+      }
+      // CraftBukkit end
+   }
+
+   protected void initCapabilities() {
+      this.gatherCapabilities();
+      capabilityData = net.minecraftforge.common.util.LevelCapabilityData.compute(this.getDataStorage(), getCapabilities());
    }
 
    public LevelEntityGetter<Entity> getEntities() {
+      org.spigotmc.AsyncCatcher.catchOp("Chunk getEntities call"); // Spigot
       return this.entityManager.getEntityGetter();
    }
 
@@ -1460,6 +_,7 @@
       }
 
       public void onTrackingStart(Entity p_143371_) {
+         org.spigotmc.AsyncCatcher.catchOp("entity register"); // Spigot
          ServerLevel.this.getChunkSource().addEntity(p_143371_);
          if (p_143371_ instanceof ServerPlayer serverplayer) {
             ServerLevel.this.players.add(serverplayer);
@@ -1475,16 +_,48 @@
             ServerLevel.this.navigatingMobs.add(mob);
          }
 
-         if (p_143371_ instanceof EnderDragon enderdragon) {
-            for(EnderDragonPart enderdragonpart : enderdragon.getSubEntities()) {
+         if (p_143371_.isMultipartEntity()) {
+            for(net.minecraftforge.entity.PartEntity<?> enderdragonpart : p_143371_.getParts()) {
                ServerLevel.this.dragonParts.put(enderdragonpart.getId(), enderdragonpart);
             }
          }
 
          p_143371_.updateDynamicGameEventListener(DynamicGameEventListener::add);
+         p_143371_.valid = true; // CraftBukkit
       }
 
       public void onTrackingEnd(Entity p_143375_) {
+         org.spigotmc.AsyncCatcher.catchOp("entity unregister"); // Spigot
+         // Spigot start
+         if ( p_143375_ instanceof Player )
+         {
+            com.google.common.collect.Streams.stream( getServer().getAllLevels() ).map( ServerLevel::getDataStorage ).forEach( (worldData) ->
+            {
+               for (Object o : worldData.cache.values() )
+               {
+                  if ( o instanceof MapItemSavedData )
+                  {
+                     MapItemSavedData map = (MapItemSavedData) o;
+                     map.carriedByPlayers.remove( (Player) p_143375_ );
+                     for ( java.util.Iterator<MapItemSavedData.HoldingPlayer> iter = map.carriedBy.iterator(); iter.hasNext(); )
+                     {
+                        if ( iter.next().player == p_143375_ )
+                        {
+                           iter.remove();
+                        }
+                     }
+                  }
+               }
+            } );
+         }
+         // Spigot end
+         // Spigot Start
+         if (p_143375_.getBukkitEntity() instanceof org.bukkit.inventory.InventoryHolder && (!(p_143375_ instanceof ServerPlayer) || p_143375_.getRemovalReason() != Entity.RemovalReason.KILLED)) { // SPIGOT-6876: closeInventory clears death message
+            for (org.bukkit.entity.HumanEntity h : Lists.newArrayList(((org.bukkit.inventory.InventoryHolder) p_143375_.getBukkitEntity()).getInventory().getViewers())) {
+               h.closeInventory();
+            }
+         }
+         // Spigot End
          ServerLevel.this.getChunkSource().removeEntity(p_143375_);
          if (p_143375_ instanceof ServerPlayer serverplayer) {
             ServerLevel.this.players.remove(serverplayer);
@@ -1500,17 +_,34 @@
             ServerLevel.this.navigatingMobs.remove(mob);
          }
 
-         if (p_143375_ instanceof EnderDragon enderdragon) {
-            for(EnderDragonPart enderdragonpart : enderdragon.getSubEntities()) {
+         if (p_143375_.isMultipartEntity()) {
+            for(net.minecraftforge.entity.PartEntity<?> enderdragonpart : p_143375_.getParts()) {
                ServerLevel.this.dragonParts.remove(enderdragonpart.getId());
             }
          }
 
          p_143375_.updateDynamicGameEventListener(DynamicGameEventListener::remove);
+
+         // CraftBukkit start
+         p_143375_.valid = false;
+         if (!(p_143375_ instanceof ServerPlayer)) {
+            for (ServerPlayer player : players) {
+               player.getBukkitEntity().onEntityRemove(p_143375_);
+            }
+         }
+         // CraftBukkit end
+
+         p_143375_.onRemovedFromWorld();
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityLeaveLevelEvent(p_143375_, ServerLevel.this));
       }
 
       public void onSectionChange(Entity p_215086_) {
          p_215086_.updateDynamicGameEventListener(DynamicGameEventListener::move);
       }
+   }
+
+   @Override
+   public java.util.Collection<net.minecraftforge.entity.PartEntity<?>> getPartEntities() {
+      return this.dragonParts.values();
    }
 }
