--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -109,25 +_,37 @@
    private static final int SEND_PLAYER_INFO_INTERVAL = 600;
    private static final SimpleDateFormat BAN_DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z");
    private final MinecraftServer server;
-   private final List<ServerPlayer> players = Lists.newArrayList();
+   public final List<ServerPlayer> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - java.util.ArrayList -> CopyOnWriteArrayList: java.util.Iterator safety
    private final Map<UUID, ServerPlayer> playersByUUID = Maps.newHashMap();
    private final UserBanList bans = new UserBanList(USERBANLIST_FILE);
    private final IpBanList ipBans = new IpBanList(IPBANLIST_FILE);
    private final ServerOpList ops = new ServerOpList(OPLIST_FILE);
    private final UserWhiteList whitelist = new UserWhiteList(WHITELIST_FILE);
-   private final Map<UUID, ServerStatsCounter> stats = Maps.newHashMap();
-   private final Map<UUID, PlayerAdvancements> advancements = Maps.newHashMap();
-   private final PlayerDataStorage playerIo;
+   // CraftBukkit start
+   //private final Map<UUID, ServerStatsCounter> stats = Maps.newHashMap();
+   //private final Map<UUID, PlayerAdvancements> advancements = Maps.newHashMap();
+   // CraftBukkit end
+   public final PlayerDataStorage playerIo;
    private boolean doWhiteList;
    private final LayeredRegistryAccess<RegistryLayer> registries;
-   protected final int maxPlayers;
+   public int maxPlayers;
    private int viewDistance;
    private int simulationDistance;
    private boolean allowCheatsForAllPlayers;
    private static final boolean ALLOW_LOGOUTIVATOR = false;
    private int sendAllPlayerInfoIn;
+   private final List<ServerPlayer> playersView = java.util.Collections.unmodifiableList(players);
+
+   // CraftBukkit start
+   private org.bukkit.craftbukkit.v1_20_R2.CraftServer cserver;
+   private final Map<String, ServerPlayer> playersByName = new java.util.HashMap<>();
 
    public PlayerList(MinecraftServer p_203842_, LayeredRegistryAccess<RegistryLayer> p_251844_, PlayerDataStorage p_203844_, int p_203845_) {
+      this.cserver = p_203842_.server = new org.bukkit.craftbukkit.v1_20_R2.CraftServer((net.minecraft.server.dedicated.DedicatedServer) p_203842_, this);
+      p_203842_.console = org.bukkit.craftbukkit.v1_20_R2.command.ColouredConsoleSender.getInstance();
+      p_203842_.reader.addCompleter(new org.bukkit.craftbukkit.v1_20_R2.command.ConsoleCommandCompleter(p_203842_.server));
+      // CraftBukkit end
+
       this.server = p_203842_;
       this.registries = p_251844_;
       this.maxPlayers = p_203845_;
@@ -147,9 +_,17 @@
       }
 
       CompoundTag compoundtag = this.load(p_11263_);
-      ResourceKey<Level> resourcekey = compoundtag != null ? DimensionType.parseLegacy(new Dynamic<>(NbtOps.INSTANCE, compoundtag.get("Dimension"))).resultOrPartial(LOGGER::error).orElse(Level.OVERWORLD) : Level.OVERWORLD;
+      // CraftBukkit start - Better rename detection
+      if (compoundtag != null && compoundtag.contains("bukkit")) {
+         CompoundTag bukkit = compoundtag.getCompound("bukkit");
+         s = bukkit.contains("lastKnownName", 8) ? bukkit.getString("lastKnownName") : s;
+      }
+      // CraftBukkit end
+
+      ResourceKey<Level> resourcekey = compoundtag != null ? DimensionType.parseLegacy(new Dynamic<>(NbtOps.INSTANCE, compoundtag.get("Dimension"))).resultOrPartial(LOGGER::error).orElse(p_11263_.serverLevel().dimension()) : p_11263_.serverLevel().dimension();
       ServerLevel serverlevel = this.server.getLevel(resourcekey);
       ServerLevel serverlevel1;
+
       if (serverlevel == null) {
          LOGGER.warn("Unknown respawn dimension {}, defaulting to overworld", (Object)resourcekey);
          serverlevel1 = this.server.overworld();
@@ -159,18 +_,38 @@
 
       p_11263_.setServerLevel(serverlevel1);
       String s1 = p_11262_.getLoggableAddress(this.server.logIPs());
-      LOGGER.info("{}[{}] logged in with entity id {} at ({}, {}, {})", p_11263_.getName().getString(), s1, p_11263_.getId(), p_11263_.getX(), p_11263_.getY(), p_11263_.getZ());
+
+      // Spigot start - spawn location event
+      org.bukkit.entity.Player spawnPlayer = p_11263_.getBukkitEntity();
+      org.spigotmc.event.player.PlayerSpawnLocationEvent ev = new org.spigotmc.event.player.PlayerSpawnLocationEvent(spawnPlayer, spawnPlayer.getLocation());
+      cserver.getPluginManager().callEvent(ev);
+
+      org.bukkit.Location loc = ev.getSpawnLocation();
+      serverlevel1 = ((org.bukkit.craftbukkit.v1_20_R2.CraftWorld) loc.getWorld()).getHandle();
+
+      p_11263_.spawnIn(serverlevel1);
+      p_11263_.gameMode.setLevel((ServerLevel) p_11263_.level());
+      p_11263_.absMoveTo(loc.getX(), loc.getY(), loc.getZ(), loc.getYaw(), loc.getPitch());
+      // Spigot end
+
+      // CraftBukkit - Moved message to after join
+      // LOGGER.info("{}[{}] logged in with entity id {} at ({}, {}, {})", p_11263_.getName().getString(), s1, p_11263_.getId(), p_11263_.getX(), p_11263_.getY(), p_11263_.getZ());
       LevelData leveldata = serverlevel1.getLevelData();
+
       p_11263_.loadGameTypes(compoundtag);
       ServerGamePacketListenerImpl servergamepacketlistenerimpl = new ServerGamePacketListenerImpl(this.server, p_11262_, p_11263_, p_297215_);
       GameRules gamerules = serverlevel1.getGameRules();
       boolean flag = gamerules.getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN);
       boolean flag1 = gamerules.getBoolean(GameRules.RULE_REDUCEDDEBUGINFO);
       boolean flag2 = gamerules.getBoolean(GameRules.RULE_LIMITED_CRAFTING);
-      servergamepacketlistenerimpl.send(new ClientboundLoginPacket(p_11263_.getId(), leveldata.isHardcore(), this.server.levelKeys(), this.getMaxPlayers(), this.viewDistance, this.simulationDistance, flag1, !flag, flag2, p_11263_.createCommonSpawnInfo(serverlevel1)));
+
+      // Spigot - view distance
+      servergamepacketlistenerimpl.send(new ClientboundLoginPacket(p_11263_.getId(), leveldata.isHardcore(), this.server.levelKeys(), this.getMaxPlayers(), serverlevel1.spigotConfig.viewDistance, serverlevel1.spigotConfig.simulationDistance, flag1, !flag, flag2, p_11263_.createCommonSpawnInfo(serverlevel1)));
+      p_11263_.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
       servergamepacketlistenerimpl.send(new ClientboundChangeDifficultyPacket(leveldata.getDifficulty(), leveldata.isDifficultyLocked()));
       servergamepacketlistenerimpl.send(new ClientboundPlayerAbilitiesPacket(p_11263_.getAbilities()));
       servergamepacketlistenerimpl.send(new ClientboundSetCarriedItemPacket(p_11263_.getInventory().selected));
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.OnDatapackSyncEvent(this, p_11263_));
       servergamepacketlistenerimpl.send(new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getRecipes()));
       this.sendPlayerPermissionLevel(p_11263_);
       p_11263_.getStats().markAllDirty();
@@ -184,32 +_,89 @@
          mutablecomponent = Component.translatable("multiplayer.player.joined.renamed", p_11263_.getDisplayName(), s);
       }
 
-      this.broadcastSystemMessage(mutablecomponent.withStyle(ChatFormatting.YELLOW), false);
+      // CraftBukkit start
+      mutablecomponent.withStyle(ChatFormatting.YELLOW);
+      String joinMessage = org.bukkit.craftbukkit.v1_20_R2.util.CraftChatMessage.fromComponent(mutablecomponent);
+
       servergamepacketlistenerimpl.teleport(p_11263_.getX(), p_11263_.getY(), p_11263_.getZ(), p_11263_.getYRot(), p_11263_.getXRot());
       ServerStatus serverstatus = this.server.getStatus();
+
       if (serverstatus != null) {
          p_11263_.sendServerStatus(serverstatus);
       }
 
-      p_11263_.connection.send(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(this.players));
+      // p_11263_.connection.send(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(this.players)); // CraftBukkit - replaced with loop below
       this.players.add(p_11263_);
+      this.playersByName.put(p_11263_.getScoreboardName().toLowerCase(java.util.Locale.ROOT), p_11263_); // Spigot
       this.playersByUUID.put(p_11263_.getUUID(), p_11263_);
-      this.broadcastAll(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(List.of(p_11263_)));
+      // this.broadcastAll(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(List.of(p_11263_))); // CraftBukkit - replaced with loop below
+
+      // CraftBukkit start
+      org.bukkit.craftbukkit.v1_20_R2.entity.CraftPlayer bukkitPlayer = p_11263_.getBukkitEntity();
+
+      // Ensure that player inventory is populated with its viewer
+      p_11263_.containerMenu.transferTo(p_11263_.containerMenu, bukkitPlayer);
+
+      PlayerJoinEvent playerJoinEvent = new PlayerJoinEvent(bukkitPlayer, joinMessage);
+      cserver.getPluginManager().callEvent(playerJoinEvent);
+
+      if (!p_11263_.connection.isAcceptingMessages()) {
+         return;
+      }
+
+      joinMessage = playerJoinEvent.getJoinMessage();
+
+      if (joinMessage != null && joinMessage.length() > 0) {
+         for (Component line : org.bukkit.craftbukkit.v1_20_R2.util.CraftChatMessage.fromString(joinMessage)) {
+            server.getPlayerList().broadcastSystemMessage(line, false);
+         }
+      }
+      // CraftBukkit end
+
+      // CraftBukkit start - sendAll above replaced with this loop
+      ClientboundPlayerInfoUpdatePacket packet = ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(List.of(p_11263_));
+      for (ServerPlayer player : this.players) {
+         if (player.getBukkitEntity().canSee(bukkitPlayer)) {
+            player.connection.send(packet);
+         }
+
+         if (!bukkitPlayer.canSee(player.getBukkitEntity())) {
+            continue;
+         }
+
+         p_11263_.connection.send(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(List.of(player)));
+      }
+      p_11263_.sentListPacket = true;
+      // CraftBukkit end
+
+      p_11263_.getEntityData().refresh(p_11263_); // CraftBukkit - BungeeCord#2321, send complete data to self on spawn
       this.sendLevelInfo(p_11263_, serverlevel1);
-      serverlevel1.addNewPlayer(p_11263_);
-      this.server.getCustomBossEvents().onPlayerConnect(p_11263_);
-
-      for(MobEffectInstance mobeffectinstance : p_11263_.getActiveEffects()) {
+
+      // CraftBukkit start - Only add if the player wasn't moved in the event
+      if (p_11263_.level() == serverlevel1 && !serverlevel1.players().contains(p_11263_)) {
+         serverlevel1.addNewPlayer(p_11263_);
+         this.server.getCustomBossEvents().onPlayerConnect(p_11263_);
+      }
+
+      serverlevel1 = p_11263_.serverLevel(); // CraftBukkit - Update in case join event changed it
+      // CraftBukkit end
+
+      for (MobEffectInstance mobeffectinstance : p_11263_.getActiveEffects()) {
          servergamepacketlistenerimpl.send(new ClientboundUpdateMobEffectPacket(p_11263_.getId(), mobeffectinstance));
       }
 
       if (compoundtag != null && compoundtag.contains("RootVehicle", 10)) {
          CompoundTag compoundtag1 = compoundtag.getCompound("RootVehicle");
-         Entity entity1 = EntityType.loadEntityRecursive(compoundtag1.getCompound("Entity"), serverlevel1, (p_215603_) -> {
-            return !serverlevel1.addWithUUID(p_215603_) ? null : p_215603_;
+         // CraftBukkit start
+         ServerLevel finalServerLevel = serverlevel1;
+         Entity entity1 = EntityType.loadEntityRecursive(compoundtag1.getCompound("Entity"), finalServerLevel, (p_215603_) -> {
+            return !finalServerLevel.addWithUUID(p_215603_) ? null : p_215603_;
+            // CraftBukkit end
          });
+
          if (entity1 != null) {
             UUID uuid;
+
             if (compoundtag1.hasUUID("Attach")) {
                uuid = compoundtag1.getUUID("Attach");
             } else {
@@ -239,6 +_,9 @@
       }
 
       p_11263_.initInventoryMenu();
+      net.minecraftforge.event.ForgeEventFactory.firePlayerLoggedIn( p_11263_ );
+      // CraftBukkit - Moved from above, added world
+      LOGGER.info("{}[{}] logged in with entity id {} at ([{}]{}, {}, {})", p_11263_.getName().getString(), s1, p_11263_.getId(), serverlevel1.serverLevelData.getLevelName(), p_11263_.getX(), p_11263_.getY(), p_11263_.getZ());
    }
 
    public void updateEntireScoreboard(ServerScoreboard p_11274_, ServerPlayer p_11275_) {
@@ -262,25 +_,26 @@
    }
 
    public void addWorldborderListener(ServerLevel p_184210_) {
+      if (playerIo != null) return; // CraftBukkit
       p_184210_.getWorldBorder().addListener(new BorderChangeListener() {
          public void onBorderSizeSet(WorldBorder p_11321_, double p_11322_) {
-            PlayerList.this.broadcastAll(new ClientboundSetBorderSizePacket(p_11321_));
+            PlayerList.this.broadcastAll(new ClientboundSetBorderSizePacket(p_11321_), p_11321_.world); // CraftBukkit
          }
 
          public void onBorderSizeLerping(WorldBorder p_11328_, double p_11329_, double p_11330_, long p_11331_) {
-            PlayerList.this.broadcastAll(new ClientboundSetBorderLerpSizePacket(p_11328_));
+            PlayerList.this.broadcastAll(new ClientboundSetBorderLerpSizePacket(p_11328_), p_11328_.world); // CraftBukkit
          }
 
          public void onBorderCenterSet(WorldBorder p_11324_, double p_11325_, double p_11326_) {
-            PlayerList.this.broadcastAll(new ClientboundSetBorderCenterPacket(p_11324_));
+            PlayerList.this.broadcastAll(new ClientboundSetBorderCenterPacket(p_11324_), p_11324_.world); // CraftBukkit
          }
 
          public void onBorderSetWarningTime(WorldBorder p_11333_, int p_11334_) {
-            PlayerList.this.broadcastAll(new ClientboundSetBorderWarningDelayPacket(p_11333_));
+            PlayerList.this.broadcastAll(new ClientboundSetBorderWarningDelayPacket(p_11333_), p_11333_.world); // CraftBukkit
          }
 
          public void onBorderSetWarningBlocks(WorldBorder p_11339_, int p_11340_) {
-            PlayerList.this.broadcastAll(new ClientboundSetBorderWarningDistancePacket(p_11339_));
+            PlayerList.this.broadcastAll(new ClientboundSetBorderWarningDistancePacket(p_11339_), p_11339_.world); // CraftBukkit
          }
 
          public void onBorderSetDamagePerBlock(WorldBorder p_11336_, double p_11337_) {
@@ -299,6 +_,7 @@
          compoundtag1 = compoundtag;
          p_11225_.load(compoundtag);
          LOGGER.debug("loading single player");
+         net.minecraftforge.event.ForgeEventFactory.firePlayerLoadingEvent(p_11225_, this.playerIo, p_11225_.getUUID().toString());
       } else {
          compoundtag1 = this.playerIo.load(p_11225_);
       }
@@ -307,22 +_,40 @@
    }
 
    protected void save(ServerPlayer p_11277_) {
+      if (!p_11277_.getBukkitEntity().isPersistent()) return; // CraftBukkit
+      if (p_11277_.connection == null) return;
       this.playerIo.save(p_11277_);
-      ServerStatsCounter serverstatscounter = this.stats.get(p_11277_.getUUID());
+      ServerStatsCounter serverstatscounter = p_11277_.getStats(); // CraftBukkit
       if (serverstatscounter != null) {
          serverstatscounter.save();
       }
 
-      PlayerAdvancements playeradvancements = this.advancements.get(p_11277_.getUUID());
+      PlayerAdvancements playeradvancements = p_11277_.getAdvancements(); // CraftBukkit
       if (playeradvancements != null) {
          playeradvancements.save();
       }
 
    }
 
-   public void remove(ServerPlayer p_11287_) {
+   public String remove(ServerPlayer p_11287_) { // CraftBukkit - return string
+      net.minecraftforge.event.ForgeEventFactory.firePlayerLoggedOut(p_11287_);
       ServerLevel serverlevel = p_11287_.serverLevel();
+
       p_11287_.awardStat(Stats.LEAVE_GAME);
+
+      // CraftBukkit start - Quitting must be before we do final save of data, in case plugins need to modify it
+      // See SPIGOT-5799, SPIGOT-6145
+      if (p_11287_.containerMenu != p_11287_.inventoryMenu) {
+         p_11287_.closeContainer();
+      }
+
+      PlayerQuitEvent playerQuitEvent = new PlayerQuitEvent(p_11287_.getBukkitEntity(), p_11287_.kickLeaveMessage != null ? p_11287_.kickLeaveMessage : "\u00A7e" + p_11287_.getScoreboardName() + " left the game");
+      cserver.getPluginManager().callEvent(playerQuitEvent);
+      p_11287_.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
+
+      p_11287_.doTick(); // SPIGOT-924
+      // CraftBukkit end
+
       this.save(p_11287_);
       if (p_11287_.isPassenger()) {
          Entity entity = p_11287_.getRootVehicle();
@@ -339,48 +_,115 @@
       serverlevel.removePlayerImmediately(p_11287_, Entity.RemovalReason.UNLOADED_WITH_PLAYER);
       p_11287_.getAdvancements().stopListening();
       this.players.remove(p_11287_);
+      this.playersByName.remove(p_11287_.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
       this.server.getCustomBossEvents().onPlayerDisconnect(p_11287_);
       UUID uuid = p_11287_.getUUID();
       ServerPlayer serverplayer = this.playersByUUID.get(uuid);
+
       if (serverplayer == p_11287_) {
          this.playersByUUID.remove(uuid);
-         this.stats.remove(uuid);
-         this.advancements.remove(uuid);
-      }
-
-      this.broadcastAll(new ClientboundPlayerInfoRemovePacket(List.of(p_11287_.getUUID())));
+         // CraftBukkit start
+         // this.stats.remove(uuid);
+         // this.advancements.remove(uuid);
+         // CraftBukkit end
+      }
+
+      // CraftBukkit start
+      // this.broadcastAll(new ClientboundPlayerInfoRemovePacket(List.of(p_11287_.getUUID())));
+      ClientboundPlayerInfoRemovePacket packet = new ClientboundPlayerInfoRemovePacket(List.of(p_11287_.getUUID()));
+      for (ServerPlayer player : this.players) {
+         if (player.getBukkitEntity().canSee(p_11287_.getBukkitEntity())) {
+            player.connection.send(packet);
+         } else {
+            player.getBukkitEntity().onEntityRemove(p_11287_);
+         }
+      }
+      // This removes the scoreboard (and player reference) for the specific player in the manager
+      cserver.getScoreboardManager().removePlayer(p_11287_.getBukkitEntity());
+      // CraftBukkit end
+
+      return playerQuitEvent.getQuitMessage(); // CraftBukkit
    }
 
+
+   // CraftBukkit start - Whole method, SocketAddress to LoginListener, added hostname to signature, return EntityPlayer
    @Nullable
-   public Component canPlayerLogin(SocketAddress p_11257_, GameProfile p_11258_) {
-      if (this.bans.isBanned(p_11258_)) {
-         UserBanListEntry userbanlistentry = this.bans.get(p_11258_);
-         MutableComponent mutablecomponent1 = Component.translatable("multiplayer.disconnect.banned.reason", userbanlistentry.getReason());
-         if (userbanlistentry.getExpires() != null) {
-            mutablecomponent1.append(Component.translatable("multiplayer.disconnect.banned.expiration", BAN_DATE_FORMAT.format(userbanlistentry.getExpires())));
-         }
-
-         return mutablecomponent1;
-      } else if (!this.isWhiteListed(p_11258_)) {
-         return Component.translatable("multiplayer.disconnect.not_whitelisted");
-      } else if (this.ipBans.isBanned(p_11257_)) {
-         IpBanListEntry ipbanlistentry = this.ipBans.get(p_11257_);
-         MutableComponent mutablecomponent = Component.translatable("multiplayer.disconnect.banned_ip.reason", ipbanlistentry.getReason());
-         if (ipbanlistentry.getExpires() != null) {
-            mutablecomponent.append(Component.translatable("multiplayer.disconnect.banned_ip.expiration", BAN_DATE_FORMAT.format(ipbanlistentry.getExpires())));
-         }
-
-         return mutablecomponent;
+   public ServerPlayer canPlayerLogin(net.minecraft.server.network.ServerLoginPacketListenerImpl loginlistener, GameProfile gameprofile) {
+      MutableComponent mutablecomponent;
+
+      // Moved from pprocessLogin
+      UUID uuid = gameprofile.getId();
+      List<ServerPlayer> list = Lists.newArrayList();
+
+      ServerPlayer serverplayer;
+
+      for (ServerPlayer player : this.players) {
+         if (player.getUUID().equals(uuid)) {
+            list.add(player);
+         }
+      }
+
+      for (ServerPlayer serverPlayer : list) {
+         save(serverPlayer); // CraftBukkit - Force the player's inventory to be saved
+         serverPlayer.connection.disconnect(Component.translatable("multiplayer.disconnect.duplicate_login"));
+      }
+
+      // Instead of kicking then returning, we need to store the kick reason
+      // in the event, check with plugins to see if it's ok, and THEN kick
+      // depending on the outcome.
+      SocketAddress socketaddress = loginlistener.connection.getRemoteAddress();
+
+      ServerPlayer player = new ServerPlayer(this.server, this.server.overworld(), gameprofile, ClientInformation.createDefault());
+      org.bukkit.entity.Player bukkitPlayer = player.getBukkitEntity();
+      PlayerLoginEvent event = new PlayerLoginEvent(bukkitPlayer, loginlistener.connection.hostname, ((java.net.InetSocketAddress) socketaddress).getAddress(), ((java.net.InetSocketAddress) loginlistener.connection.channel.remoteAddress()).getAddress());
+
+      if (getBans().isBanned(gameprofile) && !getBans().get(gameprofile).hasExpired()) {
+         UserBanListEntry gameprofilebanentry = this.bans.get(gameprofile);
+
+         mutablecomponent = Component.translatable("multiplayer.disconnect.banned.reason", gameprofilebanentry.getReason());
+         if (gameprofilebanentry.getExpires() != null) {
+            mutablecomponent.append(Component.translatable("multiplayer.disconnect.banned.expiration", PlayerList.BAN_DATE_FORMAT.format(gameprofilebanentry.getExpires())));
+         }
+
+         // return chatmessage;
+         event.disallow(PlayerLoginEvent.Result.KICK_BANNED, org.bukkit.craftbukkit.v1_20_R2.util.CraftChatMessage.fromComponent(mutablecomponent));
+      } else if (!this.isWhiteListed(gameprofile)) {
+         mutablecomponent = Component.translatable("multiplayer.disconnect.not_whitelisted");
+         event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, org.spigotmc.SpigotConfig.whitelistMessage); // Spigot
+      } else if (getIpBans().isBanned(socketaddress) && !getIpBans().get(socketaddress).hasExpired()) {
+         IpBanListEntry ipbanentry = this.ipBans.get(socketaddress);
+
+         mutablecomponent = Component.translatable("multiplayer.disconnect.banned_ip.reason", ipbanentry.getReason());
+         if (ipbanentry.getExpires() != null) {
+            mutablecomponent.append(Component.translatable("multiplayer.disconnect.banned_ip.expiration", PlayerList.BAN_DATE_FORMAT.format(ipbanentry.getExpires())));
+         }
+
+         // return chatmessage;
+         event.disallow(PlayerLoginEvent.Result.KICK_BANNED, org.bukkit.craftbukkit.v1_20_R2.util.CraftChatMessage.fromComponent(mutablecomponent));
       } else {
-         return this.players.size() >= this.maxPlayers && !this.canBypassPlayerLimit(p_11258_) ? Component.translatable("multiplayer.disconnect.server_full") : null;
-      }
-   }
-
-   public ServerPlayer getPlayerForLogin(GameProfile p_215625_, ClientInformation p_300548_) {
-      return new ServerPlayer(this.server, this.server.overworld(), p_215625_, p_300548_);
-   }
-
-   public boolean disconnectAllPlayersWithProfile(GameProfile p_299278_) {
+         // return this.players.size() >= this.maxPlayers && !this.canBypassPlayerLimit(gameprofile) ? IChatBaseComponent.translatable("multiplayer.disconnect.server_full") : null;
+         if (this.players.size() >= this.maxPlayers && !this.canBypassPlayerLimit(gameprofile)) {
+            event.disallow(PlayerLoginEvent.Result.KICK_FULL, org.spigotmc.SpigotConfig.serverFullMessage); // Spigot
+         }
+      }
+
+      cserver.getPluginManager().callEvent(event);
+      if (event.getResult() != PlayerLoginEvent.Result.ALLOWED) {
+         loginlistener.disconnect(event.getKickMessage());
+         return null;
+      }
+      return player;
+   }
+
+   // CraftBukkit start - added EntityPlayer
+   public ServerPlayer getPlayerForLogin(GameProfile gameprofile, ClientInformation clientinformation, ServerPlayer player) {
+      player.updateOptions(clientinformation);
+      return player;
+      // CraftBukkit end
+   }
+
+   public boolean disconnectAllPlayersWithProfile(GameProfile p_299278_, ServerPlayer player) { // CraftBukkit - added EntityPlayer
+      /* CraftBukkit start - Moved up
       UUID uuid = p_299278_.getId();
       Set<ServerPlayer> set = Sets.newIdentityHashSet();
 
@@ -400,75 +_,165 @@
       }
 
       return !set.isEmpty();
-   }
-
-   public ServerPlayer respawn(ServerPlayer p_11237_, boolean p_11238_) {
-      this.players.remove(p_11237_);
-      p_11237_.serverLevel().removePlayerImmediately(p_11237_, Entity.RemovalReason.DISCARDED);
-      BlockPos blockpos = p_11237_.getRespawnPosition();
-      float f = p_11237_.getRespawnAngle();
-      boolean flag = p_11237_.isRespawnForced();
-      ServerLevel serverlevel = this.server.getLevel(p_11237_.getRespawnDimension());
+      */
+      return player == null;
+      // CraftBukkit end
+   }
+
+   public ServerPlayer respawn(ServerPlayer p_11237_, boolean p_11238_, PlayerRespawnEvent.RespawnReason reason) {
+      return this.respawn(p_11237_, this.server.getLevel(p_11237_.getRespawnDimension()), p_11238_, null, true, reason);
+   }
+
+   public ServerPlayer respawn(ServerPlayer player, ServerLevel level, boolean flag, org.bukkit.Location location, boolean avoidSuffocation, PlayerRespawnEvent.RespawnReason reason) {
+      player.stopRiding(); // CraftBukkit
+      this.players.remove(player);
+      this.playersByName.remove(player.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
+      player.serverLevel().removePlayerImmediately(player, Entity.RemovalReason.DISCARDED);
+      BlockPos blockpos = player.getRespawnPosition();
+      float f = player.getRespawnAngle();
+      boolean flag1 = player.isRespawnForced();
+      /* CraftBukkit start
+      ServerLevel serverlevel = this.server.getLevel(player.getRespawnDimension());
       Optional<Vec3> optional;
       if (serverlevel != null && blockpos != null) {
-         optional = Player.findRespawnPositionAndUseSpawnBlock(serverlevel, blockpos, f, flag, p_11238_);
+         optional = Player.findRespawnPositionAndUseSpawnBlock(serverlevel, blockpos, f, flag1, flag);
       } else {
          optional = Optional.empty();
       }
 
       ServerLevel serverlevel1 = serverlevel != null && optional.isPresent() ? serverlevel : this.server.overworld();
-      ServerPlayer serverplayer = new ServerPlayer(this.server, serverlevel1, p_11237_.getGameProfile(), p_11237_.clientInformation());
-      serverplayer.connection = p_11237_.connection;
-      serverplayer.restoreFrom(p_11237_, p_11238_);
-      serverplayer.setId(p_11237_.getId());
-      serverplayer.setMainArm(p_11237_.getMainArm());
-
-      for(String s : p_11237_.getTags()) {
+      ServerPlayer serverplayer = new ServerPlayer(this.server, serverlevel1, player.getGameProfile(), player.clientInformation());
+      */
+
+      ServerPlayer serverplayer = player;
+      org.bukkit.World fromWorld = player.getBukkitEntity().getWorld();
+      serverplayer.wonGame = false;
+
+      serverplayer.connection = player.connection;
+      serverplayer.restoreFrom(player, flag);
+      serverplayer.setId(player.getId());
+      serverplayer.setMainArm(player.getMainArm());
+
+      for(String s : player.getTags()) {
          serverplayer.addTag(s);
       }
 
       boolean flag2 = false;
-      if (optional.isPresent()) {
-         BlockState blockstate = serverlevel1.getBlockState(blockpos);
-         boolean flag1 = blockstate.is(Blocks.RESPAWN_ANCHOR);
-         Vec3 vec3 = optional.get();
-         float f1;
-         if (!blockstate.is(BlockTags.BEDS) && !flag1) {
-            f1 = f;
-         } else {
-            Vec3 vec31 = Vec3.atBottomCenterOf(blockpos).subtract(vec3).normalize();
-            f1 = (float)Mth.wrapDegrees(Mth.atan2(vec31.z, vec31.x) * (double)(180F / (float)Math.PI) - 90.0D);
-         }
-
-         serverplayer.moveTo(vec3.x, vec3.y, vec3.z, f1, 0.0F);
-         serverplayer.setRespawnPosition(serverlevel1.dimension(), blockpos, f, flag, false);
-         flag2 = !p_11238_ && flag1;
-      } else if (blockpos != null) {
-         serverplayer.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.NO_RESPAWN_BLOCK_AVAILABLE, 0.0F));
+
+      // CraftBukkit start - fire PlayerRespawnEvent
+      if (location == null) {
+         boolean isBedSpawn = false;
+         ServerLevel worldserver1 = this.server.getLevel(player.getRespawnDimension());
+         if (worldserver1 != null) {
+            Optional optional;
+
+            if (blockpos != null) {
+               optional = Player.findRespawnPositionAndUseSpawnBlock(worldserver1, blockpos, f, flag1, flag);
+            } else {
+               optional = Optional.empty();
+            }
+
+            if (optional.isPresent()) {
+               BlockState iblockdata = worldserver1.getBlockState(blockpos);
+               boolean flag3 = iblockdata.is(Blocks.RESPAWN_ANCHOR);
+               Vec3 vec3d = (Vec3) optional.get();
+               float f1;
+
+               if (!iblockdata.is(BlockTags.BEDS) && !flag3) {
+                  f1 = f;
+               } else {
+                  Vec3 vec3d1 = Vec3.atBottomCenterOf(blockpos).subtract(vec3d).normalize();
+
+                  f1 = (float) Mth.wrapDegrees(Mth.atan2(vec3d1.z, vec3d1.x) * 57.2957763671875D - 90.0D);
+               }
+
+               // entityplayer1.setRespawnPosition(worldserver1.dimension(), blockposition, f, flag1, false); // CraftBukkit - not required, just copies old location into reused entity
+               flag2 = !flag && flag3;
+               isBedSpawn = true;
+               location = org.bukkit.craftbukkit.v1_20_R2.util.CraftLocation.toBukkit(vec3d, worldserver1.getWorld(), f1, 0.0F);
+            } else if (blockpos != null) {
+               serverplayer.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.NO_RESPAWN_BLOCK_AVAILABLE, 0.0F));
+               serverplayer.setRespawnPosition(null, null, 0f, false, false, PlayerSpawnChangeEvent.Cause.RESET); // CraftBukkit - SPIGOT-5988: Clear respawn location when obstructed
+            }
+         }
+
+         if (location == null) {
+            worldserver1 = this.server.overworld();
+            blockpos = serverplayer.getSpawnPoint(worldserver1);
+            location = org.bukkit.craftbukkit.v1_20_R2.util.CraftLocation.toBukkit(blockpos, worldserver1.getWorld()).add(0.5F, 0.1F, 0.5F);
+         }
+
+         org.bukkit.entity.Player respawnPlayer = serverplayer.getBukkitEntity();
+         PlayerRespawnEvent respawnEvent = new PlayerRespawnEvent(respawnPlayer, location, isBedSpawn && !flag2, flag2, reason);
+         cserver.getPluginManager().callEvent(respawnEvent);
+         // Spigot Start
+         if (player.connection.isDisconnected()) {
+            return player;
+         }
+         // Spigot End
+
+         location = respawnEvent.getRespawnLocation();
+         if (!flag) player.reset(); // SPIGOT-4785
+      } else {
+         location.setWorld(level.getWorld());
       }
+      ServerLevel serverlevel1 = ((org.bukkit.craftbukkit.v1_20_R2.CraftWorld) location.getWorld()).getHandle();
+      serverplayer.spawnIn(serverlevel1);
+      serverplayer.unsetRemoved();
+      serverplayer.setShiftKeyDown(false);
+      serverplayer.forceSetPositionRotation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
 
-      while(!serverlevel1.noCollision(serverplayer) && serverplayer.getY() < (double)serverlevel1.getMaxBuildHeight()) {
+      while (avoidSuffocation && !level.noCollision((Entity) serverplayer) && serverplayer.getY() < (double) serverlevel1.getMaxBuildHeight()) {
+         // CraftBukkit end
          serverplayer.setPos(serverplayer.getX(), serverplayer.getY() + 1.0D, serverplayer.getZ());
       }
 
-      byte b0 = (byte)(p_11238_ ? 1 : 0);
+      byte b0 = (byte)(flag ? 1 : 0);
       ServerLevel serverlevel2 = serverplayer.serverLevel();
       LevelData leveldata = serverlevel2.getLevelData();
+
       serverplayer.connection.send(new ClientboundRespawnPacket(serverplayer.createCommonSpawnInfo(serverlevel2), b0));
-      serverplayer.connection.teleport(serverplayer.getX(), serverplayer.getY(), serverplayer.getZ(), serverplayer.getYRot(), serverplayer.getXRot());
+      serverplayer.connection.send(new ClientboundSetChunkCacheRadiusPacket(serverlevel1.spigotConfig.viewDistance)); // Spigot
+      serverplayer.connection.send(new ClientboundSetSimulationDistancePacket(serverlevel1.spigotConfig.simulationDistance)); // Spigot
+      serverplayer.connection.teleport(org.bukkit.craftbukkit.v1_20_R2.util.CraftLocation.toBukkit(serverplayer.position(), serverlevel2.getWorld(), serverplayer.getYRot(), serverplayer.getXRot())); // CraftBukkit
       serverplayer.connection.send(new ClientboundSetDefaultSpawnPositionPacket(serverlevel1.getSharedSpawnPos(), serverlevel1.getSharedSpawnAngle()));
       serverplayer.connection.send(new ClientboundChangeDifficultyPacket(leveldata.getDifficulty(), leveldata.isDifficultyLocked()));
       serverplayer.connection.send(new ClientboundSetExperiencePacket(serverplayer.experienceProgress, serverplayer.totalExperience, serverplayer.experienceLevel));
       this.sendLevelInfo(serverplayer, serverlevel1);
       this.sendPlayerPermissionLevel(serverplayer);
-      serverlevel1.addRespawnedPlayer(serverplayer);
-      this.players.add(serverplayer);
-      this.playersByUUID.put(serverplayer.getUUID(), serverplayer);
-      serverplayer.initInventoryMenu();
+      if (!player.connection.isDisconnected()) {
+         serverlevel1.addRespawnedPlayer(serverplayer);
+         this.players.add(serverplayer);
+         this.playersByName.put(serverplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT), serverplayer); // Spigot
+         this.playersByUUID.put(serverplayer.getUUID(), serverplayer);
+         net.minecraftforge.event.ForgeEventFactory.firePlayerRespawnEvent(serverplayer, flag);
+      }
+      // serverplayer.initInventoryMenu();
       serverplayer.setHealth(serverplayer.getHealth());
       if (flag2) {
          serverplayer.connection.send(new ClientboundSoundPacket(SoundEvents.RESPAWN_ANCHOR_DEPLETE, SoundSource.BLOCKS, (double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ(), 1.0F, 1.0F, serverlevel1.getRandom().nextLong()));
       }
+      // Added from changeDimension
+      sendAllPlayerInfo(serverplayer); // Update health, etc...
+      serverplayer.onUpdateAbilities();
+      for (MobEffectInstance mobEffect : serverplayer.getActiveEffects()) {
+         serverplayer.connection.send(new ClientboundUpdateMobEffectPacket(serverplayer.getId(), mobEffect));
+      }
+
+      // Fire advancement trigger
+      serverplayer.triggerDimensionChangeTriggers(((org.bukkit.craftbukkit.v1_20_R2.CraftWorld) fromWorld).getHandle());
+
+      // Don't fire on respawn
+      if (fromWorld != location.getWorld()) {
+         PlayerChangedWorldEvent event = new PlayerChangedWorldEvent(serverplayer.getBukkitEntity(), fromWorld);
+         server.server.getPluginManager().callEvent(event);
+      }
+
+      // Save player file again if they were disconnected
+      if (serverplayer.connection.isDisconnected()) {
+         this.save(serverplayer);
+      }
+      // CraftBukkit end
 
       return serverplayer;
    }
@@ -481,18 +_,44 @@
 
    public void tick() {
       if (++this.sendAllPlayerInfoIn > 600) {
-         this.broadcastAll(new ClientboundPlayerInfoUpdatePacket(EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LATENCY), this.players));
+         // CraftBukkit start
+         for (int i = 0; i < this.players.size(); ++i) {
+            final ServerPlayer target = this.players.get(i);
+
+            target.connection.send(new ClientboundPlayerInfoUpdatePacket(EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LATENCY), this.players.stream().filter(new Predicate<ServerPlayer>() {
+               @Override
+               public boolean test(ServerPlayer input) {
+                  return target.getBukkitEntity().canSee(input.getBukkitEntity());
+               }
+            }).collect(java.util.stream.Collectors.toList())));
+         }
+         // CraftBukkit end
          this.sendAllPlayerInfoIn = 0;
       }
 
    }
 
-   public void broadcastAll(Packet<?> p_11269_) {
-      for(ServerPlayer serverplayer : this.players) {
-         serverplayer.connection.send(p_11269_);
-      }
-
-   }
+   public void broadcastAll(Packet<?> packet) {
+      for (ServerPlayer serverplayer : this.players) {
+         serverplayer.connection.send(packet);
+      }
+   }
+
+   // CraftBukkit start - add a world/entity limited version
+   public void broadcastAll(Packet packet, Player player) {
+      for (ServerPlayer serverPlayer : this.players) {
+         if (serverPlayer != null && serverPlayer.getBukkitEntity().canSee(player.getBukkitEntity())) {
+            serverPlayer.connection.send(packet);
+         }
+      }
+   }
+
+   public void broadcastAll(Packet<?> p_11269_, Level level) {
+      for(Player player : level.players()) {
+         ((ServerPlayer) player).connection.send(p_11269_);
+      }
+   }
+   // CraftBukkit end
 
    public void broadcastAll(Packet<?> p_11271_, ResourceKey<Level> p_11272_) {
       for(ServerPlayer serverplayer : this.players) {
@@ -550,6 +_,7 @@
    }
 
    public void op(GameProfile p_11254_) {
+      if (net.minecraftforge.event.ForgeEventFactory.onPermissionChanged(p_11254_, this.server.getOperatorUserPermissionLevel(), this)) return;
       this.ops.add(new ServerOpListEntry(p_11254_, this.server.getOperatorUserPermissionLevel(), this.ops.canBypassPlayerLimit(p_11254_)));
       ServerPlayer serverplayer = this.getPlayer(p_11254_.getId());
       if (serverplayer != null) {
@@ -559,6 +_,7 @@
    }
 
    public void deop(GameProfile p_11281_) {
+      if (net.minecraftforge.event.ForgeEventFactory.onPermissionChanged(p_11281_, 0, this)) return;
       this.ops.remove(p_11281_);
       ServerPlayer serverplayer = this.getPlayer(p_11281_.getId());
       if (serverplayer != null) {
@@ -581,6 +_,7 @@
          p_11227_.connection.send(new ClientboundEntityEventPacket(p_11227_, b0));
       }
 
+      p_11227_.getBukkitEntity().recalculatePermissions(); // CraftBukkit
       this.server.getCommands().sendCommands(p_11227_);
    }
 
@@ -594,18 +_,19 @@
 
    @Nullable
    public ServerPlayer getPlayerByName(String p_11256_) {
-      for(ServerPlayer serverplayer : this.players) {
-         if (serverplayer.getGameProfile().getName().equalsIgnoreCase(p_11256_)) {
-            return serverplayer;
-         }
-      }
-
-      return null;
+      return this.playersByName.get(p_11256_.toLowerCase(java.util.Locale.ROOT)); // Spigot
    }
 
    public void broadcast(@Nullable Player p_11242_, double p_11243_, double p_11244_, double p_11245_, double p_11246_, ResourceKey<Level> p_11247_, Packet<?> p_11248_) {
       for(int i = 0; i < this.players.size(); ++i) {
          ServerPlayer serverplayer = this.players.get(i);
+
+         // CraftBukkit start - Test if player receiving packet can see the source of the packet
+         if (p_11242_ != null && !serverplayer.getBukkitEntity().canSee(p_11242_.getBukkitEntity())) {
+            continue;
+         }
+         // CraftBukkit end
+
          if (serverplayer != p_11242_ && serverplayer.level().dimension() == p_11247_) {
             double d0 = p_11243_ - serverplayer.getX();
             double d1 = p_11244_ - serverplayer.getY();
@@ -645,22 +_,34 @@
    }
 
    public void sendLevelInfo(ServerPlayer p_11230_, ServerLevel p_11231_) {
-      WorldBorder worldborder = this.server.overworld().getWorldBorder();
+      WorldBorder worldborder = p_11230_.level().getWorldBorder(); // CraftBukkit
       p_11230_.connection.send(new ClientboundInitializeBorderPacket(worldborder));
       p_11230_.connection.send(new ClientboundSetTimePacket(p_11231_.getGameTime(), p_11231_.getDayTime(), p_11231_.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)));
       p_11230_.connection.send(new ClientboundSetDefaultSpawnPositionPacket(p_11231_.getSharedSpawnPos(), p_11231_.getSharedSpawnAngle()));
       if (p_11231_.isRaining()) {
-         p_11230_.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0.0F));
-         p_11230_.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, p_11231_.getRainLevel(1.0F)));
-         p_11230_.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, p_11231_.getThunderLevel(1.0F)));
+         // CraftBukkit start - handle player weather
+         // p_11230_.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0.0F));
+         // p_11230_.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, p_11231_.getRainLevel(1.0F)));
+         // p_11230_.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, p_11231_.getThunderLevel(1.0F)));
+         p_11230_.setPlayerWeather(org.bukkit.WeatherType.DOWNFALL, false);
+         p_11230_.updateWeather(-p_11231_.rainLevel, p_11231_.rainLevel, -p_11231_.thunderLevel, p_11231_.thunderLevel);
+         // CraftBukkit end
       }
 
    }
 
    public void sendAllPlayerInfo(ServerPlayer p_11293_) {
       p_11293_.inventoryMenu.sendAllDataToRemote();
-      p_11293_.resetSentInfo();
+      // p_11293_.resetSentInfo();
+      p_11293_.getBukkitEntity().updateScaledHealth(); // CraftBukkit - Update scaled health on respawn and worldchange
+      p_11293_.getEntityData().refresh(p_11293_); // CraftBukkkit - SPIGOT-7218: sync metadata
       p_11293_.connection.send(new ClientboundSetCarriedItemPacket(p_11293_.getInventory().selected));
+      // CraftBukkit start - from GameRules
+      int i = p_11293_.level().getGameRules().getBoolean(GameRules.RULE_REDUCEDDEBUGINFO) ? 22 : 23;
+      p_11293_.connection.send(new ClientboundEntityEventPacket(p_11293_, (byte) i));
+      float immediateRespawn = p_11293_.level().getGameRules().getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN) ? 1.0F: 0.0F;
+      p_11293_.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.IMMEDIATE_RESPAWN, immediateRespawn));
+      // CraftBukkit end
    }
 
    public int getPlayerCount() {
@@ -713,11 +_,21 @@
    }
 
    public void removeAll() {
-      for(int i = 0; i < this.players.size(); ++i) {
-         (this.players.get(i)).connection.disconnect(Component.translatable("multiplayer.disconnect.server_shutdown"));
-      }
-
-   }
+      // CraftBukkit start - disconnect safely
+      for (ServerPlayer player : this.players) {
+         player.connection.disconnect(this.server.server.getShutdownMessage()); // CraftBukkit - add custom shutdown message
+      }
+      // CraftBukkit end
+
+   }
+
+   // CraftBukkit start
+   public void broadcastMessage(Component[] iChatBaseComponents) {
+      for (Component component : iChatBaseComponents) {
+         broadcastSystemMessage(component, false);
+      }
+   }
+   // CraftBukkit end
 
    public void broadcastSystemMessage(Component p_240618_, boolean p_240644_) {
       this.broadcastSystemMessage(p_240618_, (p_215639_) -> {
@@ -767,34 +_,46 @@
       return p_251384_.hasSignature() && !p_251384_.hasExpiredServer(Instant.now());
    }
 
-   public ServerStatsCounter getPlayerStats(Player p_11240_) {
-      UUID uuid = p_11240_.getUUID();
-      ServerStatsCounter serverstatscounter = this.stats.get(uuid);
-      if (serverstatscounter == null) {
+   // CraftBukkit start
+   public ServerStatsCounter getPlayerStats(ServerPlayer p_11240_) {
+      ServerStatsCounter stats = p_11240_.getStats();
+      return stats == null ? getPlayerStats(p_11240_.getUUID(), p_11240_.getDisplayName().getString()) : stats;
+   }
+
+   public ServerStatsCounter getPlayerStats(UUID uuid, String displayName) {
+      ServerPlayer player = this.getPlayer(uuid);
+      ServerStatsCounter stats = player == null ? null : player.getStats();
+      // CraftBukkit end
+
+      if (stats == null) {
          File file1 = this.server.getWorldPath(LevelResource.PLAYER_STATS_DIR).toFile();
          File file2 = new File(file1, uuid + ".json");
+
          if (!file2.exists()) {
-            File file3 = new File(file1, p_11240_.getName().getString() + ".json");
+            File file3 = new File(file1, displayName + ".json"); // CraftBukkit
             Path path = file3.toPath();
+
             if (FileUtil.isPathNormalized(path) && FileUtil.isPathPortable(path) && path.startsWith(file1.getPath()) && file3.isFile()) {
                file3.renameTo(file2);
             }
          }
 
-         serverstatscounter = new ServerStatsCounter(this.server, file2);
-         this.stats.put(uuid, serverstatscounter);
+         stats = new ServerStatsCounter(this.server, file2);
+         // this.stats.put(uuid, stats); // CraftBukkit
       }
 
-      return serverstatscounter;
+      return stats;
    }
 
    public PlayerAdvancements getPlayerAdvancements(ServerPlayer p_11297_) {
       UUID uuid = p_11297_.getUUID();
-      PlayerAdvancements playeradvancements = this.advancements.get(uuid);
+      PlayerAdvancements playeradvancements = p_11297_.getAdvancements(); // CraftBukkit
+
       if (playeradvancements == null) {
          Path path = this.server.getWorldPath(LevelResource.PLAYER_ADVANCEMENTS_DIR).resolve(uuid + ".json");
+
          playeradvancements = new PlayerAdvancements(this.server.getFixerUpper(), this, this.server.getAdvancements(), path, p_11297_);
-         this.advancements.put(uuid, playeradvancements);
+         // this.advancements.put(uuid, playeradvancements); // CraftBukkit
       }
 
       playeradvancements.setPlayer(p_11297_);
@@ -826,7 +_,7 @@
    }
 
    public List<ServerPlayer> getPlayers() {
-      return this.players;
+      return this.playersView; //Unmodifiable view, we don't want people removing things without us knowing.
    }
 
    @Nullable
@@ -839,10 +_,19 @@
    }
 
    public void reloadResources() {
+      // CraftBukkit start
+      /*
       for(PlayerAdvancements playeradvancements : this.advancements.values()) {
          playeradvancements.reload(this.server.getAdvancements());
+      }*/
+
+      for (ServerPlayer player : this.players) {
+         player.getAdvancements().reload(this.server.getAdvancements());
+         player.getAdvancements().flushDirty(player); // CraftBukkit - trigger immediate flush of advancements
       }
+      // CraftBukkit end
 
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.OnDatapackSyncEvent(this, null));
       this.broadcastAll(new ClientboundUpdateTagsPacket(TagNetworkSerialization.serializeTagsToNetwork(this.registries)));
       ClientboundUpdateRecipesPacket clientboundupdaterecipespacket = new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getRecipes());
 
