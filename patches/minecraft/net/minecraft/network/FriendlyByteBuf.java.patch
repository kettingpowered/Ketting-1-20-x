--- a/net/minecraft/network/FriendlyByteBuf.java
+++ b/net/minecraft/network/FriendlyByteBuf.java
@@ -78,7 +_,7 @@
 import org.joml.Quaternionf;
 import org.joml.Vector3f;
 
-public class FriendlyByteBuf extends ByteBuf {
+public class FriendlyByteBuf extends ByteBuf implements net.minecraftforge.common.extensions.IForgeFriendlyByteBuf {
    public static final int DEFAULT_NBT_QUOTA = 2097152;
    private final ByteBuf source;
    public static final short MAX_STRING_LENGTH = Short.MAX_VALUE;
@@ -551,7 +_,7 @@
       try {
          NbtIo.writeAnyTag(p_300580_, new ByteBufOutputStream(this));
          return this;
-      } catch (IOException ioexception) {
+      } catch (Exception ioexception) { // CraftBukkit - IOException -> Exception
          throw new EncoderException(ioexception);
       }
    }
@@ -577,7 +_,16 @@
    }
 
    public FriendlyByteBuf writeItem(ItemStack p_130056_) {
-      if (p_130056_.isEmpty()) {
+      return writeItemStack(p_130056_, true);
+   }
+
+   /**
+    * Most ItemStack serialization is Server to Client,and doesn't need to know the FULL tag details.
+    * One exception is items from the creative menu, which must be sent from Client to Server with their full NBT.
+    * If you want to send the FULL tag set limitedTag to false
+    */
+   public FriendlyByteBuf writeItemStack(ItemStack p_130056_, boolean limitedTag) {
+      if (p_130056_.isEmpty() || p_130056_.getItem() == null) { // CraftBukkit - NPE fix itemstack.getItem()
          this.writeBoolean(false);
       } else {
          this.writeBoolean(true);
@@ -585,8 +_,12 @@
          this.writeId(BuiltInRegistries.ITEM, item);
          this.writeByte(p_130056_.getCount());
          CompoundTag compoundtag = null;
-         if (item.canBeDepleted() || item.shouldOverrideMultiplayerNbt()) {
-            compoundtag = p_130056_.getTag();
+         if (item.isDamageable(p_130056_) || item.shouldOverrideMultiplayerNbt()) {
+            // Spigot start - filter
+            p_130056_ = p_130056_.copy();
+            org.bukkit.craftbukkit.v1_20_R2.inventory.CraftItemStack.setItemMeta(p_130056_, org.bukkit.craftbukkit.v1_20_R2.inventory.CraftItemStack.getItemMeta(p_130056_));
+            // Spigot end
+            compoundtag = limitedTag ? p_130056_.getShareTag() : p_130056_.getTag();
          }
 
          this.writeNbt(compoundtag);
@@ -602,7 +_,12 @@
          Item item = this.readById(BuiltInRegistries.ITEM);
          int i = this.readByte();
          ItemStack itemstack = new ItemStack(item, i);
-         itemstack.setTag(this.readNbt());
+         itemstack.readShareTag(this.readNbt());
+         // CraftBukkit start
+         if (itemstack.getTag() != null) {
+            org.bukkit.craftbukkit.v1_20_R2.inventory.CraftItemStack.setItemMeta(itemstack, org.bukkit.craftbukkit.v1_20_R2.inventory.CraftItemStack.getItemMeta(itemstack));
+         }
+         // CraftBukkit end
          return itemstack;
       }
    }
